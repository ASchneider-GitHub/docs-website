{
  "data": {
    "allNewRelicSdkComponent": {
      "nodes": [
        {
          "description": "Retrieves all accounts and allows account selection through dropdown and\n search. To capture the currently selected account, you can use the `onChange`\n listener.\n\n Note that the platform already contains its own account picker, which is\n located in the header of it. This one can be configured to be shown using the\n `nerdlet.setConfig` API (passing `{ accountPicker: true }`), and its value\n can be read using `<PlatformStateContext.Consumer>`. For full reference,\n please check these APIs.",
          "name": "AccountPicker",
          "usage": "import { AccountPicker } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a descriptive label for this control, e.g. \"Accounts\".",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Shows an option at the top named \"All accounts\". When selected, the\n value provided by the `onChange` callback is\n `AccountPicker.CROSS_ACCOUNT`. This is useful when you have\n functionality that can operate on multiple accounts.",
              "isRequired": false,
              "name": "crossAccount",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the dropdown is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired every time the user clicks an account from the list.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "value",
                      "type": "number",
                      "description": "Id of the account selected."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "AccountPicker.SPACING_TYPE.EXTRA_LARGE",
                        "AccountPicker.SPACING_TYPE.LARGE",
                        "AccountPicker.SPACING_TYPE.MEDIUM",
                        "AccountPicker.SPACING_TYPE.NONE",
                        "AccountPicker.SPACING_TYPE.OMIT",
                        "AccountPicker.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Id of the selected account.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "number|enum",
                "meta": {
                  "types": [
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    },
                    {
                      "name": "enum",
                      "raw": "oneOf",
                      "meta": {
                        "constants": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = { accountId: null };\n\n    this.onChangeAccount = this.onChangeAccount.bind(this);\n  }\n\n  onChangeAccount(_, value) {\n    alert(`Selected account: ${value}`);\n\n    this.setState({ accountId: value });\n  }\n\n  render() {\n    return (\n      <AccountPicker\n        value={this.state.accountId}\n        onChange={this.onChangeAccount}\n      />\n    );\n  }\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = { accountId: null };\n\n    this.onChangeAccount = this.onChangeAccount.bind(this);\n  }\n\n  onChangeAccount(_, value) {\n    alert(`Selected account: ${value}`);\n\n    this.setState({ accountId: value });\n  }\n\n  render() {\n    return (\n      <AccountPicker\n        label=\"Account\"\n        labelInline\n        value={this.state.accountId}\n        onChange={this.onChangeAccount}\n      />\n    );\n  }\n}",
              "label": "With inline label"
            }
          ]
        },
        {
          "description": "Get the list of all the accounts the user is authorized to view.",
          "name": "AccountsQuery",
          "usage": "import { AccountsQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "AccountsQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "AccountsQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "AccountsQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "AccountsQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "AccountsQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "AccountsQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "A static method to use AccountsQuery as a Promise instead of as a React\n component.",
              "name": "AccountsQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `AccountsQuery` prop is valid as an option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<AccountsQuery>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List items={data} rowHeight={20}>\n        {({ item }) => (\n          <ListItem key={item.id}>\n            {item.id} - {item.name}\n          </ListItem>\n        )}\n      </List>\n    );\n  }}\n</AccountsQuery>",
              "label": "Declarative query"
            },
            {
              "sourceCode": "AccountsQuery.query().then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Save, delete, or update an account scoped document in NerdStorage. In\n order to successfully perform this operation, the user must have the\n right permissions.",
          "name": "AccountStorageMutation",
          "usage": "import { AccountStorageMutation } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "MutationResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your mutation.",
                  "name": "data",
                  "type": "Object"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Account identifier.",
              "isRequired": true,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Type of action to perform.",
              "isRequired": true,
              "name": "actionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "AccountStorageMutation.ACTION_TYPE.DELETE_COLLECTION",
                    "AccountStorageMutation.ACTION_TYPE.DELETE_DOCUMENT",
                    "AccountStorageMutation.ACTION_TYPE.WRITE_DOCUMENT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Render prop function as children.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "mutate",
                      "type": "function",
                      "description": "Function to trigger a mutation from your UI."
                    },
                    {
                      "name": "mutationResult",
                      "type": "MutationResult",
                      "description": "Results of the\n        mutation."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": true,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NerdStorage document. Documents are restricted to 64 kB in size when\n JSON-stringified.",
              "isRequired": false,
              "name": "document",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use AccountStorageMutation as a Promise instead of as a\n React component.",
              "name": "AccountStorageMutation.mutate",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the mutation options. Any\n        `AccountStorageMutation` prop is a valid option except `children`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "AccountStorageMutation.mutate({\n  accountId: 1,\n  actionType: AccountStorageMutation.ACTION_TYPE.WRITE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n  document: {\n    name: 'John',\n    surname: 'Doe',\n  },\n});",
              "label": "Write document"
            },
            {
              "sourceCode": "AccountStorageMutation.mutate({\n  accountId: 1,\n  actionType: AccountStorageMutation.ACTION_TYPE.DELETE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n});",
              "label": "Delete document"
            },
            {
              "sourceCode": "AccountStorageMutation.mutate({\n  accountId: 1,\n  actionType: AccountStorageMutation.ACTION_TYPE.DELETE_COLLECTION,\n  collection: 'myCollection',\n});",
              "label": "Delete collection"
            }
          ]
        },
        {
          "description": "Query NerdStorage for account scoped data.\n\n It is possible to retrieve an entire collection or a single document.",
          "name": "AccountStorageQuery",
          "usage": "import { AccountStorageQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Account identifier.",
              "isRequired": true,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": true,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "AccountStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "AccountStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "AccountStorageQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "AccountStorageQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "AccountStorageQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "AccountStorageQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "A static method to use AccountStorageQuery as a Promise instead of as a\n React component.",
              "name": "AccountStorageQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "An object containing the query options. Any\n        `AccountStorageQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<AccountStorageQuery accountId={1} collection=\"foo\">\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</AccountStorageQuery>",
              "label": "Query collection"
            },
            {
              "sourceCode": "<AccountStorageQuery accountId={1} collection=\"foo\" documentId=\"bar\">\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</AccountStorageQuery>",
              "label": "Query document"
            },
            {
              "sourceCode": "AccountStorageQuery.query({\n  accountId: 1,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "The `<AutoSizer>` component provides functionality to react to changes in\n size in the element in which they are contained, by measuring it. When the\n `width` or the `height` of that outer element changes, the children are\n rerendered and will receive the new the measurements as an object.",
          "name": "AutoSizer",
          "usage": "import { AutoSizer } from 'nr1'",
          "typeDefs": [
            {
              "name": "OnResizeArguments",
              "properties": [
                {
                  "description": "Height of the container",
                  "name": "height",
                  "type": "number"
                },
                {
                  "description": "Width of the container",
                  "name": "width",
                  "type": "number"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Children function that will be called every time the parent resizes.\n It is called with an object containing `width` and `height` keys, and\n must return the React element to be rendered.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Classname for custom styling.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback invoked when the container resizes.",
              "isRequired": false,
              "name": "onResize",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "args",
                      "type": "OnResizeArguments",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "AutoSizer.SPACING_TYPE.EXTRA_LARGE",
                        "AutoSizer.SPACING_TYPE.LARGE",
                        "AutoSizer.SPACING_TYPE.MEDIUM",
                        "AutoSizer.SPACING_TYPE.NONE",
                        "AutoSizer.SPACING_TYPE.OMIT",
                        "AutoSizer.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const style = {\n    backgroundColor: '#d8211a1a',\n    border: 'dashed 1px #d8211a4d',\n  };\n\n  return (\n    <AutoSizer>\n      {({ width, height }) => (\n        <div style={{ ...style, height, width }}>\n          width: {width}, height: {height}\n        </div>\n      )}\n    </AutoSizer>\n  );\n}",
              "label": "Basic"
            }
          ]
        },
        {
          "description": "Badges indicate the status of an object.",
          "name": "Badge",
          "usage": "import { Badge } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "String to render inside the badge. Ellipsis will apply if the content\n is more than 24 characters.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "string|number",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Badge.SPACING_TYPE.EXTRA_LARGE",
                        "Badge.SPACING_TYPE.LARGE",
                        "Badge.SPACING_TYPE.MEDIUM",
                        "Badge.SPACING_TYPE.NONE",
                        "Badge.SPACING_TYPE.OMIT",
                        "Badge.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Badge.TYPE.NORMAL",
              "description": "Type can be:\n\n - Normal — indicates general or in-progress status, eg. ‘Coming soon’\n   or ‘Minor’.\n - Info - indicates a new, created, or help status, eg. ‘New’, ‘Beta’\n   or ‘Information’.\n - Success - indicates a successful state.\n - Warning - indicates items that require advice state.\n - Critical - indicates problematic items.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Badge.TYPE.CRITICAL",
                    "Badge.TYPE.INFO",
                    "Badge.TYPE.NORMAL",
                    "Badge.TYPE.SUCCESS",
                    "Badge.TYPE.WARNING"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Badge>Normal</Badge>\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Badge>Normal</Badge>\n  <Badge type={Badge.TYPE.INFO}>New</Badge>\n  <Badge type={Badge.TYPE.SUCCESS}>Success</Badge>\n  <Badge type={Badge.TYPE.WARNING}>Warning</Badge>\n  <Badge type={Badge.TYPE.CRITICAL}>Critical</Badge>\n</div>",
              "label": "Types"
            }
          ]
        },
        {
          "description": "Creates a bar chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "BarChart",
          "usage": "import { BarChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 128 }],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 256 }],\n   },\n   {\n     metadata: {\n       id: 'series-3',\n       name: 'Serie 3',\n       color: '#f86e40',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 300 }],\n   },\n   {\n     metadata: {\n       id: 'series-4',\n       name: 'Serie 4',\n       color: '#c21684',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 450 }],\n   },\n   {\n     metadata: {\n       id: 'series-5',\n       name: 'Serie 5',\n       color: '#51c9b7',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 170 }],\n   },\n   {\n     metadata: {\n       id: 'series-6',\n       name: 'Serie 6',\n       color: '#48d2f0',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 200 }],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding bar.",
              "isRequired": false,
              "name": "onClickBar",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding bar.",
              "isRequired": false,
              "name": "onHoverBar",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<BarChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<BarChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<BarChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 128 }],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 256 }],\n     },\n     {\n       metadata: {\n         id: 'series-3',\n         name: 'Serie 3',\n         color: '#f86e40',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 300 }],\n     },\n     {\n       metadata: {\n         id: 'series-4',\n         name: 'Serie 4',\n         color: '#c21684',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 450 }],\n     },\n     {\n       metadata: {\n         id: 'series-5',\n         name: 'Serie 5',\n         color: '#51c9b7',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 170 }],\n     },\n     {\n       metadata: {\n         id: 'series-6',\n         name: 'Serie 6',\n         color: '#48d2f0',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 200 }],\n     },\n   ];;\n\n  return <BarChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a billboard chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "BillboardChart",
          "usage": "import { BillboardChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       viz: 'main',\n       units_data: {\n         y: 'MS'\n       }\n     },\n     data: [\n       { y: 0.128 }, // Previous value.\n       { y: 0.069 } // Current value.\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES_PER_MS'\n       }\n     },\n     data: [\n       { y: 67 },\n       { y: 128 }\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-3',\n       name: 'Serie 3',\n       viz: 'main',\n       units_data: {\n         y: 'COUNT'\n       }\n     },\n     data: [\n       { y: 3203423 },\n       { y: 5202142 }\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding billboard.",
              "isRequired": false,
              "name": "onClickBillboard",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding billboard.",
              "isRequired": false,
              "name": "onHoverBillboard",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<BillboardChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<BillboardChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<BillboardChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         viz: 'main',\n         units_data: {\n           y: 'MS'\n         }\n       },\n       data: [\n         { y: 0.128 }, // Previous value.\n         { y: 0.069 } // Current value.\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES_PER_MS'\n         }\n       },\n       data: [\n         { y: 67 },\n         { y: 128 }\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-3',\n         name: 'Serie 3',\n         viz: 'main',\n         units_data: {\n           y: 'COUNT'\n         }\n       },\n       data: [\n         { y: 3203423 },\n         { y: 5202142 }\n       ],\n     },\n   ];;\n\n  return <BillboardChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Typography styles are used throughout the UI. If used consistently they will\n help you maintain a hierarchy that is clear to your users.",
          "name": "BlockText",
          "usage": "import { BlockText } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Text to display.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "BlockText.SPACING_TYPE.EXTRA_LARGE",
                        "BlockText.SPACING_TYPE.LARGE",
                        "BlockText.SPACING_TYPE.MEDIUM",
                        "BlockText.SPACING_TYPE.NONE",
                        "BlockText.SPACING_TYPE.OMIT",
                        "BlockText.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Tag in which to wrap the text.\n\n Useful for changing the semantic meaning of the text. This does\n not apply any style.",
              "isRequired": false,
              "name": "tagType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "BlockText.TAG_TYPE.DIV",
                    "BlockText.TAG_TYPE.P"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "BlockText.TYPE.NORMAL",
              "description": "Type of text that you want to display.\n\n This applies styles according to the type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "BlockText.TYPE.NORMAL",
                    "BlockText.TYPE.PARAGRAPH"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<>\n  <BlockText>\n    Typography is at the core of <strong>great</strong> user interface design.\n  </BlockText>\n</>",
              "label": "Basic"
            },
            {
              "sourceCode": "<>\n  <BlockText type={BlockText.TYPE.NORMAL}>\n    Typography is at the core of <strong>great</strong> user interface design.\n  </BlockText>\n  <BlockText type={BlockText.TYPE.PARAGRAPH}>\n    Typography is at the core of <strong>great</strong> user interface design.\n  </BlockText>\n</>",
              "label": "Types"
            },
            {
              "sourceCode": "<BlockText type={BlockText.TYPE.PARAGRAPH} tagType={BlockText.TYPE.DIV}>\n  This is a div element styled as a paragraph\n</BlockText>",
              "label": "Changing semantic"
            }
          ]
        },
        {
          "description": "Buttons are used throughout the product to provide users a way to complete an\n action. Try to not overuse buttons in your experience. This will help users\n know exactly what action you would like them to take. Never use more than one\n primary button in your experience.\n\n Primary Capabilities — the buttons can\n\n - perform one action\n - perform multiple actions, if multiple buttons are present.",
          "name": "Button",
          "usage": "import { Button } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Pass the `id` string of the element the `Button` controls when it's\n used to expand or open a panel. Use it along with `ariaExpanded`.",
              "isRequired": false,
              "name": "ariaControls",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const { expanded } = this.state;\nconst panelId = 'content-panel';\n\nreturn (\n  <>\n    <Button ariaControls={panelId} ariaExpanded={expanded}>\n      Expand content\n    </Button>\n    <div id={panelId} hidden={!expanded}>\n      Content\n    </div>\n  </>\n);",
                  "label": "Button expands a container"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Use it to indicate whether the element the `Button` controls is\n expanded or not.\n\n Recommended to also check `ariaControls` and `ariaHasPopup` examples.",
              "isRequired": false,
              "name": "ariaExpanded",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Use it to indicate that the `Button` toggles an interactive overlay\n element.\n\n The value can be:\n\n - `false` (default) indicates the element does not have a popup.\n - `true` indicates the popup has a `menu` role\n - `\"menu\"` indicates the popup has a `menu` role\n - `\"listbox\"` indicates the popup has a `listbox` role\n - `\"tree\"` indicates the popup has a `tree` role\n - `\"grid\"` indicates the popup has a `grid` role\n - `\"dialog\"` indicates the popup has a `dialog` role\n\n Read\n [WAI ARIA specifications for this attribute]INSERTLINKhttps://www.w3.org/TR/wai-aria-1.1/#aria-haspopup\n to know which one suits better for your use case.",
              "isRequired": false,
              "name": "ariaHasPopup",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const { modalHidden } = this.state;\n\nreturn (\n  <>\n    <Button\n      ariaHasPopup=\"dialog\"\n      ariaExpanded={!modalHidden}\n      onClick={() => this.setState({ modalHidden: false })}\n    >\n      Open modal\n    </Button>\n    <Modal\n      hidden={modalHidden}\n      onClose={() => this.setState({ modalHidden: true })}\n    />\n  </>\n);",
                  "label": "Button indicating that it opens a dialog"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Use it to describe better the context of the component's action or in\n buttons displaying only an icon for users on screen readers.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "<Button\n  iconType={Button.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH}\n  ariaLabel=\"Search for entities\"\n/>",
                  "label": "Icon-only Button with better accessibility"
                }
              ]
            },
            {
              "defaultValue": "null",
              "description": "Content to render inside the button.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Use the disabled state for a button prior to a user filling out the\n required fields of a form or when a user must complete some other\n task before the button can be enabled.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Icon to display.",
              "isRequired": false,
              "name": "iconType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__AREA_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__BAR_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__BULLET_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__LINE_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__MARKDOWN",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__PIE_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__TABLE_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART",
                    "Button.ICON_TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD",
                    "Button.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT",
                    "Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT",
                    "Button.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__ARROW__ARROW_VERTICAL",
                    "Button.ICON_TYPE.INTERFACE__ARROW__EXPAND",
                    "Button.ICON_TYPE.INTERFACE__ARROW__GO_TO",
                    "Button.ICON_TYPE.INTERFACE__ARROW__MOVE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__RESIZE",
                    "Button.ICON_TYPE.INTERFACE__ARROW__RETURN_LEFT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__RETURN_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__ARROW__SHRINK",
                    "Button.ICON_TYPE.INTERFACE__ARROW__SORT",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_LEFT",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_TOP",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__INFO__ANNOUNCEMENT",
                    "Button.ICON_TYPE.INTERFACE__INFO__HELP",
                    "Button.ICON_TYPE.INTERFACE__INFO__INFO",
                    "Button.ICON_TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ADJUST",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ALERT",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_ON",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__ARCHIVE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__CENTER",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__CONFIGURE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__DOWNLOAD",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__DRAG",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__EDIT",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__EXPORT",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__FILTER",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__FOLLOW",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__GROUP",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__HIDE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__HIGHLIGHT",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__IMPORT",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__MORE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__PIN",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__PLAY",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__REARRANGE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__REDO",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__REFRESH",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SHARE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SHARE_LINK",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SHOW",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_BACK",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__TAG",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__TRASH",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__UNDO",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__UNPIN",
                    "Button.ICON_TYPE.INTERFACE__OPERATIONS__UPLOAD",
                    "Button.ICON_TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER",
                    "Button.ICON_TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER",
                    "Button.ICON_TYPE.INTERFACE__SIGN__ASTERISK",
                    "Button.ICON_TYPE.INTERFACE__SIGN__CHECKMARK",
                    "Button.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__SIGN__CLOSE",
                    "Button.ICON_TYPE.INTERFACE__SIGN__DOLLAR_SIGN",
                    "Button.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION",
                    "Button.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__SIGN__MINUS",
                    "Button.ICON_TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__SIGN__NUMBER",
                    "Button.ICON_TYPE.INTERFACE__SIGN__PLUS",
                    "Button.ICON_TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__SIGN__TIMES",
                    "Button.ICON_TYPE.INTERFACE__SIGN__TIMES__SIZE_8",
                    "Button.ICON_TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE",
                    "Button.ICON_TYPE.INTERFACE__STATE__CLOSED",
                    "Button.ICON_TYPE.INTERFACE__STATE__CRITICAL",
                    "Button.ICON_TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__STATE__DISABLED",
                    "Button.ICON_TYPE.INTERFACE__STATE__ENABLED",
                    "Button.ICON_TYPE.INTERFACE__STATE__HEALTHY",
                    "Button.ICON_TYPE.INTERFACE__STATE__LOADING",
                    "Button.ICON_TYPE.INTERFACE__STATE__LOCK",
                    "Button.ICON_TYPE.INTERFACE__STATE__OPEN",
                    "Button.ICON_TYPE.INTERFACE__STATE__PRIVATE",
                    "Button.ICON_TYPE.INTERFACE__STATE__PUBLIC",
                    "Button.ICON_TYPE.INTERFACE__STATE__UNAVAILABLE",
                    "Button.ICON_TYPE.INTERFACE__STATE__UNLOCK",
                    "Button.ICON_TYPE.INTERFACE__STATE__WARNING",
                    "Button.ICON_TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD",
                    "Button.ICON_TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN",
                    "Button.ICON_TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN",
                    "Button.ICON_TYPE.INTERFACE__VIEW__GRID_VIEW",
                    "Button.ICON_TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW",
                    "Button.ICON_TYPE.INTERFACE__VIEW__LAYER_LIST",
                    "Button.ICON_TYPE.INTERFACE__VIEW__LIST_VIEW",
                    "Button.ICON_TYPE.INTERFACE__VIEW__SIXTH_SENSE",
                    "Button.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE",
                    "Button.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK",
                    "Button.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT",
                    "Button.ICON_TYPE.LOCATION__LOCATION__HOME",
                    "Button.ICON_TYPE.LOCATION__LOCATION__MAP",
                    "Button.ICON_TYPE.LOCATION__LOCATION__PIN",
                    "Button.ICON_TYPE.LOCATION__LOCATION__WORLD",
                    "Button.ICON_TYPE.PROFILES__EVENTS__COMMENT",
                    "Button.ICON_TYPE.PROFILES__EVENTS__COMMENT__A_EDIT",
                    "Button.ICON_TYPE.PROFILES__EVENTS__FAVORITE",
                    "Button.ICON_TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD",
                    "Button.ICON_TYPE.PROFILES__EVENTS__LIKE",
                    "Button.ICON_TYPE.PROFILES__USERS__ORGANIZATION",
                    "Button.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_ADD",
                    "Button.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT",
                    "Button.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE",
                    "Button.ICON_TYPE.PROFILES__USERS__TEAM",
                    "Button.ICON_TYPE.PROFILES__USERS__TEAM__A_ADD",
                    "Button.ICON_TYPE.PROFILES__USERS__TEAM__A_EDIT",
                    "Button.ICON_TYPE.PROFILES__USERS__TEAM__A_REMOVE",
                    "Button.ICON_TYPE.PROFILES__USERS__USER",
                    "Button.ICON_TYPE.PROFILES__USERS__USER__A_ADD",
                    "Button.ICON_TYPE.PROFILES__USERS__USER__A_EDIT",
                    "Button.ICON_TYPE.PROFILES__USERS__USER__A_REMOVE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "To indicate whether an action is in progress, especially in the case\n that it takes more than 1 second to complete, you should display the\n loading state.",
              "isRequired": false,
              "name": "loading",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the button.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Button.SIZE_TYPE.MEDIUM",
              "description": "We recommend you use the normal size button in almost all instances.\n\n Use the slim button sparingly as it diminishes the importance of the\n button. Do not use it solely to fit into a space, but consider\n increasing the space around a default button.\n\n The few cases to use a large button are in marketing-like material\n for your add-on: introducing it in a splash page or in a hero\n message.",
              "isRequired": false,
              "name": "sizeType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Button.SIZE_TYPE.LARGE",
                    "Button.SIZE_TYPE.MEDIUM",
                    "Button.SIZE_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Button.SPACING_TYPE.EXTRA_LARGE",
                        "Button.SPACING_TYPE.LARGE",
                        "Button.SPACING_TYPE.MEDIUM",
                        "Button.SPACING_TYPE.NONE",
                        "Button.SPACING_TYPE.OMIT",
                        "Button.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Button.TYPE.NORMAL",
              "description": "Type can be:\n\n - Primary — use to call attention to one specific action you want the\n   user to take as a next step.\n\n - Normal (used as secondary) — use when multiple actions need to be\n   displayed.\n\n - Outline — use for important actions that are not the main (primary)\n   action of a given view. This variation sits in between the primary\n   and default buttons in terms of hierarchy.\n\n - Plain — use when multiple actions need to be available that are\n   less important for the user to take.\n\n - Destructive — use when you have a destructive action like delete or\n   remove, which you would like the user to pause and consider before\n   completing.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Button.TYPE.DESTRUCTIVE",
                    "Button.TYPE.NORMAL",
                    "Button.TYPE.OUTLINE",
                    "Button.TYPE.PLAIN",
                    "Button.TYPE.PLAIN_NEUTRAL",
                    "Button.TYPE.PRIMARY"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Button onClick={() => alert('Hello World!')} type={Button.TYPE.PRIMARY}>\n    Click me\n  </Button>\n  <Button\n    onClick={() => alert('Hello World!')}\n    type={Button.TYPE.PRIMARY}\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD}\n  >\n    Click me\n  </Button>\n  <Button\n    type={Button.TYPE.PRIMARY}\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD}\n  />\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Button type={Button.TYPE.PRIMARY} sizeType={Button.SIZE_TYPE.LARGE}>\n    Click me\n  </Button>\n  <Button type={Button.TYPE.PRIMARY} sizeType={Button.SIZE_TYPE.MEDIUM}>\n    Click me\n  </Button>\n  <Button type={Button.TYPE.PRIMARY} sizeType={Button.SIZE_TYPE.SMALL}>\n    Click me\n  </Button>\n</div>",
              "label": "Sizes"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Button type={Button.TYPE.NORMAL}>Click me</Button>\n  <Button type={Button.TYPE.PRIMARY}>Click me</Button>\n  <Button type={Button.TYPE.DESTRUCTIVE}>Click me</Button>\n  <Button type={Button.TYPE.OUTLINE}>Click me</Button>\n  <Button type={Button.TYPE.PLAIN}>Click me</Button>\n  <Button type={Button.TYPE.PLAIN_NEUTRAL}>Click me</Button>\n</div>",
              "label": "Types"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Button disabled type={Button.TYPE.PRIMARY}>\n    Click me\n  </Button>\n  <Button\n    disabled\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD}\n    type={Button.TYPE.PRIMARY}\n  >\n    Click me\n  </Button>\n  <Button\n    disabled\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD}\n    type={Button.TYPE.PRIMARY}\n  />\n</div>",
              "label": "Disabled state"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Button loading type={Button.TYPE.PRIMARY}>\n    Click me\n  </Button>\n  <Button\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD}\n    loading\n    type={Button.TYPE.PRIMARY}\n  >\n    Click me\n  </Button>\n  <Button\n    iconType={Button.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD}\n    loading\n    type={Button.TYPE.PRIMARY}\n  />\n</div>",
              "label": "Loading state"
            }
          ]
        },
        {
          "description": "Draws a flexible and extensible content container.",
          "name": "Card",
          "usage": "import { Card } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the card.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set this prop to control the collapsed state of the component.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "collapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set this prop to make the component collapsible.",
              "isRequired": false,
              "name": "collapsible",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the initial collapsed state of the card is `collapsed`.\n\n Useful when you don't want to use a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "defaultCollapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the card to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the card to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "This function will be called whenever the user clicks the header to\n collapse or expand the component. If you are controlling the state of the\n component, use this to set the value of the `collapsed` prop.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "collapsed",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Card.SPACING_TYPE.EXTRA_LARGE",
                        "Card.SPACING_TYPE.LARGE",
                        "Card.SPACING_TYPE.MEDIUM",
                        "Card.SPACING_TYPE.NONE",
                        "Card.SPACING_TYPE.OMIT",
                        "Card.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Card>\n  <CardHeader title=\"Card title\" subtitle=\"This is a subtitle\" />\n  <CardBody>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </CardBody>\n</Card>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Card collapsible>\n  <CardHeader\n    title=\"Card title\"\n    subtitle=\"This is a subtitle\"\n    additionalInfoLink={{\n      label: 'See more',\n      onClick: console.log,\n      to: '#',\n    }}\n  />\n  <CardBody>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod\n    tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam,\n    quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo\n    consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse\n    cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </CardBody>\n</Card>",
              "label": "Collapsible - Uncontrolled"
            },
            {
              "sourceCode": "class MyComponent extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      collapsed: false,\n    };\n  }\n  render() {\n    const { collapsed } = this.state;\n    return (\n      <Card\n        collapsible\n        collapsed={collapsed}\n        onChange={(evt, collapsed) => this.setState({ collapsed })}\n      >\n        <CardHeader\n          title=\"Card title\"\n          subtitle=\"This is a subtitle\"\n          additionalInfoLink={{\n            label: 'See more',\n            onClick: console.log,\n            to: '#',\n          }}\n        />\n        <CardBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </CardBody>\n      </Card>\n    );\n  }\n}",
              "label": "Collapsible - Controlled"
            },
            {
              "sourceCode": "<Grid>\n  {[\n    {\n      title: 'Services - APM',\n      count: 11746,\n    },\n    {\n      title: 'Services - Open Telemetry',\n      count: 2845,\n    },\n    {\n      title: 'Hosts',\n      count: 1845,\n    },\n    {\n      title: 'Containers',\n      count: 394,\n    },\n  ].map((section) => (\n    <GridItem columnSpan={12}>\n      <Card collapsible>\n        <CardHeader\n          title={section.title}\n          additionalInfoLink={{\n            label: `View all (${section.count})`,\n            onClick: console.log,\n            to: '#',\n          }}\n        />\n        <CardBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </CardBody>\n      </Card>\n    </GridItem>\n  ))}\n</Grid>",
              "label": "Multiple collapsible cards"
            },
            {
              "sourceCode": "class MyComponent extends React.PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      collapsed: false,\n    };\n  }\n  render() {\n    const { collapsed } = this.state;\n    return (\n      <Card\n        collapsible\n        collapsed={collapsed}\n        onChange={(evt, collapsed) => this.setState({ collapsed })}\n      >\n        <CardHeader>\n          <HeadingText>Custom header</HeadingText>\n        </CardHeader>\n        <CardBody>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad\n          minim veniam, quis nostrud exercitation ullamco laboris nisi ut\n          aliquip ex ea commodo consequat. Duis aute irure dolor in\n          reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla\n          pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n          culpa qui officia deserunt mollit anim id est laborum.\n        </CardBody>\n      </Card>\n    );\n  }\n}",
              "label": "Custom header"
            },
            {
              "sourceCode": "class SectionedCard extends React.Component {\n  renderForm() {\n    return (\n      <Form\n        layoutType={Form.LAYOUT_TYPE.SPLIT}\n        splitSizeType={Form.SPLIT_SIZE_TYPE.SMALL}\n      >\n        <Switch label=\"Fit to data\" />\n        <TextField label=\"Custom min\" placeholder=\"0\" />\n        <TextField label=\"Custom max\" placeholder=\"Auto\" />\n        <MultilineTextField\n          label=\"Config\"\n          type={MultilineTextField.TYPE.PREFORMATTED}\n          placeholder={`{ showLabels: \"true\" }`}\n        />\n      </Form>\n    );\n  }\n\n  render() {\n    return (\n      <Card>\n        <CardBody>\n          <CardSection collapsible>\n            <CardSectionHeader title=\"Y axis\"></CardSectionHeader>\n            <CardSectionBody>{this.renderForm()}</CardSectionBody>\n          </CardSection>\n          <CardSection collapsible>\n            <CardSectionHeader title=\"X axis\"></CardSectionHeader>\n            <CardSectionBody>{this.renderForm()}</CardSectionBody>\n          </CardSection>\n        </CardBody>\n      </Card>\n    );\n  }\n}",
              "label": "Sectioned card"
            }
          ]
        },
        {
          "description": "Child element of the `<Card>` component.",
          "name": "CardBody",
          "usage": "import { CardBody } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the card body.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Child element of the `<Card>` component.",
          "name": "CardHeader",
          "usage": "import { CardHeader } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "The information shown in the header can be complemented/extended with a\n link.",
              "isRequired": false,
              "name": "additionalInfoLink",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the link.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Content to render inside the card body.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Subtitle of the header.",
              "isRequired": false,
              "name": "subtitle",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Title of the header. Required when the title is not provided as children.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Child element of the `<CardBody>` component.",
          "name": "CardSection",
          "usage": "import { CardSection } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the card.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set this prop to control the collapsed state of the component.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "collapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set this prop to make the component collapsible.",
              "isRequired": false,
              "name": "collapsible",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the initial collapsed state of the card is `collapsed`.\n\n Useful when you don't want to use a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "defaultCollapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "This function will be called whenever the user clicks the header to\n collapse or expand the component. If you are controlling the state of the\n component, use this to set the value of the `collapsed` prop.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "collapsed",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Child element of the `<CardSection>` component.",
          "name": "CardSectionBody",
          "usage": "import { CardSectionBody } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the card body.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Child element of the `<CardSection>` component.",
          "name": "CardSectionHeader",
          "usage": "import { CardSectionHeader } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "The information shown in the header can be complemented/extended with a\n link.",
              "isRequired": false,
              "name": "additionalInfoLink",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the link.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Content to render inside the section body.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Title of the header. Required when the title is not provided as children.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Groups different types of charts so that they can perform actions all\n together, like moving the needle according to their x-axes, showing the\n tooltip for the corresponding series, or graying out the area being selected\n in all charts at the same time.\n\n The component acts like a React fragment; it will not render an additional\n tag in the DOM (it only enables grouping for all charts inside it). This\n means that this component, unlike others, does not accept `className` or\n `style` tags.",
          "name": "ChartGroup",
          "usage": "import { ChartGroup } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Arbitrary content. All charts inside `ChartGroup` communicate between\n each other.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const query =\n    'SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType';\n  const chartStyle = { height: 200 };\n\n  return (\n    <ChartGroup>\n      <AreaChart style={chartStyle} accountIds={[1]} query={query} />\n      <LineChart style={chartStyle} accountIds={[1, 1067061]} query={query} />\n      <ScatterChart style={chartStyle} accountIds={[1]} query={query} />\n    </ChartGroup>\n  );\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const query =\n    'SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType';\n  const chartStyle = { height: 200 };\n\n  return (\n    <ChartGroup>\n      <AreaChart\n        style={chartStyle}\n        accountIds={[1]}\n        query={query}\n        fullWidth\n        fullHeight\n      />\n      <LineChart\n        style={chartStyle}\n        accountIds={[1, 1067061]}\n        query={query}\n        fullWidth\n        fullHeight\n      />\n      <ScatterChart\n        style={chartStyle}\n        accountIds={[1]}\n        query={query}\n        fullWidth\n        fullHeight\n      />\n    </ChartGroup>\n  );\n}",
              "label": "Fill container"
            }
          ]
        },
        {
          "description": "When a user chooses one or more options provided\n\n The checkbox state can be controlled through the `checked` and\n `indeterminate` property. If neither of those is provided the checkbox will\n manage its own state.\n\n You can listen to the checkbox state changes through the `onChange` prop.\n\n **Note**: Setting `checked` will override `defaultChecked` as it puts the\n component into a controlled state. `defaultChecked` should only be used for\n uncontrolled checkboxes.",
          "name": "Checkbox",
          "usage": "import { Checkbox } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "If `true`, the checkbox is checked.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the initial state of the checkbox is `checked`.\n\n Useful when you don't want to use a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "defaultChecked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the checkbox is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the checkbox is in an indeterminate state.\n\n If both the `checked` and `indeterminate` prop are provided then the\n `indeterminate` prop will prevail.",
              "isRequired": false,
              "name": "indeterminate",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the selected state of the checkbox changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": "The event source of the callback.\n        You can access the new value with `event.target.checked`."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Checkbox.SPACING_TYPE.EXTRA_LARGE",
                        "Checkbox.SPACING_TYPE.LARGE",
                        "Checkbox.SPACING_TYPE.MEDIUM",
                        "Checkbox.SPACING_TYPE.NONE",
                        "Checkbox.SPACING_TYPE.OMIT",
                        "Checkbox.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The value of the component. This goes into the inner checkbox input,\n not the component itself, and is returned as part of the `onChange`\n event target element.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Checkbox onChange={(event) => alert('Foo')} label=\"Foo\" />\n  <Checkbox indeterminate label=\"Bar\" />\n  <Checkbox checked disabled label=\"Baz\" />\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Checkbox onChange={(event) => alert('Foo')} info=\"Info value\" label=\"Foo\" />",
              "label": "With info"
            },
            {
              "sourceCode": "<Checkbox\n  onChange={(event) => alert('Foo')}\n  description=\"Description value\"\n  label=\"Foo\"\n/>",
              "label": "With description"
            },
            {
              "sourceCode": "<Checkbox\n  onChange={(event) => alert('Foo')}\n  invalid=\"Invalid message value\"\n  label=\"Foo\"\n/>",
              "label": "With invalid message"
            },
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isChecked: false,\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event) {\n    console.log(event);\n    const isChecked = event.target.checked;\n\n    this.setState({ isChecked });\n  }\n\n  render() {\n    return (\n      <Checkbox\n        checked={this.state.isChecked}\n        onChange={this.onChange}\n        label=\"Foo\"\n      />\n    );\n  }\n}",
              "label": "Controlled component"
            }
          ]
        },
        {
          "description": "A group of `<Checkbox>` buttons. The `<Checkbox>` buttons may either be\n direct children or descendants of the checkbox group.\n\n **Note**: Setting `value` will override `defaultValue` as it puts the group\n of checkboxes into a controlled state. `value` will not override checkboxes\n that have `checked` set, as `CheckboxGroup` will take control of uncontrolled\n `Checkbox` components and can't override controlled ones. `value` will\n however override `defaultChecked` on `Checkbox`.\n\n The `onChange` event handler for `CheckboxGroup` will fire after any\n `onChange` event handler set on individual `Checkbox` components. However, it\n is highly recommended to only set one event handler for the whole group in a\n controlled `CheckboxGroup`.\n\n `Checkbox` components **must** have a `value` set on them in order to be\n controlled by `CheckboxGroup`.",
          "name": "CheckboxGroup",
          "usage": "import { CheckboxGroup } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content of the CheckboxGroup.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "[]",
              "description": "Default values of the checkbox group. The `<Checkbox>` components\n with matching values will be selected.\n\n Useful when you don't want to use a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the checkbox group value changes (a\n `<Checkbox>` in the group is selected).",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": "Event source of the callback."
                    },
                    {
                      "name": "value",
                      "type": "string[]",
                      "description": "The values of the selected checkboxes."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Values of the checkbox group. The `<Checkbox>` components with\n matching values will be selected.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\">\n  <Checkbox label=\"Checkbox 1\" />\n  <Checkbox label=\"Checkbox 2\" />\n  <Checkbox label=\"Checkbox 3\" />\n</CheckboxGroup>",
              "label": "Basic"
            },
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\" info=\"Info value\">\n  <Checkbox label=\"Checkbox 1\" />\n  <Checkbox label=\"Checkbox 2\" />\n  <Checkbox label=\"Checkbox 3\" />\n</CheckboxGroup>",
              "label": "With label and info"
            },
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\" labelInline>\n  <Checkbox label=\"Checkbox 1\" />\n  <Checkbox label=\"Checkbox 2\" />\n  <Checkbox label=\"Checkbox 3\" />\n</CheckboxGroup>",
              "label": "With inline label"
            },
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\" description=\"Description value\">\n  <Checkbox label=\"Checkbox 1\" />\n  <Checkbox label=\"Checkbox 2\" />\n  <Checkbox label=\"Checkbox 3\" />\n</CheckboxGroup>",
              "label": "With description"
            },
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\" invalid=\"Invalid message value\">\n  <Checkbox label=\"Checkbox 1\" />\n  <Checkbox label=\"Checkbox 2\" />\n  <Checkbox label=\"Checkbox 3\" />\n</CheckboxGroup>",
              "label": "With invalid message"
            },
            {
              "sourceCode": "<CheckboxGroup label=\"My checkbox group\" defaultValue={['1', '2']}>\n  <Checkbox label=\"Checkbox 1\" value=\"1\" />\n  <Checkbox label=\"Checkbox 2\" value=\"2\" />\n  <Checkbox label=\"Checkbox 3\" value=\"3\" />\n</CheckboxGroup>",
              "label": "With default values"
            },
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      values: ['2'],\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event, values) {\n    this.setState({ values });\n  }\n\n  render() {\n    return (\n      <CheckboxGroup value={this.state.values} onChange={this.onChange}>\n        <Checkbox label=\"Checkbox 1\" value=\"1\" />\n        <Checkbox label=\"Checkbox 2\" value=\"2\" />\n        <Checkbox label=\"Checkbox 3\" value=\"3\" />\n      </CheckboxGroup>\n    );\n  }\n}",
              "label": "Controlled component"
            }
          ]
        },
        {
          "description": "Child element of the `<Layout>` component used only for left or right side\n areas, with the ability to collapse them. Can be used as a \"controlled\"\n component (i.e. by passing the `collapsed` boolean prop), or by default it\n will manage its own (un)collapsed state. It takes a `triggerType` prop,\n allowing you to choose the inbuilt triggers – the side area will include a\n button which allows the user to collapse the area and then expand it again –\n or custom, meaning you are using your own UI element elsewhere to control the\n (un)collapsed state.\n\n See [the `<Layout>` docs]INSERTLINK/components/layout/?tab=examples for example\n usage.\n\n The `<Layout>` component only supports one child of each `type`, shared\n between `<CollapsibleLayoutItem>` and `<LayoutItem>`.",
          "name": "CollapsibleLayoutItem",
          "usage": "import { CollapsibleLayoutItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to display inside the child item.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set this prop to control the collapsed state of the split from your\n own external control.",
              "isRequired": false,
              "name": "collapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Not actually a \"default\" – this only sets the _initial_ collapsed\n state of the split. Defaults to `false`.",
              "isRequired": false,
              "name": "defaultCollapsed",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "This function will be called whenever the user clicks the default\n trigger button to collapse or expand the split. If you are\n controlling the state of the component, use this to set the value of\n the `collapsed` prop.",
              "isRequired": false,
              "name": "onChangeCollapsed",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "collapsed",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "CollapsibleLayoutItem.SIZE_TYPE.MEDIUM",
              "description": "Determines the width of the layout item. We recommend you use the\n small size for navigation purposes (ex. sidebars) and the medium size\n for showing contextualized information (ex. activity stream).\n\n Size type only works on SPLIT_LEFT and SPLIT_RIGHT items.",
              "isRequired": false,
              "name": "sizeType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "CollapsibleLayoutItem.SIZE_TYPE.MEDIUM",
                    "CollapsibleLayoutItem.SIZE_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Choose whether to use the inbuilt trigger buttons to allow\n collapsing/expanding the split, or your own custom ones (e.g. a\n switch outside the layout or a custom button inside the layout). It\n is strongly recommended not to mix these patterns, i.e. do not choose\n `CollapsibleLayoutItem.TRIGGER_TYPE.INBUILT` _and_ also provide your\n own custom triggers.",
              "isRequired": true,
              "name": "triggerType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "CollapsibleLayoutItem.TRIGGER_TYPE.CUSTOM",
                    "CollapsibleLayoutItem.TRIGGER_TYPE.INBUILT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Type can be:\n\n - Split left — Render as a fixed area on the left of the layout.\n - Split right — Render as a fixed area on the right of the layout.",
              "isRequired": true,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "CollapsibleLayoutItem.TYPE.SPLIT_LEFT",
                    "CollapsibleLayoutItem.TYPE.SPLIT_RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "`<Dropdown>` are toggleable overlays for displaying a list of options.\n\n The `<Dropdown>` component can render the items in two ways: as an array of\n `<DropdownItem>` elements or as a render callback (Function as Children).\n\n The recommendation is to use the render callback when a large number of items\n is provided because then the dropdown will virtualize all the items and\n performance will be greatly improve.\n\n If you are willing to use `<Dropdown>` to paint a select field as you would\n do in a form, use `<Select>` instead.\n\n The component also supports nested lists, check out the\n [DropdownItem documentation]INSERTLINK/components/dropdown/dropdownitem/ to learn\n more.",
          "name": "Dropdown",
          "usage": "import { Dropdown } from 'nr1'",
          "typeDefs": [
            {
              "name": "DropdownRendererArguments",
              "properties": [
                {
                  "description": "Item to render",
                  "name": "item",
                  "type": "string"
                },
                {
                  "description": "Index of the item in the items array",
                  "name": "index",
                  "type": "number"
                },
                {
                  "description": "Array of items which we're iterating on",
                  "name": "items",
                  "type": "string[]"
                }
              ]
            },
            {
              "name": "Cursor",
              "properties": [
                {
                  "description": "First index of the range of items to load.",
                  "name": "startIndex",
                  "type": "number"
                },
                {
                  "description": "Last index of the range of items to load.",
                  "name": "stopIndex",
                  "type": "number"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a descriptive label for this control, e.g. \"Accounts\".",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "This component can render either declaratively, by directly passing a\n set of children or virtualized, by passing a render callback\n (function as children).\n\n Children can be of two types: `<DropdownItem>`s, to generate items;\n or `<DropdownSection>`s, when the dropdown is sectioned. Each section\n can, in turn, have `<DropdownItem>`s in it.\n\n The recommendation is to use the render callback when a large number\n of items is provided, since the item list will be virtualized by the\n component, thus increasing the performance.\n\n When using the render callback, items need to be provided through the\n `items` prop. Then, the callback will be called for each item present\n in the array, and the expected result is a `<DropdownItem>` or a\n `<DropdownSection>` depending on the `sectioned` prop.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|function",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "function",
                      "raw": "func",
                      "meta": {
                        "arguments": [],
                        "returnValue": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the dropdown is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Icon to display.",
              "isRequired": false,
              "name": "iconType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__AREA_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__BAR_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__BULLET_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__LINE_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__MARKDOWN",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__PIE_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__TABLE_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART",
                    "Dropdown.ICON_TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD",
                    "Dropdown.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT",
                    "Dropdown.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT",
                    "Dropdown.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__ARROW_VERTICAL",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__EXPAND",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__GO_TO",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__MOVE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__RESIZE",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__RETURN_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__RETURN_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__SHRINK",
                    "Dropdown.ICON_TYPE.INTERFACE__ARROW__SORT",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_TOP",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__INFO__ANNOUNCEMENT",
                    "Dropdown.ICON_TYPE.INTERFACE__INFO__HELP",
                    "Dropdown.ICON_TYPE.INTERFACE__INFO__INFO",
                    "Dropdown.ICON_TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ADJUST",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ALERT",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_ON",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__ARCHIVE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__CENTER",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__CONFIGURE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__DOWNLOAD",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__DRAG",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__EDIT",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__EXPORT",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__FILTER",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__FOLLOW",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__GROUP",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__HIDE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__HIGHLIGHT",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__IMPORT",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__MORE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__PIN",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__PLAY",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__REARRANGE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__REDO",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__REFRESH",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SHARE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SHARE_LINK",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SHOW",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_BACK",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__TAG",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__TRASH",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__UNDO",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__UNPIN",
                    "Dropdown.ICON_TYPE.INTERFACE__OPERATIONS__UPLOAD",
                    "Dropdown.ICON_TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER",
                    "Dropdown.ICON_TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__ASTERISK",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__CHECKMARK",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__CLOSE",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__DOLLAR_SIGN",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__MINUS",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__NUMBER",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__PLUS",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__TIMES",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__TIMES__SIZE_8",
                    "Dropdown.ICON_TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__CLOSED",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__CRITICAL",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__DISABLED",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__ENABLED",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__HEALTHY",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__LOADING",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__LOCK",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__OPEN",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__PRIVATE",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__PUBLIC",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__UNAVAILABLE",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__UNLOCK",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__WARNING",
                    "Dropdown.ICON_TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__GRID_VIEW",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__LAYER_LIST",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__LIST_VIEW",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__SIXTH_SENSE",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK",
                    "Dropdown.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT",
                    "Dropdown.ICON_TYPE.LOCATION__LOCATION__HOME",
                    "Dropdown.ICON_TYPE.LOCATION__LOCATION__MAP",
                    "Dropdown.ICON_TYPE.LOCATION__LOCATION__PIN",
                    "Dropdown.ICON_TYPE.LOCATION__LOCATION__WORLD",
                    "Dropdown.ICON_TYPE.PROFILES__EVENTS__COMMENT",
                    "Dropdown.ICON_TYPE.PROFILES__EVENTS__COMMENT__A_EDIT",
                    "Dropdown.ICON_TYPE.PROFILES__EVENTS__FAVORITE",
                    "Dropdown.ICON_TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD",
                    "Dropdown.ICON_TYPE.PROFILES__EVENTS__LIKE",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__ORGANIZATION",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_ADD",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__TEAM",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__TEAM__A_ADD",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__TEAM__A_EDIT",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__TEAM__A_REMOVE",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__USER",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__USER__A_ADD",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__USER__A_EDIT",
                    "Dropdown.ICON_TYPE.PROFILES__USERS__USER__A_REMOVE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Items to render, in the shape of a list of objects. Usually, each\n item in the items array contains the required data to generate the\n corresponding `<DropdownItem>` (or `<DropdownSection>` in case the\n dropdown is sectioned).\n\n This prop is required when rendering items with the render callback\n (function as children).",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "array",
                "meta": null,
                "raw": "array"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const items = ['Item 1', 'Item 2', 'Item 3'];\n\nconst dropdown = (\n  <Dropdown title=\"Dropdown\" items={items}>\n    {({ item, index }) => (\n      <DropdownItem key={index} onClick={() => console.log(item)}>\n        {item}\n      </DropdownItem>\n    )}\n  </Dropdown>\n);",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "To indicate whether an action is in progress, especially in the case\n that it takes more than 1 second to complete, you should display the\n loading state.",
              "isRequired": false,
              "name": "loading",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the dropdown is closed.",
              "isRequired": false,
              "name": "onClose",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when more items must be loaded. This happens when\n you're lazy loading the items and the items that are about to render\n cannot be found in the `items` array.\n\n This callback should be used to fetch/load the missing items from the\n backend or other sources.\n\n The returned Promise should be resolved once item data has finished\n loading. It will be used to determine when to refresh the list with\n the newly-loaded data. This callback may be called multiple times in\n reaction to a single scroll event.",
              "isRequired": false,
              "name": "onLoadMore",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "cursor",
                      "type": "Cursor",
                      "description": "Items to load."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "import { Dropdown, DropdownItem } from 'nr1';\n\n// This example assumes you have a way to know/load this information.\nconst remoteTotalNumberOfItems = 9000;\nconst items = [\n  { id: 1, text: 'Item 1' },\n  { id: 2, text: 'Item 2' },\n  { id: 3, text: 'Item 3' },\n  { id: 4, text: 'Item 4' },\n];\n\nfunction fetchMore({ startIndex, stopIndex }) {\n  return fetch(\n    `path/to/api?startIndex=${startIndex}&stopIndex=${stopIndex}`,\n  ).then((response) => {\n    // Store items in item list...\n  });\n}\n\nconst dropdown = (\n  <Dropdown\n    items={items}\n    onLoadMore={fetchMore}\n    rowCount={remoteTotalNumberOfItems}\n    title=\"Dropdown\"\n  >\n    {({ item, index }) => <DropdownItem key={index}>{item.text}</DropdownItem>}\n  </Dropdown>\n);",
                  "label": "Lazy loading items"
                },
                {
                  "sourceCode": "import { EntitiesByDomainTypeQuery, Dropdown, DropdownItem } from 'nr1';\n\nconst renderDropdown = (queryResult) => {\n  const { fetchMore, loading, data } = queryResult;\n  const { results, count } = data.actor.entitySearch;\n\n  return (\n    <Dropdown\n      items={results.entities}\n      onLoadMore={fetchMore}\n      rowCount={count}\n      title=\"Dropdown\"\n    >\n      {({ item, index }) => (\n        <DropdownItem key={index}>{item.text}</DropdownItem>\n      )}\n    </Dropdown>\n  );\n};\n\nconst style = { width: 200, height: 300 };\nconst dropdown = (\n  <EntitiesByDomainTypeQuery entityDomain=\"APM\" entityType=\"APPLICATION\">\n    {renderDropdown}\n  </EntitiesByDomainTypeQuery>\n);",
                  "label": "Integration with the query components"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the dropdown is opened.",
              "isRequired": false,
              "name": "onOpen",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the search input of the dropdown changes.\n This callback needs the `search` prop to be defined.",
              "isRequired": false,
              "name": "onSearch",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the dropdown is toggled.",
              "isRequired": false,
              "name": "onToggle",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "opened",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Dropdown.PLACEMENT_TYPE.BOTTOM_START",
              "description": "Specifies the placement of the dropdown relative to the dropdown\n trigger. Default display is on the bottom start, but you can also\n choose to display it from the bottom end.",
              "isRequired": false,
              "name": "placementType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Dropdown.PLACEMENT_TYPE.BOTTOM_END",
                    "Dropdown.PLACEMENT_TYPE.BOTTOM_START"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Number of rows.\n\n By default it's equal to length of array passed in the items prop.\n\n You should specify the `rowCount` when you know the total number of\n items but you want to lazy load them while scrolling.",
              "isRequired": false,
              "name": "rowCount",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value of the search input. The search input will be shown only if the\n value is defined.",
              "isRequired": false,
              "name": "search",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Establishes whether the dropdown is sectioned. A sectioned dropdown\n composes its options grouped by sections (made with\n `<DropdownSection>`), where each section is delimited by an optional\n title at the top, and a horizontal separator at the bottom.",
              "isRequired": false,
              "name": "sectioned",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Dropdown.SPACING_TYPE.EXTRA_LARGE",
                        "Dropdown.SPACING_TYPE.LARGE",
                        "Dropdown.SPACING_TYPE.MEDIUM",
                        "Dropdown.SPACING_TYPE.NONE",
                        "Dropdown.SPACING_TYPE.OMIT",
                        "Dropdown.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "",
              "description": "The text to display in the dropdown button. When not present, an icon\n must be passed instead.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Dropdown.TYPE.NORMAL",
              "description": "Type can be:\n\n - Primary — use to call attention to one specific action you want the\n   user to take as a next step.\n\n - Normal (used as secondary) — use when multiple actions need to be\n   displayed.\n\n - Plain — use when multiple actions need to be available that are\n   less important for the user to take.\n\n - Destructive — use when you have a destructive action like delete or\n   remove, which you would like the user to pause and consider before\n   completing.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Dropdown.TYPE.DESTRUCTIVE",
                    "Dropdown.TYPE.NORMAL",
                    "Dropdown.TYPE.PLAIN",
                    "Dropdown.TYPE.PLAIN_NEUTRAL",
                    "Dropdown.TYPE.PRIMARY"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Dropdown title=\"Dropdown\">\n  <DropdownItem>Item 1</DropdownItem>\n  <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n  <DropdownItem>Item 3</DropdownItem>\n  <DropdownItem>Item 4</DropdownItem>\n</Dropdown>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Dropdown title=\"Dropdown\" label=\"Items\" info=\"Info value\">\n  <DropdownItem>Item 1</DropdownItem>\n  <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n  <DropdownItem>Item 3</DropdownItem>\n  <DropdownItem>Item 4</DropdownItem>\n</Dropdown>",
              "label": "With label and info"
            },
            {
              "sourceCode": "<Dropdown title=\"Dropdown\" label=\"Items\" labelInline>\n  <DropdownItem>Item 1</DropdownItem>\n  <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n  <DropdownItem>Item 3</DropdownItem>\n  <DropdownItem>Item 4</DropdownItem>\n</Dropdown>",
              "label": "With inline label"
            },
            {
              "sourceCode": "<Dropdown title=\"Dropdown\" description=\"Description value\">\n  <DropdownItem>Item 1</DropdownItem>\n  <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n  <DropdownItem>Item 3</DropdownItem>\n  <DropdownItem>Item 4</DropdownItem>\n</Dropdown>",
              "label": "With description"
            },
            {
              "sourceCode": "<Dropdown title=\"Dropdown\" invalid=\"Invalid message value\">\n  <DropdownItem>Item 1</DropdownItem>\n  <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n  <DropdownItem>Item 3</DropdownItem>\n  <DropdownItem>Item 4</DropdownItem>\n</Dropdown>",
              "label": "With Invalid message"
            },
            {
              "sourceCode": "function render() {\n  const items = new Array(10).fill().map((_, i) => i + 1);\n\n  return (\n    <Dropdown title=\"Dropdown\">\n      <DropdownItem>Item 1</DropdownItem>\n      <DropdownItem onClick={(evt) => console.log(evt)}>Item 2</DropdownItem>\n      <DropdownItem items={items}>\n        Item 3\n        {({ item, index }) => (\n          <DropdownItem key={index} onClick={(evt) => console.log(evt)}>\n            Item 3.{item}\n          </DropdownItem>\n        )}\n      </DropdownItem>\n      <DropdownItem>Item 4</DropdownItem>\n    </Dropdown>\n  );\n}",
              "label": "With sub items"
            },
            {
              "sourceCode": "<Dropdown title=\"Dropdown\" sectioned>\n  <DropdownSection title=\"Section 1\">\n    <DropdownItem>Item 1.1</DropdownItem>\n    <DropdownItem>Item 1.2</DropdownItem>\n  </DropdownSection>\n\n  <DropdownSection title=\"Section 2\">\n    <DropdownItem>Item 2.1</DropdownItem>\n    <DropdownItem>Item 2.2</DropdownItem>\n  </DropdownSection>\n</Dropdown>",
              "label": "Sections"
            },
            {
              "sourceCode": "function render() {\n  const items = new Array(10000).fill().map((_, i) => `Item ${i}`);\n\n  return (\n    <Dropdown title=\"Dropdown\" items={items}>\n      {({ item, index }) => (\n        <DropdownItem key={index} onClick={() => alert(item)}>\n          {item}\n        </DropdownItem>\n      )}\n    </Dropdown>\n  );\n}",
              "label": "Virtualized list"
            },
            {
              "sourceCode": "function render() {\n  const sections = new Array(30).fill().map((_, s) => ({\n    title: `Section ${s}`,\n    items: new Array(1000).fill().map((_, i) => `Item ${s}.${i}`),\n  }));\n\n  return (\n    <Dropdown title=\"Dropdown\" items={sections} sectioned>\n      {({ item: section, index }) => (\n        <DropdownSection\n          key={index}\n          title={section.title}\n          items={section.items}\n        >\n          {({ item, index }) => <DropdownItem>{item}</DropdownItem>}\n        </DropdownSection>\n      )}\n    </Dropdown>\n  );\n}",
              "label": "Virtualized sections and items list"
            },
            {
              "sourceCode": "class SearchDropdown extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      search: '',\n      items: [\n        { id: '1ed6', name: 'Melton Garcia' },\n        { id: 'f5a3', name: 'Finley Mendez' },\n        { id: '93bc', name: 'Coleen Salinas' },\n        { id: '7123', name: 'John Doe' },\n        { id: 'b62f', name: 'Ana Santos' },\n        { id: '8db4', name: 'Jane Smith' },\n        { id: '4c77', name: 'Colin Payne' },\n      ],\n    };\n  }\n\n  render() {\n    const { search, items } = this.state;\n\n    const filteredItems = items.filter(({ name }) =>\n      name.toLowerCase().includes(search.toLowerCase()),\n    );\n\n    return (\n      <Dropdown\n        title=\"Dropdown\"\n        items={filteredItems}\n        search={search}\n        onSearch={(evt) => this.setState({ search: evt.target.value })}\n      >\n        {({ item }) => <DropdownItem key={item.id}>{item.name}</DropdownItem>}\n      </Dropdown>\n    );\n  }\n}",
              "label": "Search prop and onSearch callback"
            }
          ]
        },
        {
          "description": "Child element of the `<Dropdown>` component.\n\n Supports click events through the `onClick` prop and the possibility to\n redirect to other pages through the `to` prop.\n\n Supports subitems through the `items` prop and by passing a render function\n to the `children` prop.",
          "name": "DropdownItem",
          "usage": "import { DropdownItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to display inside the item.\n\n It also accepts a render method as a last children when rendering\n nested lists. It requires to pass an array to the `items` prop.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|(node|function)[]",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "(node|function)[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "node|function",
                          "raw": "oneOfType",
                          "meta": {
                            "types": [
                              {
                                "meta": null
                              },
                              {
                                "meta": {
                                  "arguments": [],
                                  "returnValue": []
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "import { Dropdown, DropdownItem } from 'nr1';\n\nconst nestedItems = [\n  { id: '3.1', text: 'Item 3.1' },\n  { id: '3.2', text: 'Item 3.2' },\n  { id: '3.3', text: 'Item 3.3' },\n  { id: '3.4', text: 'Item 3.4' },\n];\n\nconst nestedDropdown = (\n  <Dropdown title=\"Nested Dropdown\">\n    <DropdownItem>Item 1</DropdownItem>\n    <DropdownItem>Item 2</DropdownItem>\n    <DropdownItem items={nestedItems}>\n      Item 3\n      {({ item }) => <DropdownItem key={item.id}>{item.text}</DropdownItem>}\n    </DropdownItem>\n    <DropdownItem>Item 4</DropdownItem>\n  </Dropdown>\n);",
                  "label": "Basic nested list"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the item is not available for interaction and its onClick\n callback won't fire.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Items to renders a sublist of the current item.\n\n This prop also requires to pass a function as a last `children` after\n the item's content to work.",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "array",
                "meta": null,
                "raw": "array"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the item.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Shows the option as selected.",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Section of `<Dropdown>` component.",
          "name": "DropdownSection",
          "usage": "import { DropdownSection } from 'nr1'",
          "typeDefs": [
            {
              "name": "Cursor",
              "properties": [
                {
                  "description": "First index of the range of items to load.",
                  "name": "startIndex",
                  "type": "number"
                },
                {
                  "description": "Last index of the range of items to load.",
                  "name": "stopIndex",
                  "type": "number"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "This component can render either declaratively, by directly passing a\n set of children or virtualized, by passing a render callback\n (function as children).\n\n The only items allowed inside (or returned by the render callback)\n are of type `<DropdownItem>`.\n\n The recommendation is to use the render callback when a large number\n of items is provided, since the item list will be virtualized by the\n component, thus increasing the performance.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|function",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "function",
                      "raw": "func",
                      "meta": {
                        "arguments": [],
                        "returnValue": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Items to render, in the shape of a list of objects. Usually, each\n item in the items array contains the required data to generate the\n corresponding `<DropdownItem>`.\n\n This prop is required when rendering items with the render callback\n (function as children).",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "array",
                "meta": null,
                "raw": "array"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when more items must be loaded. This happens when\n you're lazy loading the items and the items that are about to render\n cannot be found in the `items` array.\n\n This callback should be used to fetch/load the missing items from the\n backend or other sources.\n\n The returned Promise should be resolved once item data has finished\n loading. It will be used to determine when to refresh the list with\n the newly-loaded data. This callback may be called multiple times in\n reaction to a single scroll event.",
              "isRequired": false,
              "name": "onLoadMore",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "cursor",
                      "type": "Cursor",
                      "description": "Items to load."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Number of rows.\n\n By default it's equal to length of array passed in the items prop.\n\n You should specify the `rowCount` when you know the total number of\n items but you want to lazy load them while scrolling.",
              "isRequired": false,
              "name": "rowCount",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "",
              "description": "Section title.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Use empty states to inform and provide instructions when:\n\n - The user interacts for the first time with a product or a feature with no\n   data yet. e.g. After the creation of a new element.\n - Providing feedback to the user based on an action. e.g. Using the search or\n   filter bar elements.\n - Troubleshooting is required. e.g. Configuration or permissions.\n - Data is being loaded.\n\n The empty state component should always be wrapped in with a `<Card>`\n component.",
          "name": "EmptyState",
          "usage": "import { EmptyState } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "You may specify an action to provide the user with some actionable\n next steps to avoid leading them to a dead end.",
              "isRequired": false,
              "name": "action",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "ariaLabel",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the button.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "type",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "enum",
                        "raw": "oneOf",
                        "meta": {
                          "constants": [
                            "EmptyState.ACTION_TYPE.NORMAL",
                            "EmptyState.ACTION_TYPE.PRIMARY"
                          ]
                        }
                      },
                      "defaultValue": "EmptyState.TYPE.NORMAL"
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The information shown in the title and description can be\n complemented/extended with a link. This link should only be used to\n provide contextual information and not as an Action.",
              "isRequired": false,
              "name": "additionalInfoLink",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "ariaLabel",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the link.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Should be used to explain why the space is empty and how to populate\n it.\n\n Note: `title` and `description` props are optional, but at least one\n of them has to be provided.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the empty state to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the empty state to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "You may specify an icon which relates to the situation.",
              "isRequired": false,
              "name": "iconType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__AREA_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__BAR_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__BULLET_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__LINE_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__MARKDOWN",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__PIE_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__TABLE_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART",
                    "EmptyState.ICON_TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD",
                    "EmptyState.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT",
                    "EmptyState.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT",
                    "EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__ARROW_VERTICAL",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__EXPAND",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__GO_TO",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__MOVE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__RESIZE",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__RETURN_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__RETURN_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__SHRINK",
                    "EmptyState.ICON_TYPE.INTERFACE__ARROW__SORT",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_TOP",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__INFO__ANNOUNCEMENT",
                    "EmptyState.ICON_TYPE.INTERFACE__INFO__HELP",
                    "EmptyState.ICON_TYPE.INTERFACE__INFO__INFO",
                    "EmptyState.ICON_TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ADJUST",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ALERT",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_ON",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__ARCHIVE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__CENTER",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__CONFIGURE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__DOWNLOAD",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__DRAG",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__EDIT",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__EXPORT",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__FILTER",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__FOLLOW",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__GROUP",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__HIDE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__HIGHLIGHT",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__IMPORT",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__MORE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__PIN",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__PLAY",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__REARRANGE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__REDO",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__REFRESH",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SHARE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SHARE_LINK",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SHOW",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_BACK",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__TAG",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__TRASH",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__UNDO",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__UNPIN",
                    "EmptyState.ICON_TYPE.INTERFACE__OPERATIONS__UPLOAD",
                    "EmptyState.ICON_TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER",
                    "EmptyState.ICON_TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__ASTERISK",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__CHECKMARK",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__CLOSE",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__DOLLAR_SIGN",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__MINUS",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__NUMBER",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__PLUS",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__TIMES",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__TIMES__SIZE_8",
                    "EmptyState.ICON_TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__CLOSED",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__CRITICAL",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__DISABLED",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__ENABLED",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__HEALTHY",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__LOADING",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__LOCK",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__OPEN",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__PRIVATE",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__PUBLIC",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__UNAVAILABLE",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__UNLOCK",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__WARNING",
                    "EmptyState.ICON_TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__GRID_VIEW",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__LAYER_LIST",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__LIST_VIEW",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__SIXTH_SENSE",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK",
                    "EmptyState.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT",
                    "EmptyState.ICON_TYPE.LOCATION__LOCATION__HOME",
                    "EmptyState.ICON_TYPE.LOCATION__LOCATION__MAP",
                    "EmptyState.ICON_TYPE.LOCATION__LOCATION__PIN",
                    "EmptyState.ICON_TYPE.LOCATION__LOCATION__WORLD",
                    "EmptyState.ICON_TYPE.PROFILES__EVENTS__COMMENT",
                    "EmptyState.ICON_TYPE.PROFILES__EVENTS__COMMENT__A_EDIT",
                    "EmptyState.ICON_TYPE.PROFILES__EVENTS__FAVORITE",
                    "EmptyState.ICON_TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD",
                    "EmptyState.ICON_TYPE.PROFILES__EVENTS__LIKE",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__ORGANIZATION",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_ADD",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__TEAM",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__TEAM__A_ADD",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__TEAM__A_EDIT",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__TEAM__A_REMOVE",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__USER",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__USER__A_ADD",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__USER__A_EDIT",
                    "EmptyState.ICON_TYPE.PROFILES__USERS__USER__A_REMOVE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Title of the empty state. It informs and gives a concise explanation\n of why the space is empty.\n\n Note: `title` and `description` props are optional, but at least one\n of them has to be provided.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EmptyState.TYPE.NORMAL",
              "description": "Type can be:\n\n - Normal (default) — use it when it's the first time the user\n   interacts with a product/feature with no data yet or to provide\n   feedback after a user action.\n\n - Error — use it to show system issues or when a configuration is\n   needed.\n\n - Loading — use it to indicate that data is being fetched or loaded.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EmptyState.TYPE.ERROR",
                    "EmptyState.TYPE.LOADING",
                    "EmptyState.TYPE.NORMAL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<EmptyState\n  iconType={EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES}\n  title=\"Add the entities you want to group\"\n  description=\"Fill this workload with any entities from front-end to back-end across your stack.\"\n  additionalInfoLink={{\n    label: 'See our docs',\n    onClick: console.log,\n    to: 'https://docs.newrelic.com/',\n  }}\n  action={{\n    label: 'Add entities',\n    onClick: console.log,\n  }}\n/>",
              "label": "Default"
            },
            {
              "sourceCode": "<EmptyState\n  type={EmptyState.TYPE.ERROR}\n  iconType={\n    EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR\n  }\n  title=\"We couldn’t reach the database\"\n  description=\"Refresh the page to try again. If this keeps happening, visit our support center.\"\n  additionalInfoLink={{\n    label: 'Visit support center',\n    onClick: console.log,\n    to: 'https://docs.newrelic.com/',\n  }}\n  action={{ label: 'Refresh the page', onClick: console.log }}\n/>",
              "label": "Error"
            },
            {
              "sourceCode": "<EmptyState\n  title=\"Hold tight—we’re fetching your data\"\n  type={EmptyState.TYPE.LOADING}\n/>",
              "label": "Loading"
            },
            {
              "sourceCode": "<Card style={{ height: 400 }}>\n  <EmptyState\n    fullHeight\n    fullWidth\n    iconType={\n      EmptyState.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES\n    }\n    title=\"Add the entities you want to group\"\n    description=\"Fill this workload with any entities from front-end to back-end across your stack.\"\n    additionalInfoLink={{\n      label: 'See our docs',\n      onClick: console.log,\n      to: 'https://docs.newrelic.com/',\n    }}\n    action={{\n      label: 'Add entities',\n      onClick: console.log,\n    }}\n  />\n</Card>",
              "label": "Center in container"
            }
          ]
        },
        {
          "description": "Query entities by entityDomain and entityType.",
          "name": "EntitiesByDomainTypeQuery",
          "usage": "import { EntitiesByDomainTypeQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Domain of the entities you want to query.",
              "isRequired": true,
              "name": "entityDomain",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL fragment document parsed into an AST by `graphql-tag`.\n\n The Query components return the most commonly used fields available on an\n entity. You can use this prop when you want to request additional fields\n for the entities returned by your query.\n\n The fragment should be named `EntityFragmentExtension` and apply to the\n `EntityOutline` type.",
              "isRequired": false,
              "name": "entityFragmentExtension",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const entityFragmentExtension = ngql`\n  fragment EntityFragmentExtension on EntityOutline {\n    indexedAt\n    guid\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Type of the entities you want to query.",
              "isRequired": true,
              "name": "entityType",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntitiesByDomainTypeQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Filters used to narrow down the entities.\n\n This is an array of filters, and there are 3 possible filters:\n\n - SearchQueryFilter:\n   `Object<type: string = \"searchQuery\", value: string>`\n\n - EntityTypeFilter:\n   `Object<type: string = \"entityType\", Object<domain: string, type: string>>`\n\n - TagFilter:\n   `Object<type: string = \"tag\", Object<key: string, value: string>>`",
              "isRequired": false,
              "name": "filters",
              "type": {
                "name": "string|(shape|shape|shape)[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "(shape|shape|shape)[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "shape|shape|shape",
                          "raw": "oneOfType",
                          "meta": {
                            "types": [
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const filters = [\n  {\n    type: 'searchQuery',\n    value: 'foo',\n  },\n  {\n    type: 'entityType',\n    value: { domain: 'APM', type: 'APPLICATION' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'environment', value: 'production' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'team', value: 'bar' },\n  },\n];",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": null,
              "isRequired": false,
              "name": "includeSummaryMetrics",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the returned entities include their tags.",
              "isRequired": false,
              "name": "includeTags",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "500",
              "description": "Pagination, number of entities to fetch for on each page.",
              "isRequired": false,
              "name": "limit",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Array of criteras used to sort the entity search results.",
              "isRequired": false,
              "name": "sortBy",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "EntitiesByDomainTypeQuery.SORT_TYPE.ALERT_SEVERITY",
                        "EntitiesByDomainTypeQuery.SORT_TYPE.DOMAIN",
                        "EntitiesByDomainTypeQuery.SORT_TYPE.MOST_RELEVANT",
                        "EntitiesByDomainTypeQuery.SORT_TYPE.NAME",
                        "EntitiesByDomainTypeQuery.SORT_TYPE.REPORTING",
                        "EntitiesByDomainTypeQuery.SORT_TYPE.TYPE"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntitiesByDomainTypeQuery as a Promise instead of as\n a React component.",
              "name": "EntitiesByDomainTypeQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntitiesByDomainTypeQuery` prop is a valid option except\n        `children` and `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntitiesByDomainTypeQuery entityDomain=\"APM\" entityType=\"APPLICATION\">\n  {({ error, data, fetchMore }) => {\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List\n        items={data.entities}\n        rowCount={data.count}\n        rowHeight={20}\n        onLoadMore={fetchMore}\n      >\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntitiesByDomainTypeQuery>",
              "label": "Declarative query"
            },
            {
              "sourceCode": "<EntitiesByDomainTypeQuery\n  entityDomain=\"INFRA\"\n  entityType=\"HOST\"\n  sortBy={[EntitiesByDomainTypeQuery.SORT_TYPE.ALERT_SEVERITY]}\n>\n  {({ data, error, fetchMore }) => {\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List\n        items={data.entities}\n        rowCount={data.count}\n        rowHeight={20}\n        onLoadMore={fetchMore}\n      >\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntitiesByDomainTypeQuery>",
              "label": "Fetch with sorting criteria"
            },
            {
              "sourceCode": "EntitiesByDomainTypeQuery.query({\n  entityDomain: 'APM',\n  entityType: 'APPLICATION',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            },
            {
              "sourceCode": "const firstPage = await EntitiesByDomainTypeQuery.query({\n  entityDomain: 'APM',\n  entityType: 'APPLICATION',\n});\n\nconsole.log('First page data', firstPage.data);\n\nconst cursor = firstPage.data.nextCursor;\nconst secondPage = await EntitiesByDomainTypeQuery.query({\n  cursor,\n  entityDomain: 'APM',\n  entityType: 'APPLICATION',\n});\n\nconsole.log('Second page data', secondPage.data);\n\n// NOTE: To fetch multiple page results consecutively,\n// use EntitiesByDomainTypeQuery component's fetchMore approach.",
              "label": "Fetch more results using imperative query"
            }
          ]
        },
        {
          "description": "Query a list of entities by their GUIDs.\n\n You can fetch a maximum of 25 entities in one query.",
          "name": "EntitiesByGuidsQuery",
          "usage": "import { EntitiesByGuidsQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL fragment document parsed into an AST by `graphql-tag`.\n\n The Query components return the most commonly used fields available on an\n entity. You can use this prop when you want to request additional fields\n for the entities returned by your query.\n\n The fragment should be named `EntityFragmentExtension` and apply to the\n `EntityOutline` type.",
              "isRequired": false,
              "name": "entityFragmentExtension",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const entityFragmentExtension = ngql`\n  fragment EntityFragmentExtension on EntityOutline {\n    indexedAt\n    guid\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "GUID of the entities to query.",
              "isRequired": true,
              "name": "entityGuids",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntitiesByGuidsQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": null,
              "isRequired": false,
              "name": "includeSummaryMetrics",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "true",
              "description": "If `true`, the returned entities include their tags.",
              "isRequired": false,
              "name": "includeTags",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Array of criteras used to sort the entity search results.",
              "isRequired": false,
              "name": "sortBy",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "EntitiesByGuidsQuery.SORT_TYPE.ALERT_SEVERITY",
                        "EntitiesByGuidsQuery.SORT_TYPE.DOMAIN",
                        "EntitiesByGuidsQuery.SORT_TYPE.MOST_RELEVANT",
                        "EntitiesByGuidsQuery.SORT_TYPE.NAME",
                        "EntitiesByGuidsQuery.SORT_TYPE.REPORTING",
                        "EntitiesByGuidsQuery.SORT_TYPE.TYPE"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntitiesByGuidsQuery as a Promise instead of as a\n React component.",
              "name": "EntitiesByGuidsQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntitiesByGuidsQuery` prop is a valid option except `children`\n        and `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntitiesByGuidsQuery\n  entityGuids={[\n    'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx',\n    'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzUz',\n  ]}\n>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List items={data.entities} rowHeight={20}>\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntitiesByGuidsQuery>",
              "label": "Declarative Query"
            },
            {
              "sourceCode": "EntitiesByGuidsQuery.query({\n  entityGuids: [\n    'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx',\n    'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzUz',\n  ],\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Query entities by their name.",
          "name": "EntitiesByNameQuery",
          "usage": "import { EntitiesByNameQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL fragment document parsed into an AST by `graphql-tag`.\n\n The Query components return the most commonly used fields available on an\n entity. You can use this prop when you want to request additional fields\n for the entities returned by your query.\n\n The fragment should be named `EntityFragmentExtension` and apply to the\n `EntityOutline` type.",
              "isRequired": false,
              "name": "entityFragmentExtension",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const entityFragmentExtension = ngql`\n  fragment EntityFragmentExtension on EntityOutline {\n    indexedAt\n    guid\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "EntitiesByNameQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntitiesByNameQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntitiesByNameQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntitiesByNameQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntitiesByNameQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntitiesByNameQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Filters used to narrow down the entities.\n\n This is an array of filters, and there are 3 possible filters:\n\n - SearchQueryFilter:\n   `Object<type: string = \"searchQuery\", value: string>`\n\n - EntityTypeFilter:\n   `Object<type: string = \"entityType\", Object<domain: string, type: string>>`\n\n - TagFilter:\n   `Object<type: string = \"tag\", Object<key: string, value: string>>`",
              "isRequired": false,
              "name": "filters",
              "type": {
                "name": "string|(shape|shape|shape)[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "(shape|shape|shape)[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "shape|shape|shape",
                          "raw": "oneOfType",
                          "meta": {
                            "types": [
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const filters = [\n  {\n    type: 'searchQuery',\n    value: 'foo',\n  },\n  {\n    type: 'entityType',\n    value: { domain: 'APM', type: 'APPLICATION' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'environment', value: 'production' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'team', value: 'bar' },\n  },\n];",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": null,
              "isRequired": false,
              "name": "includeSummaryMetrics",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the returned entities include their tags.",
              "isRequired": false,
              "name": "includeTags",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "500",
              "description": "Pagination, number of entities to fetch for on each page.",
              "isRequired": false,
              "name": "limit",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Name or partial name of the entities to query.",
              "isRequired": true,
              "name": "name",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Array of criteras used to sort the entity search results.",
              "isRequired": false,
              "name": "sortBy",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "EntitiesByNameQuery.SORT_TYPE.ALERT_SEVERITY",
                        "EntitiesByNameQuery.SORT_TYPE.DOMAIN",
                        "EntitiesByNameQuery.SORT_TYPE.MOST_RELEVANT",
                        "EntitiesByNameQuery.SORT_TYPE.NAME",
                        "EntitiesByNameQuery.SORT_TYPE.REPORTING",
                        "EntitiesByNameQuery.SORT_TYPE.TYPE"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntitiesByNameQuery as a Promise instead of as a\n React component.",
              "name": "EntitiesByNameQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntitiesByNameQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntitiesByNameQuery name=\"abc1-prod-metrics\">\n  {({ loading, error, data, fetchMore }) => {\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List\n        items={data.entities}\n        rowCount={data.count}\n        rowHeight={20}\n        onLoadMore={fetchMore}\n      >\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntitiesByNameQuery>",
              "label": "Declarative query"
            },
            {
              "sourceCode": "EntitiesByNameQuery.query({\n  name: 'abc1-prod-metrics',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            },
            {
              "sourceCode": "const name = 'abc1-prod-metrics';\nconst firstPage = await EntitiesByNameQuery.query({ name });\n\nconsole.log('First page data', firstPage.data);\n\nconst cursor = firstPage.data.nextCursor;\nconst secondPage = await EntitiesByNameQuery.query({ cursor, name });\n\nconsole.log('Second page data', secondPage.data);\n\n// NOTE: To fetch multiple page results consecutively, use EntitiesByNameQuery\n// component's fetchMore approach.",
              "label": "Fetch more results using imperative query"
            }
          ]
        },
        {
          "description": "Query a list of entities by their GUIDs.\n\n You can fetch a maximum of 25 entities in one query.",
          "name": "EntityByGuidQuery",
          "usage": "import { EntityByGuidQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL fragment document parsed into an AST by `graphql-tag`.\n\n The Query components return the most commonly used fields available on an\n entity. You can use this prop when you want to request additional fields\n for the entities returned by your query.\n\n The fragment should be named `EntityFragmentExtension` and apply to the\n `EntityOutline` type.",
              "isRequired": false,
              "name": "entityFragmentExtension",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const entityFragmentExtension = ngql`\n  fragment EntityFragmentExtension on EntityOutline {\n    indexedAt\n    guid\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "GUID of the entity to query.",
              "isRequired": true,
              "name": "entityGuid",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntityByGuidQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntityByGuidQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntityByGuidQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntityByGuidQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntityByGuidQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntityByGuidQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": null,
              "isRequired": false,
              "name": "includeSummaryMetrics",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "true",
              "description": "If `true`, the returned entities include their tags.",
              "isRequired": false,
              "name": "includeTags",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntityByGuidQuery as a Promise instead of as a React\n component.",
              "name": "EntityByGuidQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntityByGuidQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntityByGuidQuery entityGuid={'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx'}>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List items={data.entities} rowHeight={20}>\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntityByGuidQuery>",
              "label": "Declarative Query"
            },
            {
              "sourceCode": "EntityByGuidQuery.query({\n  entityGuid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Query the number of entities available for each entityDomain and\n entityType.",
          "name": "EntityCountQuery",
          "usage": "import { EntityCountQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntityCountQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntityCountQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntityCountQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntityCountQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntityCountQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntityCountQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Filters used to narrow down the entities.\n\n This is an array of filters, and there are 3 possible filters:\n\n - SearchQueryFilter:\n   `Object<type: string = \"searchQuery\", value: string>`\n\n - EntityTypeFilter:\n   `Object<type: string = \"entityType\", Object<domain: string, type: string>>`\n\n - TagFilter:\n   `Object<type: string = \"tag\", Object<key: string, value: string>>`",
              "isRequired": false,
              "name": "filters",
              "type": {
                "name": "string|(shape|shape|shape)[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "(shape|shape|shape)[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "shape|shape|shape",
                          "raw": "oneOfType",
                          "meta": {
                            "types": [
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const filters = [\n  {\n    type: 'searchQuery',\n    value: 'foo',\n  },\n  {\n    type: 'entityType',\n    value: { domain: 'APM', type: 'APPLICATION' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'environment', value: 'production' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'team', value: 'bar' },\n  },\n];",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntityCountQuery as a Promise instead of as a React\n component.",
              "name": "EntityCountQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntityCountQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntityCountQuery>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List items={data.types} rowCount={data.types.length} rowHeight={20}>\n        {({ item }) => (\n          <ListItem key={item.name}>\n            {item.domain}|{item.type}: {item.count}\n          </ListItem>\n        )}\n      </List>\n    );\n  }}\n</EntityCountQuery>",
              "label": "Declarative query"
            },
            {
              "sourceCode": "EntityCountQuery.query().then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Search for entities.",
          "name": "EntitySearchQuery",
          "usage": "import { EntitySearchQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Domain of the entities you want to query.",
              "isRequired": false,
              "name": "entityDomain",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL fragment document parsed into an AST by `graphql-tag`.\n\n The Query components return the most commonly used fields available on an\n entity. You can use this prop when you want to request additional fields\n for the entities returned by your query.\n\n The fragment should be named `EntityFragmentExtension` and apply to the\n `EntityOutline` type.",
              "isRequired": false,
              "name": "entityFragmentExtension",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const entityFragmentExtension = ngql`\n  fragment EntityFragmentExtension on EntityOutline {\n    indexedAt\n    guid\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "GUID of the entities to query.",
              "isRequired": false,
              "name": "entityGuids",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Type of the entities you want to query.",
              "isRequired": false,
              "name": "entityType",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntitySearchQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntitySearchQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntitySearchQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntitySearchQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntitySearchQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntitySearchQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Filters used to narrow down the entities.\n\n This is an array of filters, and there are 3 possible filters:\n\n - SearchQueryFilter:\n   `Object<type: string = \"searchQuery\", value: string>`\n\n - EntityTypeFilter:\n   `Object<type: string = \"entityType\", Object<domain: string, type: string>>`\n\n - TagFilter:\n   `Object<type: string = \"tag\", Object<key: string, value: string>>`",
              "isRequired": false,
              "name": "filters",
              "type": {
                "name": "string|(shape|shape|shape)[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "(shape|shape|shape)[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "shape|shape|shape",
                          "raw": "oneOfType",
                          "meta": {
                            "types": [
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              },
                              {
                                "meta": {}
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const filters = [\n  {\n    type: 'searchQuery',\n    value: 'foo',\n  },\n  {\n    type: 'entityType',\n    value: { domain: 'APM', type: 'APPLICATION' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'environment', value: 'production' },\n  },\n  {\n    type: 'tag',\n    value: { key: 'team', value: 'bar' },\n  },\n];",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the query response includes the total count of entities\n for each domain and type.",
              "isRequired": false,
              "name": "includeCount",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "true",
              "description": "If `true`, the query response includes entities.",
              "isRequired": false,
              "name": "includeResults",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": null,
              "isRequired": false,
              "name": "includeSummaryMetrics",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the returned entities include their tags.",
              "isRequired": false,
              "name": "includeTags",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "500",
              "description": "Pagination, number of entities to fetch for on each page.",
              "isRequired": false,
              "name": "limit",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Name or partial name of the entities to query.",
              "isRequired": false,
              "name": "name",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Array of criteras used to sort the entity search results.",
              "isRequired": false,
              "name": "sortBy",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "EntitySearchQuery.SORT_TYPE.ALERT_SEVERITY",
                        "EntitySearchQuery.SORT_TYPE.DOMAIN",
                        "EntitySearchQuery.SORT_TYPE.MOST_RELEVANT",
                        "EntitySearchQuery.SORT_TYPE.NAME",
                        "EntitySearchQuery.SORT_TYPE.REPORTING",
                        "EntitySearchQuery.SORT_TYPE.TYPE"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntitySearchQuery as a Promise instead of as a React\n component.",
              "name": "EntitySearchQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `EntitySearchQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "function render() {\n  const filters = [\n    {\n      type: EntitySearchQuery.FILTER_TYPE.TAG,\n      value: { key: 'environment', value: 'production' },\n    },\n  ];\n\n  return (\n    <EntitySearchQuery filters={filters}>\n      {({ loading, error, data, fetchMore }) => {\n        if (loading) {\n          return <Spinner />;\n        }\n\n        if (error) {\n          return 'Error!';\n        }\n\n        return (\n          <List\n            items={data.entities}\n            rowCount={data.count}\n            rowHeight={20}\n            onLoadMore={fetchMore}\n          >\n            {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n          </List>\n        );\n      }}\n    </EntitySearchQuery>\n  );\n}",
              "label": "Declarative query"
            },
            {
              "sourceCode": "<EntitySearchQuery\n  entityDomain=\"APM\"\n  sortBy={[EntitySearchQuery.SORT_TYPE.ALERT_SEVERITY]}\n>\n  {({ data, error, fetchMore }) => {\n    if (error) {\n      return 'Error!';\n    }\n\n    return (\n      <List\n        items={data.entities}\n        rowCount={data.count}\n        rowHeight={20}\n        onLoadMore={fetchMore}\n      >\n        {({ item }) => <ListItem key={item.guid}>{item.name}</ListItem>}\n      </List>\n    );\n  }}\n</EntitySearchQuery>",
              "label": "Fetch with sorting criteria"
            },
            {
              "sourceCode": "EntitySearchQuery.query({\n  filters: [\n    {\n      type: EntitySearchQuery.FILTER_TYPE.TAG,\n      value: { key: 'environment', value: 'production' },\n    },\n  ],\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            },
            {
              "sourceCode": "const filters = [\n  {\n    type: EntitySearchQuery.FILTER_TYPE.TAG,\n    value: { key: 'environment', value: 'production' },\n  },\n];\n\nconst firstPage = await EntitySearchQuery.query({ filters });\n\nconsole.log('First page data', firstPage.data);\n\nconst cursor = firstPage.data.nextCursor;\nconst secondPage = await EntitySearchQuery.query({ cursor, filters });\n\nconsole.log('Second page data', secondPage.data);\n\n// NOTE: To fetch multiple page results consecutively, use EntitySearchQuery\n// component's fetchMore approach.",
              "label": "Fetch more results using imperative query"
            }
          ]
        },
        {
          "description": "Save, delete, or update an entity scoped document in NerdStorage. In\n order to successfully perform this operation, the user must have the\n right permissions.",
          "name": "EntityStorageMutation",
          "usage": "import { EntityStorageMutation } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "MutationResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your mutation.",
                  "name": "data",
                  "type": "Object"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Type of action to perform.",
              "isRequired": true,
              "name": "actionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntityStorageMutation.ACTION_TYPE.DELETE_COLLECTION",
                    "EntityStorageMutation.ACTION_TYPE.DELETE_DOCUMENT",
                    "EntityStorageMutation.ACTION_TYPE.WRITE_DOCUMENT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Render prop function as children.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "mutate",
                      "type": "function",
                      "description": "Function to trigger a mutation from your UI."
                    },
                    {
                      "name": "mutationResult",
                      "type": "MutationResult",
                      "description": "Results of the\n        mutation."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": true,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NerdStorage document. Documents are restricted to 64 kB in size when\n JSON-stringified.",
              "isRequired": false,
              "name": "document",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GUID of the entity in which the collection is operated.",
              "isRequired": true,
              "name": "entityGuid",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Establishes whether the data needs to be scoped by actor or not; that is,\n whether the data read or saved is common to everybody having access to\n the object, or it is exclusive of the user.\n\n An object (entity or account) can have both \"global\" data and \"scoped\"\n data, and the data read will depend on the status of the flag.",
              "isRequired": false,
              "name": "scopeByActor",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use EntityStorageMutation as a Promise instead of as a\n React component.",
              "name": "EntityStorageMutation.mutate",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the mutation options. Any\n        `EntityStorageMutation` prop is a valid option except `children`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "EntityStorageMutation.mutate({\n  entityGuid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz',\n  actionType: EntityStorageMutation.ACTION_TYPE.WRITE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n  document: {\n    name: 'John',\n    surname: 'Doe',\n  },\n});",
              "label": "Write document"
            },
            {
              "sourceCode": "EntityStorageMutation.mutate({\n  entityGuid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz',\n  actionType: EntityStorageMutation.ACTION_TYPE.DELETE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n});",
              "label": "Delete document"
            },
            {
              "sourceCode": "EntityStorageMutation.mutate({\n  entityGuid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz',\n  actionType: EntityStorageMutation.ACTION_TYPE.DELETE_COLLECTION,\n  collection: 'myCollection',\n});",
              "label": "Delete collection"
            }
          ]
        },
        {
          "description": "Query NerdStorage for entity scoped data.\n\n Retrieve an entire collection or a single document.",
          "name": "EntityStorageQuery",
          "usage": "import { EntityStorageQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": true,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GUID of the entity in which the collection is operated.",
              "isRequired": true,
              "name": "entityGuid",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "EntityStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "EntityStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "EntityStorageQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "EntityStorageQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "EntityStorageQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "EntityStorageQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Establishes whether the data needs to be scoped by actor or not; that is,\n whether the data read or saved is common to everybody having access to\n the object, or it is exclusive of the user.\n\n An object (entity or account) can have both \"global\" data and \"scoped\"\n data, and the data read will depend on the status of the flag.",
              "isRequired": false,
              "name": "scopeByActor",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "A static method to use EntityStorageQuery as a Promise instead of as a\n React component.",
              "name": "EntityStorageQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "An object containing the query options. Any\n        `EntityStorageQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<EntityStorageQuery\n  entityGuid=\"MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz\"\n  collection=\"foo\"\n>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</EntityStorageQuery>",
              "label": "Query collection"
            },
            {
              "sourceCode": "<EntityStorageQuery\n  entityGuid=\"MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz\"\n  collection=\"foo\"\n  documentId=\"bar\"\n>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</EntityStorageQuery>",
              "label": "Query document"
            },
            {
              "sourceCode": "EntityStorageQuery.query({\n  entityGuid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0Mzcz',\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Renders a row table cell showing the title of a particular entity. This cell\n takes the entity object as its children, which is in turn compatible with the\n NerdGraph entity object (needing, at the very least, the `name` and\n `reporting` fields). If alertable, you should also query for `alertSeverity`.",
          "name": "EntityTitleTableRowCell",
          "usage": "import { EntityTitleTableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Additional information along the main data in the cell.\n\n **Note:** At the moment this content becomes visible only when the\n `multivalue` prop is passed to the parent `Table` component.",
              "isRequired": false,
              "name": "additionalValue",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the cell.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Entity object, that requires (at least), the `name` and `reporting`\n fields. This object matches with the user structure obtained from\n NerdGraph.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "name",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "alertSeverity",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "reporting",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "boolean",
                        "raw": "bool",
                        "meta": null
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      name: 'Login service',\n      guid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx',\n      alertSeverity: 'CRITICAL',\n      reporting: true,\n    },\n  ];\n\n  return (\n    <Table items={items}>\n      <TableHeader>\n        <TableHeaderCell>Entity</TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <EntityTitleTableRowCell value={item} />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      name: 'Login service',\n      guid: 'MTIzNDU2fEZPT3xCQVJ8OTg3NjU0MzIx',\n      alertSeverity: 'CRITICAL',\n      reporting: true,\n    },\n  ];\n\n  return (\n    <Table items={items} multivalue>\n      <TableHeader>\n        <TableHeaderCell>Entity</TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <EntityTitleTableRowCell value={item} additionalValue={item.guid} />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "With additional value"
            }
          ]
        },
        {
          "description": "Renders a row table cell showing the favorite status of a particular entity.\n The favorite status can be controlled through the `checked` property and the\n status changes can be listened through the `onChange` property.",
          "name": "FavoriteTableRowCell",
          "usage": "import { FavoriteTableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "If `true`, indicates that the user has marked the entity as favorite.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the favorite status changes. The new favorite\n status will be passed as second parameter.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "checked",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      name: 'Login service',\n      alertSeverity: 'CRITICAL',\n      reporting: true,\n      favorite: true,\n    },\n    {\n      name: 'Service Gateway',\n      alertSeverity: 'NOT_ALERTING',\n      reporting: true,\n      favorite: false,\n    },\n  ];\n  return (\n    <Table items={items}>\n      <TableHeader>\n        <TableHeaderCell width=\"56px\" />\n        <TableHeaderCell>Entity</TableHeaderCell>\n      </TableHeader>\n      {({ item }) => (\n        <TableRow>\n          <FavoriteTableRowCell checked={item.favorite} />\n          <EntityTitleTableRowCell value={item} />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Example 1"
            }
          ]
        },
        {
          "description": "`<Form>` is a container which displays a set of related user input fields in\n a structured way. It can contain one or more of the following form\n components:\n\n - <TextField>\n - <MultilineTextField>\n - <Checkbox>\n - <Radio>\n - <RadioGroup>\n - <Switch>\n - <Select>\n - <Dropdown>\n\n The component supports different type of layouts which can be specified\n through the `layoutType` prop.",
          "name": "Form",
          "usage": "import { Form } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Form fields to display.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Form.LAYOUT_TYPE.NORMAL",
              "description": "Layout of the form:\n\n - Form.LAYOUT_TYPE.NORMAL: The form fields will be aligned vertically\n - Form.LAYOUT_TYPE.SPLIT: Except for Radio and Checkbox components,\n   the form field labels will be placed on the left side and the input\n   on the right.\n\n The `SPLIT` layout supports various sizes which can be specified\n through the `splitSizeType` prop.",
              "isRequired": false,
              "name": "layoutType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Form.LAYOUT_TYPE.NORMAL",
                    "Form.LAYOUT_TYPE.SPLIT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Form.SPACING_TYPE.EXTRA_LARGE",
                        "Form.SPACING_TYPE.LARGE",
                        "Form.SPACING_TYPE.MEDIUM",
                        "Form.SPACING_TYPE.NONE",
                        "Form.SPACING_TYPE.OMIT",
                        "Form.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Form.SPLIT_SIZE_TYPE.MEDIUM",
              "description": "Specifies the size of the columns when using the split layout.",
              "isRequired": false,
              "name": "splitSizeType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Form.SPLIT_SIZE_TYPE.LARGE",
                    "Form.SPLIT_SIZE_TYPE.MEDIUM",
                    "Form.SPLIT_SIZE_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Form>\n  <TextField placeholder=\"AAA Production\" label=\"Name\" />\n  <Select label=\"Select account\">\n    <SelectItem>Option 1</SelectItem>\n    <SelectItem>Option 2</SelectItem>\n  </Select>\n  <TextField\n    defaultValue=\"help-production-db\"\n    label=\"Help channel\"\n    invalid=\"Please enter a valid slack channel\"\n  />\n  <MultilineTextField\n    label=\"Description\"\n    info=\"Info tooltip\"\n    placeholder=\"Placeholder text\"\n  />\n  <Button\n    type={Button.TYPE.PRIMARY}\n    sizeType={Button.SIZE_TYPE.SMALL}\n    spacingType={[\n      HeadingText.SPACING_TYPE.EXTRA_LARGE,\n      HeadingText.SPACING_TYPE.NONE,\n    ]}\n  >\n    Create dashboard\n  </Button>\n</Form>",
              "label": "Default layout"
            },
            {
              "sourceCode": "<Form layoutType={Form.LAYOUT_TYPE.SPLIT}>\n  <TextField placeholder=\"AAA Production\" label=\"Name\" />\n  <Select label=\"Select account\">\n    <SelectItem>Option 1</SelectItem>\n    <SelectItem>Option 2</SelectItem>\n  </Select>\n  <TextField\n    defaultValue=\"help-production-db\"\n    label=\"Help channel\"\n    invalid=\"Please enter a valid slack channel\"\n  />\n  <MultilineTextField\n    label=\"Description\"\n    info=\"Info tooltip\"\n    placeholder=\"Placeholder text\"\n  />\n  <Button\n    type={Button.TYPE.PRIMARY}\n    sizeType={Button.SIZE_TYPE.SMALL}\n    spacingType={[\n      HeadingText.SPACING_TYPE.EXTRA_LARGE,\n      HeadingText.SPACING_TYPE.NONE,\n    ]}\n  >\n    Create dashboard\n  </Button>\n</Form>",
              "label": "Split layout"
            },
            {
              "sourceCode": "<Form\n  layoutType={Form.LAYOUT_TYPE.SPLIT}\n  splitSizeType={Form.SPLIT_SIZE_TYPE.LARGE}\n>\n  <TextField placeholder=\"AAA Production\" label=\"Name\" />\n  <Select label=\"Select account\">\n    <SelectItem>Option 1</SelectItem>\n    <SelectItem>Option 2</SelectItem>\n  </Select>\n  <TextField\n    defaultValue=\"help-production-db\"\n    label=\"Help channel\"\n    invalid=\"Please enter a valid slack channel\"\n  />\n  <MultilineTextField\n    label=\"Description\"\n    info=\"Info tooltip\"\n    placeholder=\"Placeholder text\"\n  />\n  <Button\n    type={Button.TYPE.PRIMARY}\n    sizeType={Button.SIZE_TYPE.SMALL}\n    spacingType={[\n      HeadingText.SPACING_TYPE.EXTRA_LARGE,\n      HeadingText.SPACING_TYPE.NONE,\n    ]}\n  >\n    Create dashboard\n  </Button>\n</Form>",
              "label": "Split layout with size type"
            },
            {
              "sourceCode": "<Form>\n  <TextField required placeholder=\"AAA Production\" label=\"Name\" />\n  <TextField defaultValue=\"help-production-db\" label=\"Help channel\" />\n  <MultilineTextField\n    label=\"Description\"\n    info=\"Info tooltip\"\n    placeholder=\"Placeholder text\"\n  />\n  <Button\n    type={Button.TYPE.PRIMARY}\n    sizeType={Button.SIZE_TYPE.SMALL}\n    spacingType={[\n      HeadingText.SPACING_TYPE.EXTRA_LARGE,\n      HeadingText.SPACING_TYPE.NONE,\n    ]}\n  >\n    Create dashboard\n  </Button>\n</Form>",
              "label": "Form with required fields"
            }
          ]
        },
        {
          "description": "Grid is a 2-dimensional layout system, meaning that it can handle both\n columns and rows, that helps you design grid-based user interfaces, unlike\n `<Stack>` which is largely a 1-dimensional system.",
          "name": "Grid",
          "usage": "import { Grid } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Grid items to display.\n\n Up to 12 items are allowed.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the grid to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the grid to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Grid.GAP_TYPE.MEDIUM",
              "description": "Size of the gap between columns and rows.",
              "isRequired": false,
              "name": "gapType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Grid.GAP_TYPE.MEDIUM",
                    "Grid.GAP_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Grid.SPACING_TYPE.EXTRA_LARGE",
                        "Grid.SPACING_TYPE.LARGE",
                        "Grid.SPACING_TYPE.MEDIUM",
                        "Grid.SPACING_TYPE.NONE",
                        "Grid.SPACING_TYPE.OMIT",
                        "Grid.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<>\n  <Grid>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={1}>\n      <div className=\"nr1-RedBox\">1</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={2}>\n      <div className=\"nr1-RedBox\">2</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={6}>\n      <div className=\"nr1-RedBox\">6</div>\n    </GridItem>\n    <GridItem columnSpan={6}>\n      <div className=\"nr1-RedBox\">6</div>\n    </GridItem>\n    <GridItem columnSpan={12}>\n      <div className=\"nr1-RedBox\">12</div>\n    </GridItem>\n  </Grid>\n</>",
              "label": "Basic"
            },
            {
              "sourceCode": "<>\n  <Grid gapType={Grid.GAP_TYPE.MEDIUM}>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n  </Grid>\n</>",
              "label": "Medium gap type"
            },
            {
              "sourceCode": "<>\n  <Grid gapType={Grid.GAP_TYPE.SMALL}>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={3}>\n      <div className=\"nr1-RedBox\">3</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n  </Grid>\n</>",
              "label": "Small gap type"
            },
            {
              "sourceCode": "<Grid>\n  <GridItem columnStart={1} columnEnd={6}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={2} columnEnd={7}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={3} columnEnd={8}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={4} columnEnd={9}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={5} columnEnd={10}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={6} columnEnd={11}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n  <GridItem columnStart={7} columnEnd={12}>\n    <div className=\"nr1-RedBox\">6</div>\n  </GridItem>\n</Grid>",
              "label": "Columns"
            },
            {
              "sourceCode": "<>\n  <Grid>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4} collapseGapBefore>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4} collapseGapBefore collapseGapAfter>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4} collapseGapAfter>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n    <GridItem columnSpan={4}>\n      <div className=\"nr1-RedBox\">4</div>\n    </GridItem>\n  </Grid>\n</>",
              "label": "Collapse gap"
            }
          ]
        },
        {
          "description": "Child element of the `<Grid>` component.\n\n By default it spans one column but you can specify the number of columns that\n it should span by setting the `columnSpan` or the `columnStart` and\n `columnEnd` props.",
          "name": "GridItem",
          "usage": "import { GridItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the grid item.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the grid item will fill the following column gap set by\n the grid.",
              "isRequired": false,
              "name": "collapseGapAfter",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the grid item will fill the preceding column gap set by\n the grid.",
              "isRequired": false,
              "name": "collapseGapBefore",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Determines the grid item's end column within the grid.\n\n Possible values: integer between 1 and 12.",
              "isRequired": false,
              "name": "columnEnd",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Determines across how many columns the grid item should span,\n starting from the provided `columnStart`. This prop should be used as\n an alternative to `columnEnd`. If both of them are provided, only the\n `columnEnd` will be considered.\n\n Possible values: integer between 1 and 12.",
              "isRequired": false,
              "name": "columnSpan",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Determines the grid item's start column within the grid.\n\n Possible values: integer between 1 and 12.",
              "isRequired": false,
              "name": "columnStart",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Typography styles are used throughout the UI. If used consistently they will\n help you maintain a hierarchy that is clear to your users.",
          "name": "HeadingText",
          "usage": "import { HeadingText } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Text to display.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "HeadingText.SPACING_TYPE.EXTRA_LARGE",
                        "HeadingText.SPACING_TYPE.LARGE",
                        "HeadingText.SPACING_TYPE.MEDIUM",
                        "HeadingText.SPACING_TYPE.NONE",
                        "HeadingText.SPACING_TYPE.OMIT",
                        "HeadingText.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Tag in which to wrap the text.\n\n Useful for changing the semantic meaning of the text. This does\n not apply any style.",
              "isRequired": false,
              "name": "tagType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "HeadingText.TAG_TYPE.DIV",
                    "HeadingText.TAG_TYPE.H1",
                    "HeadingText.TAG_TYPE.H2",
                    "HeadingText.TAG_TYPE.H3",
                    "HeadingText.TAG_TYPE.H4",
                    "HeadingText.TAG_TYPE.H5",
                    "HeadingText.TAG_TYPE.H6"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "HeadingText.TYPE.HEADING_4",
              "description": "Type of text that you want to display.\n\n This applies styles according to the type.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "HeadingText.TYPE.HEADING_1",
                    "HeadingText.TYPE.HEADING_2",
                    "HeadingText.TYPE.HEADING_3",
                    "HeadingText.TYPE.HEADING_4",
                    "HeadingText.TYPE.HEADING_5",
                    "HeadingText.TYPE.HEADING_6"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<>\n  <HeadingText>Heading 4 (default)</HeadingText>\n</>",
              "label": "Basic"
            },
            {
              "sourceCode": "<>\n  <HeadingText type={HeadingText.TYPE.HEADING_1}>Heading 1</HeadingText>\n  <HeadingText type={HeadingText.TYPE.HEADING_2}>Heading 2</HeadingText>\n  <HeadingText type={HeadingText.TYPE.HEADING_3}>Heading 3</HeadingText>\n  <HeadingText type={HeadingText.TYPE.HEADING_4}>Heading 4</HeadingText>\n  <HeadingText type={HeadingText.TYPE.HEADING_5}>Heading 5</HeadingText>\n  <HeadingText type={HeadingText.TYPE.HEADING_6}>Heading 6</HeadingText>\n</>",
              "label": "Basic"
            },
            {
              "sourceCode": "<HeadingText\n  type={HeadingText.TYPE.HEADING_1}\n  tagType={HeadingText.TAG_TYPE.DIV}\n>\n  This is a div element styled as a h1\n</HeadingText>",
              "label": "Changing semantic"
            }
          ]
        },
        {
          "description": "Creates a heatmap chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "HeatmapChart",
          "usage": "import { HeatmapChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       viz: 'main',\n     },\n     data: [\n       {\n         x0: 0,\n         x1: 1,\n         y: 221,\n       },\n       {\n         x0: 1,\n         x1: 2,\n         y: 581,\n       },\n       {\n         x0: 2,\n         x1: 3,\n         y: 1330,\n       },\n       {\n         x0: 3,\n         x1: 4,\n         y: 2220,\n       },\n       {\n         x0: 4,\n         x1: 5,\n         y: 1810,\n       },\n       {\n         x0: 5,\n         x1: 6,\n         y: 1290,\n       },\n       {\n         x0: 6,\n         x1: 7,\n         y: 895,\n       },\n       {\n         x0: 7,\n         x1: 8,\n         y: 755,\n       },\n       {\n         x0: 8,\n         x1: 9,\n         y: 460,\n       },\n       {\n         x0: 9,\n         x1: 310,\n         y: 414,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       viz: 'main',\n     },\n     data: [\n       {\n         x0: 0,\n         x1: 1,\n         y: 119,\n       },\n       {\n         x0: 1,\n         x1: 2,\n         y: 1525,\n       },\n       {\n         x0: 2,\n         x1: 3,\n         y: 1860,\n       },\n       {\n         x0: 3,\n         x1: 4,\n         y: 2070,\n       },\n       {\n         x0: 4,\n         x1: 5,\n         y: 1280,\n       },\n       {\n         x0: 5,\n         x1: 6,\n         y: 1320,\n       },\n       {\n         x0: 6,\n         x1: 7,\n         y: 888,\n       },\n       {\n         x0: 7,\n         x1: 8,\n         y: 729,\n       },\n       {\n         x0: 8,\n         x1: 9,\n         y: 432,\n       },\n       {\n         x0: 9,\n         x1: 310,\n         y: 401,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding heatmap.",
              "isRequired": false,
              "name": "onClickHeatmap",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding heatmap.",
              "isRequired": false,
              "name": "onHoverHeatmap",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<HeatmapChart accountIds={[1]} query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago FACET countryCode\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<HeatmapChart accountIds={[1, 1067061]} query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago FACET countryCode\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<HeatmapChart\n  accountIds={[1]}\n  query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago FACET countryCode\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         viz: 'main',\n       },\n       data: [\n         {\n           x0: 0,\n           x1: 1,\n           y: 221,\n         },\n         {\n           x0: 1,\n           x1: 2,\n           y: 581,\n         },\n         {\n           x0: 2,\n           x1: 3,\n           y: 1330,\n         },\n         {\n           x0: 3,\n           x1: 4,\n           y: 2220,\n         },\n         {\n           x0: 4,\n           x1: 5,\n           y: 1810,\n         },\n         {\n           x0: 5,\n           x1: 6,\n           y: 1290,\n         },\n         {\n           x0: 6,\n           x1: 7,\n           y: 895,\n         },\n         {\n           x0: 7,\n           x1: 8,\n           y: 755,\n         },\n         {\n           x0: 8,\n           x1: 9,\n           y: 460,\n         },\n         {\n           x0: 9,\n           x1: 310,\n           y: 414,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         viz: 'main',\n       },\n       data: [\n         {\n           x0: 0,\n           x1: 1,\n           y: 119,\n         },\n         {\n           x0: 1,\n           x1: 2,\n           y: 1525,\n         },\n         {\n           x0: 2,\n           x1: 3,\n           y: 1860,\n         },\n         {\n           x0: 3,\n           x1: 4,\n           y: 2070,\n         },\n         {\n           x0: 4,\n           x1: 5,\n           y: 1280,\n         },\n         {\n           x0: 5,\n           x1: 6,\n           y: 1320,\n         },\n         {\n           x0: 6,\n           x1: 7,\n           y: 888,\n         },\n         {\n           x0: 7,\n           x1: 8,\n           y: 729,\n         },\n         {\n           x0: 8,\n           x1: 9,\n           y: 432,\n         },\n         {\n           x0: 9,\n           x1: 310,\n           y: 401,\n         },\n       ],\n     },\n   ];;\n\n  return <HeatmapChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a histogram chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.\n\n If you want to display a histogram with multiple series, consider using `HeatmapChart`.",
          "name": "HistogramChart",
          "usage": "import { HistogramChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n     },\n     data: [\n       {\n         x0: 0,\n         x1: 1,\n         y: 221,\n       },\n       {\n         x0: 1,\n         x1: 2,\n         y: 581,\n       },\n       {\n         x0: 2,\n         x1: 3,\n         y: 1330,\n       },\n       {\n         x0: 3,\n         x1: 4,\n         y: 2220,\n       },\n       {\n         x0: 4,\n         x1: 5,\n         y: 1810,\n       },\n       {\n         x0: 5,\n         x1: 6,\n         y: 1290,\n       },\n       {\n         x0: 6,\n         x1: 7,\n         y: 895,\n       },\n       {\n         x0: 7,\n         x1: 8,\n         y: 755,\n       },\n       {\n         x0: 8,\n         x1: 9,\n         y: 460,\n       },\n       {\n         x0: 9,\n         x1: 310,\n         y: 414,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding event.",
              "isRequired": false,
              "name": "onClickEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding histogram.",
              "isRequired": false,
              "name": "onClickHistogram",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding event.",
              "isRequired": false,
              "name": "onHoverEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding histogram.",
              "isRequired": false,
              "name": "onHoverHistogram",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<HistogramChart accountIds={[1]} query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<HistogramChart accountIds={[1, 1067061]} query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<HistogramChart\n  accountIds={[1]}\n  query=\"SELECT histogram(duration, width:10, buckets:20) FROM PageView SINCE 1 month ago\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n       },\n       data: [\n         {\n           x0: 0,\n           x1: 1,\n           y: 221,\n         },\n         {\n           x0: 1,\n           x1: 2,\n           y: 581,\n         },\n         {\n           x0: 2,\n           x1: 3,\n           y: 1330,\n         },\n         {\n           x0: 3,\n           x1: 4,\n           y: 2220,\n         },\n         {\n           x0: 4,\n           x1: 5,\n           y: 1810,\n         },\n         {\n           x0: 5,\n           x1: 6,\n           y: 1290,\n         },\n         {\n           x0: 6,\n           x1: 7,\n           y: 895,\n         },\n         {\n           x0: 7,\n           x1: 8,\n           y: 755,\n         },\n         {\n           x0: 8,\n           x1: 9,\n           y: 460,\n         },\n         {\n           x0: 9,\n           x1: 310,\n           y: 414,\n         },\n       ],\n     },\n   ];;\n\n  return <HistogramChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "React component used for rendering icons consistently through the UI. The\n icon component supports various icons in different sizes, and it also allows\n you to specify an icon color.",
          "name": "Icon",
          "usage": "import { Icon } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Color of the icon.\n\n By default it gets the current value of the css `color` property of\n the element.",
              "isRequired": false,
              "name": "color",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Icon.SPACING_TYPE.EXTRA_LARGE",
                        "Icon.SPACING_TYPE.LARGE",
                        "Icon.SPACING_TYPE.MEDIUM",
                        "Icon.SPACING_TYPE.NONE",
                        "Icon.SPACING_TYPE.OMIT",
                        "Icon.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Name of the icon to display.",
              "isRequired": true,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Icon.TYPE.DATAVIZ__DATAVIZ__AREA_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__BAR_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__BULLET_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__LINE_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__MARKDOWN",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__PIE_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__TABLE_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART",
                    "Icon.TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD",
                    "Icon.TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__EMAIL",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT",
                    "Icon.TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT",
                    "Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_TOP",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__ARROW__ARROW_VERTICAL",
                    "Icon.TYPE.INTERFACE__ARROW__EXPAND",
                    "Icon.TYPE.INTERFACE__ARROW__GO_TO",
                    "Icon.TYPE.INTERFACE__ARROW__MOVE",
                    "Icon.TYPE.INTERFACE__ARROW__RESIZE",
                    "Icon.TYPE.INTERFACE__ARROW__RETURN_LEFT",
                    "Icon.TYPE.INTERFACE__ARROW__RETURN_RIGHT",
                    "Icon.TYPE.INTERFACE__ARROW__SHRINK",
                    "Icon.TYPE.INTERFACE__ARROW__SORT",
                    "Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM",
                    "Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_LEFT",
                    "Icon.TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_RIGHT",
                    "Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_TOP",
                    "Icon.TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8",
                    "Icon.TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8",
                    "Icon.TYPE.INTERFACE__INFO__ANNOUNCEMENT",
                    "Icon.TYPE.INTERFACE__INFO__HELP",
                    "Icon.TYPE.INTERFACE__INFO__INFO",
                    "Icon.TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ADJUST",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ALERT",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ALERT__S_ON",
                    "Icon.TYPE.INTERFACE__OPERATIONS__ARCHIVE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__CENTER",
                    "Icon.TYPE.INTERFACE__OPERATIONS__CLOSE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8",
                    "Icon.TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__CONFIGURE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__COPY_TO",
                    "Icon.TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD",
                    "Icon.TYPE.INTERFACE__OPERATIONS__DOWNLOAD",
                    "Icon.TYPE.INTERFACE__OPERATIONS__DRAG",
                    "Icon.TYPE.INTERFACE__OPERATIONS__EDIT",
                    "Icon.TYPE.INTERFACE__OPERATIONS__EXPORT",
                    "Icon.TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK",
                    "Icon.TYPE.INTERFACE__OPERATIONS__FILTER",
                    "Icon.TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD",
                    "Icon.TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__FOLLOW",
                    "Icon.TYPE.INTERFACE__OPERATIONS__GROUP",
                    "Icon.TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__HIDE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS",
                    "Icon.TYPE.INTERFACE__OPERATIONS__HIGHLIGHT",
                    "Icon.TYPE.INTERFACE__OPERATIONS__IMPORT",
                    "Icon.TYPE.INTERFACE__OPERATIONS__MORE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__PAUSE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__PIN",
                    "Icon.TYPE.INTERFACE__OPERATIONS__PLAY",
                    "Icon.TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__REARRANGE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__REDO",
                    "Icon.TYPE.INTERFACE__OPERATIONS__REFRESH",
                    "Icon.TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SEARCH",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SELECTION",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SHARE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SHARE_LINK",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SHOW",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SKIP_BACK",
                    "Icon.TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD",
                    "Icon.TYPE.INTERFACE__OPERATIONS__TAG",
                    "Icon.TYPE.INTERFACE__OPERATIONS__TRASH",
                    "Icon.TYPE.INTERFACE__OPERATIONS__TV_MODE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE",
                    "Icon.TYPE.INTERFACE__OPERATIONS__UNDO",
                    "Icon.TYPE.INTERFACE__OPERATIONS__UNPIN",
                    "Icon.TYPE.INTERFACE__OPERATIONS__UPLOAD",
                    "Icon.TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER",
                    "Icon.TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER",
                    "Icon.TYPE.INTERFACE__SIGN__ASTERISK",
                    "Icon.TYPE.INTERFACE__SIGN__CHECKMARK",
                    "Icon.TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__SIGN__CLOSE",
                    "Icon.TYPE.INTERFACE__SIGN__DOLLAR_SIGN",
                    "Icon.TYPE.INTERFACE__SIGN__EXCLAMATION",
                    "Icon.TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__SIGN__MINUS",
                    "Icon.TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__SIGN__NUMBER",
                    "Icon.TYPE.INTERFACE__SIGN__PLUS",
                    "Icon.TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__SIGN__TIMES",
                    "Icon.TYPE.INTERFACE__SIGN__TIMES__SIZE_8",
                    "Icon.TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE",
                    "Icon.TYPE.INTERFACE__STATE__CLOSED",
                    "Icon.TYPE.INTERFACE__STATE__CRITICAL",
                    "Icon.TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__STATE__DISABLED",
                    "Icon.TYPE.INTERFACE__STATE__ENABLED",
                    "Icon.TYPE.INTERFACE__STATE__HEALTHY",
                    "Icon.TYPE.INTERFACE__STATE__LOADING",
                    "Icon.TYPE.INTERFACE__STATE__LOCK",
                    "Icon.TYPE.INTERFACE__STATE__OPEN",
                    "Icon.TYPE.INTERFACE__STATE__PRIVATE",
                    "Icon.TYPE.INTERFACE__STATE__PUBLIC",
                    "Icon.TYPE.INTERFACE__STATE__UNAVAILABLE",
                    "Icon.TYPE.INTERFACE__STATE__UNLOCK",
                    "Icon.TYPE.INTERFACE__STATE__WARNING",
                    "Icon.TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD",
                    "Icon.TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN",
                    "Icon.TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN",
                    "Icon.TYPE.INTERFACE__VIEW__GRID_VIEW",
                    "Icon.TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW",
                    "Icon.TYPE.INTERFACE__VIEW__LAYER_LIST",
                    "Icon.TYPE.INTERFACE__VIEW__LIST_VIEW",
                    "Icon.TYPE.INTERFACE__VIEW__SIXTH_SENSE",
                    "Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE",
                    "Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK",
                    "Icon.TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT",
                    "Icon.TYPE.LOCATION__LOCATION__HOME",
                    "Icon.TYPE.LOCATION__LOCATION__MAP",
                    "Icon.TYPE.LOCATION__LOCATION__PIN",
                    "Icon.TYPE.LOCATION__LOCATION__WORLD",
                    "Icon.TYPE.PROFILES__EVENTS__COMMENT",
                    "Icon.TYPE.PROFILES__EVENTS__COMMENT__A_EDIT",
                    "Icon.TYPE.PROFILES__EVENTS__FAVORITE",
                    "Icon.TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD",
                    "Icon.TYPE.PROFILES__EVENTS__LIKE",
                    "Icon.TYPE.PROFILES__USERS__ORGANIZATION",
                    "Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_ADD",
                    "Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT",
                    "Icon.TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE",
                    "Icon.TYPE.PROFILES__USERS__TEAM",
                    "Icon.TYPE.PROFILES__USERS__TEAM__A_ADD",
                    "Icon.TYPE.PROFILES__USERS__TEAM__A_EDIT",
                    "Icon.TYPE.PROFILES__USERS__TEAM__A_REMOVE",
                    "Icon.TYPE.PROFILES__USERS__USER",
                    "Icon.TYPE.PROFILES__USERS__USER__A_ADD",
                    "Icon.TYPE.PROFILES__USERS__USER__A_EDIT",
                    "Icon.TYPE.PROFILES__USERS__USER__A_REMOVE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Icon type={Icon.TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK} />",
              "label": "Basic"
            }
          ]
        },
        {
          "description": "Use the inline messages when an element requires attention. They alert users\n that important information is available or action is required and disappear\n once the user has taken appropriate action.\n\n The inline message uses an icon as the main element to give a visual\n indicator of the type and urgency of the message. The icon can be combined\n with an optional label to highlight its message.\n\n The inline message reveals a dialog that provides a summary of the issue and\n links to information or actions when the user hovers on the icon or the icon\n and label combination.",
          "name": "InlineMessage",
          "usage": "import { InlineMessage } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "You may specify an action to provide the user with some actionable\n next steps to avoid leading them to a dead end.",
              "isRequired": false,
              "name": "action",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "ariaLabel",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the button.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Provide a label for screen readers to describe the status message.\n This is only required if the screen reader label should be different\n to the `label` prop, or if you are not providing a `label` prop at\n all.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Should be used to provide further details in the dialog and\n complement the title.\n\n Note: `title`, `label`, and `description` props are optional, but at\n least one of them has to be provided.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Short summary of the status. Use the label when possible to shortly\n describe the status of the component and when there are no spacing\n limitations.\n\n Note: `title`, `label`, and `description` props are optional, but at\n least one of them has to be provided.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Title displayed in the dialog.\n\n Note: `title`, `label`, and `description` props are optional, but at\n least one of them has to be provided.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "InlineMessage.TYPE.INFO",
              "description": "Type can be:\n\n - Info (default) — use it to indicate general or in-progress status.\n\n - Success — use it to communicate positive changes.\n\n - Warning — use it to communicate a possible problem, undesired\n   situation, cautionary advice, or advanced notice of some sort.\n\n - Critical — use it to communicate problematic issues.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "InlineMessage.TYPE.CRITICAL",
                    "InlineMessage.TYPE.INFO",
                    "InlineMessage.TYPE.SUCCESS",
                    "InlineMessage.TYPE.WARNING"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Stack>\n  <StackItem>\n    <InlineMessage label=\"We have updated the data for this chart.\" />\n  </StackItem>\n  <StackItem>\n    <InlineMessage\n      type={InlineMessage.TYPE.SUCCESS}\n      label=\"The entity has been successfully created\"\n    />\n  </StackItem>\n  <StackItem>\n    <InlineMessage\n      type={InlineMessage.TYPE.WARNING}\n      label=\"The edition is restricted for this account.\"\n    />\n  </StackItem>\n  <StackItem>\n    <InlineMessage\n      type={InlineMessage.TYPE.CRITICAL}\n      label=\"We couldn't fetch the data.\"\n    />\n  </StackItem>\n</Stack>",
              "label": "Types"
            },
            {
              "sourceCode": "<InlineMessage\n  type={InlineMessage.TYPE.CRITICAL}\n  label=\"We couldn't transform the query.\"\n  action={{ label: 'See the documentation', onClick: console.log }}\n/>",
              "label": "Label and action"
            },
            {
              "sourceCode": "<InlineMessage\n  type={InlineMessage.TYPE.SUCCESS}\n  label=\"The data has been added.\"\n  description=\"You have successfully added 3 new hosts.\"\n  action={{ label: 'See the hosts', onClick: console.log }}\n/>",
              "label": "Dialog with details"
            },
            {
              "sourceCode": "<InlineMessage\n  type={InlineMessage.TYPE.CRITICAL}\n  title=\"We can't render this query.\"\n  description=\"We tried to transform your query into a query that is compatible with both Metric and previous Infrastructure methods, but some expressions weren’t available.\"\n  action={{ label: 'See NRQL documentation', to: '//docs.newrelic.com' }}\n/>",
              "label": "Icon only"
            }
          ]
        },
        {
          "description": "Creates a json chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "JsonChart",
          "usage": "import { JsonChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = {\n   \"id\": 1,\n   \"name\": \"Foo\",\n   \"price\": 123,\n   \"tags\": [\n     \"Bar\",\n     \"Eek\"\n   ],\n   \"stock\": {\n     \"warehouse\": 300,\n     \"retail\": 20\n   }\n };;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<JsonChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<JsonChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<JsonChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = {\n     \"id\": 1,\n     \"name\": \"Foo\",\n     \"price\": 123,\n     \"tags\": [\n       \"Bar\",\n       \"Eek\"\n     ],\n     \"stock\": {\n       \"warehouse\": 300,\n       \"retail\": 20\n     }\n   };;\n\n  return <JsonChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Layout is a 1-dimensional layout system with options to control the relative\n sizing of its children's elements. Layout spans the full width of the\n viewport area.",
          "name": "Layout",
          "usage": "import { Layout } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Layout items to display.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Expands the layout to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Visually draws the boxes of the layout and its layout items.",
              "isRequired": false,
              "name": "preview",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Layout preview>\n  <LayoutItem>\n    <div className=\"nr1-Box\">Main content</div>\n  </LayoutItem>\n</Layout>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Layout preview>\n  <LayoutItem\n    type={LayoutItem.TYPE.SPLIT_LEFT}\n    sizeType={LayoutItem.SIZE_TYPE.SMALL}\n  >\n    <div className=\"nr1-Box\">Navigation</div>\n  </LayoutItem>\n  <LayoutItem>\n    <div className=\"nr1-Box\">Main content</div>\n  </LayoutItem>\n</Layout>",
              "label": "Split left small"
            },
            {
              "sourceCode": "<Layout preview>\n  <LayoutItem>\n    <div className=\"nr1-Box\">Main content</div>\n  </LayoutItem>\n  <LayoutItem type={LayoutItem.TYPE.SPLIT_RIGHT}>\n    <div className=\"nr1-Box\">Activity stream</div>\n  </LayoutItem>\n</Layout>",
              "label": "Split right medium"
            },
            {
              "sourceCode": "<Layout preview>\n  <LayoutItem\n    type={LayoutItem.TYPE.SPLIT_LEFT}\n    sizeType={LayoutItem.SIZE_TYPE.SMALL}\n  >\n    <div className=\"nr1-Box\">Navigation</div>\n  </LayoutItem>\n  <LayoutItem>\n    <div className=\"nr1-Box\">Main content</div>\n  </LayoutItem>\n  <LayoutItem type={LayoutItem.TYPE.SPLIT_RIGHT}>\n    <div className=\"nr1-Box\">Activity stream</div>\n  </LayoutItem>\n</Layout>",
              "label": "Split left small and split right medium"
            },
            {
              "sourceCode": "<Layout preview fullHeight>\n  <CollapsibleLayoutItem\n    triggerType={CollapsibleLayoutItem.TRIGGER_TYPE.INBUILT}\n    type={LayoutItem.TYPE.SPLIT_LEFT}\n    sizeType={LayoutItem.SIZE_TYPE.SMALL}\n  >\n    <div className=\"nr1-Box\">Navigation</div>\n  </CollapsibleLayoutItem>\n\n  <LayoutItem>\n    <div className=\"nr1-Box\">Main content</div>\n  </LayoutItem>\n\n  <CollapsibleLayoutItem\n    triggerType={CollapsibleLayoutItem.TRIGGER_TYPE.INBUILT}\n    type={LayoutItem.TYPE.SPLIT_RIGHT}\n  >\n    <div className=\"nr1-Box\">Activity stream</div>\n  </CollapsibleLayoutItem>\n</Layout>",
              "label": "Split left and right collapsible"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      collapsedLeft: false,\n      collapsedRight: false,\n    };\n  }\n\n  render() {\n    return (\n      <>\n        <Stack>\n          <StackItem>\n            <label>\n              Collapsed on the left side?\n              <input\n                type=\"checkbox\"\n                onChange={(e) =>\n                  this.setState({ collapsedLeft: e.currentTarget.checked })\n                }\n              />\n            </label>\n          </StackItem>\n\n          <StackItem>\n            <label>\n              Collapsed on the right side?\n              <input\n                type=\"checkbox\"\n                onChange={(e) =>\n                  this.setState({ collapsedRight: e.currentTarget.checked })\n                }\n              />\n            </label>\n          </StackItem>\n        </Stack>\n\n        <Layout preview fullHeight>\n          <CollapsibleLayoutItem\n            collapsed={this.state.collapsedLeft}\n            triggerType={CollapsibleLayoutItem.TRIGGER_TYPE.CUSTOM}\n            type={LayoutItem.TYPE.SPLIT_LEFT}\n            sizeType={LayoutItem.SIZE_TYPE.SMALL}\n          >\n            <div className=\"nr1-Box\">Navigation</div>\n          </CollapsibleLayoutItem>\n\n          <LayoutItem>\n            <div className=\"nr1-Box\">Main content</div>\n          </LayoutItem>\n\n          <CollapsibleLayoutItem\n            collapsed={this.state.collapsedRight}\n            triggerType={CollapsibleLayoutItem.TRIGGER_TYPE.CUSTOM}\n            type={LayoutItem.TYPE.SPLIT_RIGHT}\n          >\n            <div className=\"nr1-Box\">Activity stream</div>\n          </CollapsibleLayoutItem>\n        </Layout>\n      </>\n    );\n  }\n}",
              "label": "Collapsible in controlled mode"
            },
            {
              "sourceCode": "<>\n  <Layout preview>\n    <LayoutItem>\n      <div className=\"nr1-Box\">Chart</div>\n    </LayoutItem>\n  </Layout>\n  <Layout preview>\n    <LayoutItem\n      type={LayoutItem.TYPE.SPLIT_LEFT}\n      sizeType={LayoutItem.SIZE_TYPE.SMALL}\n    >\n      <div className=\"nr1-Box\">Navigation</div>\n    </LayoutItem>\n    <LayoutItem>\n      <div className=\"nr1-Box\">Main Content</div>\n    </LayoutItem>\n  </Layout>\n</>",
              "label": "Stacked layout"
            }
          ]
        },
        {
          "description": "Child element of the <Layout> component.\n\n By default uses the main type, to span the full width of the Layout area.\n Split left and split right provide a fixed left/right area. Layout only\n supports one type of each.",
          "name": "LayoutItem",
          "usage": "import { LayoutItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to display inside the child item.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "LayoutItem.SIZE_TYPE.MEDIUM",
              "description": "Determines the width of the layout item. We recommend you use the\n small size for navigation purposes (ex. sidebars) and the medium size\n for showing contextualized information (ex. activity stream).\n\n Size type only works on SPLIT_LEFT and SPLIT_RIGHT items.",
              "isRequired": false,
              "name": "sizeType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "LayoutItem.SIZE_TYPE.MEDIUM",
                    "LayoutItem.SIZE_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "LayoutItem.TYPE.MAIN",
              "description": "Type can be:\n\n - Main — Used to place the main content on each view. It spans the\n   full width of the layout area.\n - Split left — Render as a fixed area on the left of the layout.\n - Split right — Render as a fixed area on the right of the layout.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "LayoutItem.TYPE.MAIN",
                    "LayoutItem.TYPE.SPLIT_LEFT",
                    "LayoutItem.TYPE.SPLIT_RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Provides declarative, accessible navigation around the application and\n external links.",
          "name": "Link",
          "usage": "import { Link } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Use it to describe better the context of the component's action for\n users on screen readers.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "<Link to=\"/dashboards\" ariaLabel=\"Go to your dashboard\">\n  Go\n</Link>",
                  "label": "Giving better context for screen reader announcement"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Content of the link.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the link.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "ARIA attribute use to describe the `Link`'s role for accessibility,\n like `role=\"menuitem\"`. By default, `Link`'s role is \"link\", so an\n explicit role is for use within other accessible elements, such as\n `role=\"menu\"` elements and others.\n\n Consult\n [ARIA best practices]INSERTLINKhttps://www.w3.org/TR/wai-aria-practices/ to\n see what `role`s can be applied to `Link` and in which contexts.",
              "isRequired": false,
              "name": "role",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Link.SPACING_TYPE.EXTRA_LARGE",
                        "Link.SPACING_TYPE.LARGE",
                        "Link.SPACING_TYPE.MEDIUM",
                        "Link.SPACING_TYPE.NONE",
                        "Link.SPACING_TYPE.OMIT",
                        "Link.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Link to=\"https://www.google.com\">Click me</Link>",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const launcher = { id: 'nr1-core.explorer' };\n  const location = navigation.getOpenLauncherLocation(launcher);\n\n  return <Link to={location}>Click me</Link>;\n}",
              "label": "With location object"
            }
          ]
        },
        {
          "description": "`<List>` allows you to efficiently render a large list of items.\n\n The `<List>` can render the items in two ways: as an array of `<ListItem>`\n elements or as a render callback (Function as Children). It is recommended to\n use the render callback since it will virtualize all the items, making it\n very fast when a large numer of items is provided.\n\n If the width and height are not specified through the `style` or `className`\n props, it will fill the height and the width of the container, unless\n `width=\"fit-content\"` is provided as a prop. Then it will size the `<List>`\n container to be as wide as the widest measured `<ListItem>` component.",
          "name": "List",
          "usage": "import { List } from 'nr1'",
          "typeDefs": [
            {
              "name": "RenderCallbackArguments",
              "properties": [
                {
                  "description": "Item to render.",
                  "name": "item",
                  "type": "any"
                },
                {
                  "description": "Index of the item in the items array.",
                  "name": "index",
                  "type": "number"
                },
                {
                  "description": "Array of items which we're iterating on.",
                  "name": "items",
                  "type": "any[]"
                }
              ]
            },
            {
              "name": "Cursor",
              "properties": [
                {
                  "description": "First index of the range of items to load.",
                  "name": "startIndex",
                  "type": "number"
                },
                {
                  "description": "Last index of the range of items to load.",
                  "name": "stopIndex",
                  "type": "number"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "It can be either an array of `<ListItem>` elements or a render\n callback (Function as Children). The recommendation is to use the\n render callback since it will virtualize all the items, making it\n very fast when a large numer of items is provided.\n\n When using the render callback items need to be provided through the\n `items` prop.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|function",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "function",
                      "raw": "func",
                      "meta": {
                        "arguments": [],
                        "returnValue": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Classname for custom styling.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the stack to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the stack to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "[]",
              "description": "The items to be used when rendering.\n\n They are required when rendering items with a render callback.\n\n Each item can have any structure and type possible, and will the\n corresponding one will be provided when rendering each element list.",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "any[]",
                "meta": {
                  "itemTypes": {
                    "name": "any",
                    "raw": "any",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "function render() {\n  const style = { width: 200, height: 300 };\n\n  const items = [\n    { foo: 'a', bar: 'x' },\n    { foo: 'b', bar: 'y' },\n  ];\n\n  return (\n    <div style={style}>\n      <List items={items}>\n        {({ item, index }) => (\n          <ListItem key={index}>{`${item.foo} - ${item.bar}`}</ListItem>\n        )}\n      </List>\n    </div>\n  );\n}",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Callback fired when more items must be loaded. This happens when\n you're lazy loading the items and the items that are about to render\n cannot be found in the `items` array.\n\n This callback should be used to fetch/load the missing items from the\n backend or other sources.\n\n The returned Promise should be resolved once item data has finished\n loading. It will be used to determine when to refresh the list with\n the newly-loaded data. This callback may be called multiple times in\n reaction to a single scroll event.",
              "isRequired": false,
              "name": "onLoadMore",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "cursor",
                      "type": "Cursor",
                      "description": "Items to load."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Number of rows.\n\n By default it's equal to length of array passed in the items prop.\n\n You should specify the `rowCount` when you know the total number of\n items but you want to lazy load them while scrolling.",
              "isRequired": false,
              "name": "rowCount",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Height of the list row.\n\n Required when rendering items with the render callback (Function as\n Children). This is a provisional height until the cell content is\n measured by temporarily rendering it in a way that is not visible to\n the user.",
              "isRequired": true,
              "name": "rowHeight",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "List.SPACING_TYPE.EXTRA_LARGE",
                        "List.SPACING_TYPE.LARGE",
                        "List.SPACING_TYPE.MEDIUM",
                        "List.SPACING_TYPE.NONE",
                        "List.SPACING_TYPE.OMIT",
                        "List.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "auto",
              "description": "Represents the width of the list. It is always a string, and it can\n be of one of the following types:\n\n - `'fit-content'`: Enables auto-sizing of the `<List>` container.\n   Intended for use with virtualised `<List>`s to ensure the container\n   fits the width of the widest `<ListItem>`. Resizes as more items\n   are loaded by the `<List>` component. Does not affect the height of\n   the `<List>` component, which will continue to fit the height of\n   the container the `<List>` component is in.\n\n - `'auto'`: The default value for `<List>`. This prompts the `<List>`\n   component to size according to its default styling, allowing it to\n   expand to fill the width and height of its container. Content is\n   then sized to fit the resulting width of the `<List>` component.",
              "isRequired": false,
              "name": "width",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  return (\n    <List rowHeight={20}>\n      <ListItem>Item 1</ListItem>\n      <ListItem>Item 2</ListItem>\n      <ListItem>Item 3</ListItem>\n      <ListItem>Item 4</ListItem>\n    </List>\n  );\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const items = new Array(10000).fill().map((_, i) => {\n    return { key: `foo-${i}`, name: `Item ${i}` };\n  });\n\n  const style = { width: 200, height: 300 };\n\n  return (\n    <List style={style} rowHeight={20} items={items}>\n      {({ item }) => <ListItem key={item.key}>{item.name}</ListItem>}\n    </List>\n  );\n}",
              "label": "Render callback"
            },
            {
              "sourceCode": "function render() {\n  // This example assumes you have a way to know/load this information.\n  const remoteTotalNumberOfItems = 9000;\n\n  const items = [\n    { id: 1, text: 'Item 1' },\n    { id: 2, text: 'Item 2' },\n    { id: 3, text: 'Item 3' },\n    { id: 4, text: 'Item 4' },\n  ];\n\n  function loadMoreItems({ startIndex, stopIndex }) {\n    return fetch(`path/to/api?start=${startIndex}&stop=${stopIndex}`).then(\n      () => {\n        // Store items in list...\n      },\n    );\n  }\n\n  const style = { width: 200, height: 300 };\n\n  return (\n    <div style={style}>\n      <List\n        items={items}\n        rowCount={remoteTotalNumberOfItems}\n        onLoadMore={loadMoreItems}\n      >\n        {({ item }) => <ListItem key={item.id}>{item.text}</ListItem>}\n      </List>\n    </div>\n  );\n}",
              "label": "Lazy loading"
            },
            {
              "sourceCode": "class AutoSizingList extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      items: this._generateItems(0),\n    };\n    this._maxItems = 1000;\n    this._onLoadMore = this._onLoadMore.bind(this);\n  }\n\n  _onLoadMore(cursor) {\n    return (\n      Promise.resolve()\n        // Fetch more items to load into <List>\n        .then(() => this._generateItems(this.state.items.length))\n        .then((moreItems) =>\n          // Add retrieved items to the stored list\n          this.setState(({ items }) => ({ items: items.concat(moreItems) })),\n        )\n    );\n  }\n\n  _generateString(num, extra = 0) {\n    return `Entity ${num.toString(10)}: 1${'00'.repeat(\n      Math.floor(Math.random() * 10) + 1 + extra,\n    )} bytes`;\n  }\n\n  _generateItems(start) {\n    return new Array(200).fill().map((_, i) => ({\n      key: `foo-${start + i}`,\n      name: this._generateString(start + i, start / 100),\n    }));\n  }\n\n  render() {\n    const style = { 'height': 300, 'background-color': 'white' };\n    const parentStyle = { width: 260 };\n\n    return (\n      <div style={parentStyle}>\n        <List\n          rowCount={this._maxItems}\n          onLoadMore={this._onLoadMore}\n          style={{ ...style }}\n          rowHeight={20}\n          items={this.state.items}\n          width=\"fit-content\"\n        >\n          {({ item }) => <ListItem key={item.key}>{item.name}</ListItem>}\n        </List>\n      </div>\n    );\n  }\n}",
              "label": "Auto-sizing to content width"
            },
            {
              "sourceCode": "function render() {\n  const style = { width: 200, height: 300 };\n\n  const list = (\n    <div style={style}>\n      <EntitiesByDomainTypeQuery entityDomain=\"APM\" entityType=\"APPLICATION\">\n        {({ fetchMore, loading, data }) => {\n          const { results, count } = data.actor.entitySearch;\n\n          return (\n            <List\n              rowHeight={40}\n              items={results.entities}\n              onLoadMore={fetchMore}\n              rowCount={count}\n            >\n              {({ item }) => <ListItem key={item.id}>{item.text}</ListItem>}\n            </List>\n          );\n        }}\n      </EntitiesByDomainTypeQuery>\n    </div>\n  );\n}",
              "label": "Integration with query components"
            }
          ]
        },
        {
          "description": "Child element of the `<List>` component.",
          "name": "ListItem",
          "usage": "import { ListItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content of the ListItem.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Classname for custom styling.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Renders a row table cell showing a particular metric. The metric is formatted\n according to the unit passed. Units are 1:1 compatible with the ones\n supported by `<NrqlQuery>` format type `CHART`.\n\n Unit and prefix formatting is automatically picked for you so that it is\n consistent with the rest of the platform. Metrics are automatically aligned\n to the left, and ellipsified from the right, which is the standard way for\n presenting them.",
          "name": "MetricTableRowCell",
          "usage": "import { MetricTableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Additional information along the main data in the cell.\n\n **Note:** At the moment this content becomes visible only when the\n `multivalue` prop is passed to the parent `Table` component.",
              "isRequired": false,
              "name": "additionalValue",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the table cell.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "MetricTableRowCell.TYPE.UNKNOWN",
              "description": "Unit of the provided metric. Will be used for auto-formatting the\n numerical value.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "MetricTableRowCell.TYPE.APDEX",
                    "MetricTableRowCell.TYPE.BITS",
                    "MetricTableRowCell.TYPE.BITS_PER_MS",
                    "MetricTableRowCell.TYPE.BITS_PER_SECOND",
                    "MetricTableRowCell.TYPE.BYTES",
                    "MetricTableRowCell.TYPE.BYTES_PER_MS",
                    "MetricTableRowCell.TYPE.BYTES_PER_SECOND",
                    "MetricTableRowCell.TYPE.CELSIUS",
                    "MetricTableRowCell.TYPE.COUNT",
                    "MetricTableRowCell.TYPE.HERTZ",
                    "MetricTableRowCell.TYPE.MS",
                    "MetricTableRowCell.TYPE.PAGES_PER_SECOND",
                    "MetricTableRowCell.TYPE.PERCENTAGE",
                    "MetricTableRowCell.TYPE.REQUESTS_PER_SECOND",
                    "MetricTableRowCell.TYPE.SECONDS",
                    "MetricTableRowCell.TYPE.TIMESTAMP",
                    "MetricTableRowCell.TYPE.UNKNOWN"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Metric value, always in the shape of a number.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      value: 123456789,\n    },\n  ];\n\n  return (\n    <Table items={items}>\n      <TableHeader>\n        <TableHeaderCell alignmentType={TableHeaderCell.ALIGNMENT_TYPE.RIGHT}>\n          Memory usage\n        </TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <MetricTableRowCell\n            type={MetricTableRowCell.TYPE.BITS}\n            value={item.value}\n          />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      value: 123456789,\n      lastUpdated: new Date().toLocaleTimeString(),\n    },\n  ];\n\n  return (\n    <Table items={items} multivalue>\n      <TableHeader>\n        <TableHeaderCell alignmentType={TableHeaderCell.ALIGNMENT_TYPE.RIGHT}>\n          Memory usage\n        </TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <MetricTableRowCell\n            type={MetricTableRowCell.TYPE.BITS}\n            value={item.value}\n            additionalValue={`Last updated at ${item.lastUpdated}`}\n          />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "With additional value"
            }
          ]
        },
        {
          "description": "Modals are used for single-step create, add, edit, or delete actions. They\n are also used to display additional metadata about a screen or specific\n object on the screen.",
          "name": "Modal",
          "usage": "import { Modal } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Pass the string of the text content which should better describe the\n purpose of the modal to be correctly announced by screen readers.",
              "isRequired": false,
              "name": "ariaLabelledBy",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const modalLabelId = 'my-nerdlet.my-modal';\n\n<Modal ariaLabelledBy={modalLabelId}>\n  <span id={modalLabelId}>\n    <HeadingText>My modal</HeadingText>\n  </span>\n</Modal>",
                  "label": "Correctly labelled Modal"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Content to render inside the modal.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the modal is hidden.",
              "isRequired": false,
              "name": "hidden",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when clicking on the Modal's close button.",
              "isRequired": true,
              "name": "onClose",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when the Modal finishes the closing animation.\n\n Use this to unmount the Modal component. This ensures that the closing\n animation works properly.",
              "isRequired": false,
              "name": "onHideEnd",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "function render() {\n  <>\n    {this.state.mounted && (\n      <Modal\n        hidden={this.state.hidden}\n        onHideEnd={() => this.setState({ mounted: false })}\n        onClose={() => this.setState({ hidden: true })}\n      >\n        <h1>Modal</h1>\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n          eiusmod tempor incididunt ut labore et dolore magna aliqua.\n        </p>\n      </Modal>\n    )}\n  </>;\n}",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Callback fired when the Modal starts the closing animation.",
              "isRequired": false,
              "name": "onHideStart",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when the Modal finishes the opening animation.",
              "isRequired": false,
              "name": "onShowEnd",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when the Modal starts the opening animation.",
              "isRequired": false,
              "name": "onShowStart",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._onClose = this._onClose.bind(this);\n\n    this.state = {\n      hidden: true,\n    };\n  }\n\n  _onClose() {\n    this.setState({ hidden: true });\n  }\n\n  render() {\n    return (\n      <>\n        <Button onClick={() => this.setState({ hidden: false })}>\n          Open modal\n        </Button>\n\n        <Modal hidden={this.state.hidden} onClose={this._onClose}>\n          <HeadingText type={HeadingText.TYPE.HEADING_3}>Modal</HeadingText>\n\n          <BlockText\n            spacingType={[\n              BlockText.SPACING_TYPE.EXTRA_LARGE,\n              BlockText.SPACING_TYPE.OMIT,\n            ]}\n          >\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n            eiusmod tempor incididunt ut labore et dolore magna aliqua. Dictumst\n            quisque sagittis purus sit amet.\n          </BlockText>\n\n          <Button onClick={this._onClose}>Close</Button>\n        </Modal>\n      </>\n    );\n  }\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n\n    this._onClick = this._onClick.bind(this);\n    this._onClose = this._onClose.bind(this);\n    this._onHideEnd = this._onHideEnd.bind(this);\n\n    this.state = {\n      hidden: true,\n      mounted: false,\n    };\n  }\n\n  _onClick() {\n    this.setState({\n      hidden: false,\n      mounted: true,\n    });\n  }\n\n  _onClose() {\n    this.setState({ hidden: true });\n  }\n\n  _onHideEnd() {\n    this.setState({ mounted: false });\n  }\n\n  render() {\n    return (\n      <>\n        <Button onClick={this._onClick}>Open modal</Button>\n\n        {this.state.mounted && (\n          <Modal\n            hidden={this.state.hidden}\n            onClose={this._onClose}\n            onHideEnd={this._onHideEnd}\n          >\n            <HeadingText type={HeadingText.TYPE.HEADING_3}>Modal</HeadingText>\n\n            <BlockText\n              spacingType={[\n                BlockText.SPACING_TYPE.EXTRA_LARGE,\n                BlockText.SPACING_TYPE.OMIT,\n              ]}\n            >\n              Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do\n              eiusmod tempor incididunt ut labore et dolore magna aliqua.\n              Dictumst quisque sagittis purus sit amet.\n            </BlockText>\n\n            <Button onClick={this._onClose}>Close</Button>\n          </Modal>\n        )}\n      </>\n    );\n  }\n}",
              "label": "Unmounting"
            }
          ]
        },
        {
          "description": "Component used for multiline input purposes in forms.",
          "name": "MultilineTextField",
          "usage": "import { MultilineTextField } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a label for screen readers to describe this input. This is\n only required if the screen reader label should be different to the\n `label` prop, or if you are not providing a `label` prop at all.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Provide the unique `id` of an element whose contents describe this\n input for screen readers. This is only required if the screen reader\n label should be different to the `label` prop, or if you are not\n providing a `label` prop at all. Use this or `ariaLabel`, not both.",
              "isRequired": false,
              "name": "ariaLabelledBy",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the multiline text field will autofocus on mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Default value of the multiline text field.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Establishes whether the field can be editable or not.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If loading a list of data or something else into a form field,\n indicate to the user that something is loading by using the loading\n state form.\n\n Used to inform that the field might load values dynamically. When set\n to `true`, shows a loading spinner; and when set to `false`, reserves\n some space in the UI so that the spinner can potentially be shown.\n\n Do not set the property (or set it to `undefined`) if the field is\n not expected to get loading at any given point in time.",
              "isRequired": false,
              "name": "loading",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the multiline text field loses focus.",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.FocusEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the multiline text field value changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": "Event source of the callback. You\n        can pull out the new value by accessing `event.target.value`."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the multiline text field gets focus.",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.FocusEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when a key is pressed.",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.KeyboardEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when a key is released.",
              "isRequired": false,
              "name": "onKeyUp",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.KeyboardEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Hint displayed in the multiline text field when it has no value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, makes the multiline text field read only.",
              "isRequired": false,
              "name": "readOnly",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "5",
              "description": "Amount of rows in the text field.\n\n The minimum required is five rows.",
              "isRequired": false,
              "name": "rows",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "MultilineTextField.SPACING_TYPE.EXTRA_LARGE",
                        "MultilineTextField.SPACING_TYPE.LARGE",
                        "MultilineTextField.SPACING_TYPE.MEDIUM",
                        "MultilineTextField.SPACING_TYPE.NONE",
                        "MultilineTextField.SPACING_TYPE.OMIT",
                        "MultilineTextField.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, enables the browser check for spelling errors.",
              "isRequired": false,
              "name": "spellCheck",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "MultilineTextField.TYPE.NORMAL",
              "description": "- NORMAL — when a user inputs text into a field\n - PERFORMATTED — when a user needs to enter monospaced content",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "MultilineTextField.TYPE.NORMAL",
                    "MultilineTextField.TYPE.PREFORMATTED"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value of the multiline text field.\n\n This is required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<MultilineTextField label=\"Summary\" placeholder=\"Enter a short description\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<MultilineTextField\n  label=\"Summary\"\n  labelInline\n  placeholder=\"Enter a short description\"\n/>",
              "label": "With inline label"
            },
            {
              "sourceCode": "<MultilineTextField\n  type={MultilineTextField.TYPE.PREFORMATTED}\n  label=\"Build command\"\n  placeholder=\"npm run build\"\n/>",
              "label": "Preformatted"
            },
            {
              "sourceCode": "<MultilineTextField loading placeholder=\"Enter a short description\" />",
              "label": "Loading"
            },
            {
              "sourceCode": "<MultilineTextField disabled placeholder=\"Enter a short description\" />",
              "label": "Disabled"
            },
            {
              "sourceCode": "<MultilineTextField\n  readOnly\n  defaultValue=\"Some value\"\n  placeholder=\"Enter a short description\"\n/>",
              "label": "Read only"
            },
            {
              "sourceCode": "<MultilineTextField\n  description=\"Description value\"\n  placeholder=\"Enter a short description\"\n/>",
              "label": "With description"
            },
            {
              "sourceCode": "<MultilineTextField\n  invalid=\"Not enough text, needs more\"\n  placeholder=\"Enter a short description\"\n/>",
              "label": "With invalid message"
            }
          ]
        },
        {
          "description": "A generic NerdGraph mutation component that allows you to mutate anything\n from NerdGraph.",
          "name": "NerdGraphMutation",
          "usage": "import { NerdGraphMutation } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "MutationResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your mutation.",
                  "name": "data",
                  "type": "Object"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as children.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "mutate",
                      "type": "function",
                      "description": "Function to trigger a mutation from your UI."
                    },
                    {
                      "name": "mutationResult",
                      "type": "MutationResult",
                      "description": "Results of the\n        mutation."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL mutation, either as a string or a GraphQL document parsed\n into an AST by `graphql-tag`.",
              "isRequired": true,
              "name": "mutation",
              "type": {
                "name": "string|object",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "object",
                      "raw": "object",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "import { ngql } from 'nr1';\n\nconst mutation = ngql`\n  mutation($guid: EntityGuid!) {\n    taggingAddTagsToEntity(guid: $guid, tags: $tags) {\n      errors {\n        message\n      }\n    }\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "[]",
              "description": "List containing unsafe\n [experimental namespaces]INSERTLINKhttps://pages.datanerd.us/unified-api/nerd-graph-docs/graphql/schema_visibility.html#experimental-api-support\n your query opts in to using.",
              "isRequired": false,
              "name": "unsafeExperimentalNamespaces",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "{}",
              "description": "Object containing all of the variables your mutation needs to\n execute.",
              "isRequired": false,
              "name": "variables",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use NerdGraphMutation as a Promise instead of as a React\n component.",
              "name": "NerdGraphMutation.mutate",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the mutation options. Any\n        `NerdGraphMutation` prop is a valid option except `children`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "NerdGraphMutation.mutate({\n  mutation: ngql`\n    mutation($guid: EntityGuid!) {\n      taggingAddTagsToEntity(\n        guid: $guid\n        tags: { key: \"team\", values: [\"ui\"] }\n      ) {\n        errors {\n          message\n        }\n      }\n    }\n  `,\n  variables: {\n    guid: 'XXXXXXXXXXX',\n  },\n});",
              "label": "Do a mutation"
            },
            {
              "sourceCode": "function render() {\n  const mutation = ngql`\n    mutation($guid: EntityGuid!) {\n      taggingAddTagsToEntity(guid: $guid, tags: $tags) {\n        errors {\n          message\n        }\n      }\n    }\n  `;\n  const variables = {\n    guid: 'XXXXXXXXXXX',\n    tags: { key: 'team', values: ['ui'] },\n  };\n\n  // NOTE: Sometimes mutations take awhile so doing a refetch immediatly after a mutate\n  // doesn't show any change.\n  return (\n    <NerdGraphQuery query={query} variables={variables}>\n      {({ data, refetch }) => (\n        <>\n          <RenderData data={data} />\n          <Button\n            onClick={() =>\n              NerdGraphMutation.mutate({\n                mutation,\n                variables,\n              }).then(refetch)\n            }\n          >\n            Mutate\n          </Button>\n        </>\n      )}\n    </NerdGraphQuery>\n  );\n}",
              "label": "Do mutation and refetch query"
            }
          ]
        },
        {
          "description": "New Relic One SDK provides Query components based on ApolloClient's query\n components. These components are an abstraction layer making it easier to\n query NerdGraph without worrying about configuring Apollo Client and, for\n the most common use cases, without having to write GraphQL queries.\n\n A generic NerdGraph Query component that allows you to query anything\n from NerdGraph.",
          "name": "NerdGraphQuery",
          "usage": "import { NerdGraphQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "NerdGraphQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "NerdGraphQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "NerdGraphQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "NerdGraphQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "NerdGraphQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "NerdGraphQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "GraphQL query, either as a string or a GraphQL document parsed into\n an AST by the `gql` method of `nr1`.",
              "isRequired": true,
              "name": "query",
              "type": {
                "name": "string|object",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "object",
                      "raw": "object",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "import { ngql } from 'nr1';\n\nconst query = ngql`\n  {\n    actor {\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n`;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "[]",
              "description": "List containing unsafe\n [experimental namespaces]INSERTLINKhttps://pages.datanerd.us/unified-api/nerd-graph-docs/graphql/schema_visibility.html#experimental-api-support\n your query opts in to using.",
              "isRequired": false,
              "name": "unsafeExperimentalNamespaces",
              "type": {
                "name": "string[]",
                "meta": {
                  "itemTypes": {
                    "name": "string",
                    "raw": "string",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "{}",
              "description": "Object containing all of the variables your query needs to execute.",
              "isRequired": false,
              "name": "variables",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use NerdGraphQuery as a Promise instead of as a React\n component.",
              "name": "NerdGraphQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `NerdGraphQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "function render() {\n  const query = `\n        query($id: Int!) {\n            actor {\n                account(id: $id) {\n                    name\n                }\n            }\n        }\n    `;\n\n  const variables = {\n    id: 1,\n  };\n\n  return (\n    <NerdGraphQuery query={query} variables={variables}>\n      {({ loading, error, data }) => {\n        if (loading) {\n          return <Spinner />;\n        }\n\n        if (error) {\n          return 'Error!';\n        }\n\n        return <BlockText>{data.actor.account.name}</BlockText>;\n      }}\n    </NerdGraphQuery>\n  );\n}",
              "label": "Example 1"
            }
          ]
        },
        {
          "description": "[React context]INSERTLINKhttps://reactjs.org/docs/context.html#when-to-use-context\n to access the nerdlet URL state.",
          "name": "NerdletStateContext",
          "usage": "import { NerdletStateContext } from 'nr1'",
          "typeDefs": [],
          "propTypes": [],
          "methods": [
            {
              "description": "Methods to subscribe for context value updates.",
              "name": "NerdletStateContext.subscribe",
              "returnValue": {
                "description": null,
                "type": "undefined"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Function that will be called.",
                  "name": "subscriber",
                  "type": "function"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<NerdletStateContext.Consumer>\n  {(nerdletState) => <pre>{JSON.stringify(nerdletState, null, 4)}</pre>}\n</NerdletStateContext.Consumer>",
              "label": "Basic"
            }
          ]
        },
        {
          "description": "Fetch data to CDS via a NRQL query.\n\n The component can return data in a format compatible with the Chart\n component.",
          "name": "NrqlQuery",
          "usage": "import { NrqlQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Identifier of the account to execute the NRQL query against.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The \"accountId\" prop is              deprecated, use \"accountIds\" prop instead.",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Identifiers of accounts to execute the NRQL query against.",
              "isRequired": true,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the\n        query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "NrqlQuery.FORMAT_TYPE.CHART",
              "description": "Format of the response.",
              "isRequired": false,
              "name": "formatType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "NrqlQuery.FORMAT_TYPE.CHART",
                    "NrqlQuery.FORMAT_TYPE.RAW"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Offset to apply to the computed begin_time and end_time, in epoch\n milliseconds. This offset is only applied when the query is open\n ended, that is:\n\n 1.  end_time is not specified, and\n 2.  duration is specified.\n\n If these conditions are met and an offset value is present, the\n effective end_time will be set to offset milliseconds ending now,\n while the effective begin_time will be set to (offset + duration)\n milliseconds before that end_time.",
              "isRequired": false,
              "name": "offset",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Interval in millisecond to poll for new data or automatically set\n based on response data's metadata.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number|enum",
                "meta": {
                  "types": [
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    },
                    {
                      "name": "enum",
                      "raw": "oneOf",
                      "meta": {
                        "constants": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query.\n\n See\n [NRQL documentation for reference]INSERTLINKhttps://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-reference.",
              "isRequired": true,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Time range to scope NRQL query time range. When only duration is\n provided it uses duration to query from NOW back until DURATION\n (aka Open ended query). When begin_time and end_time are provided\n it uses them to query SINCE begin_time UNTIL end_time (aka Closed\n query).",
              "isRequired": false,
              "name": "timeRange",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "begin_time",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "number",
                        "raw": "number",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "duration",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "number",
                        "raw": "number",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "end_time",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "number",
                        "raw": "number",
                        "meta": null
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use NrqlQuery as a Promise instead of as a React\n component.",
              "name": "NrqlQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `NrqlQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<NrqlQuery\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n>\n  {({ data }) => {\n    if (data) {\n      // change colors to a nice pink.\n      data.forEach(({ metadata }) => (metadata.color = '#F00BA5'));\n    }\n\n    return <LineChart data={data} />;\n  }}\n</NrqlQuery>",
              "label": "Transform data"
            },
            {
              "sourceCode": "<NrqlQuery\n  pollInterval={2000}\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n>\n  {({ data }) => {\n    return <LineChart data={data} />;\n  }}\n</NrqlQuery>",
              "label": "Polling data"
            },
            {
              "sourceCode": "<NrqlQuery\n  pollInterval={NrqlQuery.AUTO_POLL_INTERVAL}\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n>\n  {({ data }) => {\n    return <LineChart data={data} />;\n  }}\n</NrqlQuery>",
              "label": "Auto polling"
            }
          ]
        },
        {
          "description": "Creates a pie chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "PieChart",
          "usage": "import { PieChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 128 }],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 256 }],\n   },\n   {\n     metadata: {\n       id: 'series-3',\n       name: 'Serie 3',\n       color: '#f86e40',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 300 }],\n   },\n   {\n     metadata: {\n       id: 'series-4',\n       name: 'Serie 4',\n       color: '#c21684',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 450 }],\n   },\n   {\n     metadata: {\n       id: 'series-5',\n       name: 'Serie 5',\n       color: '#51c9b7',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 170 }],\n   },\n   {\n     metadata: {\n       id: 'series-6',\n       name: 'Serie 6',\n       color: '#48d2f0',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 200 }],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding pie.",
              "isRequired": false,
              "name": "onClickPie",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding pie.",
              "isRequired": false,
              "name": "onHoverPie",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<PieChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<PieChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<PieChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 128 }],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 256 }],\n     },\n     {\n       metadata: {\n         id: 'series-3',\n         name: 'Serie 3',\n         color: '#f86e40',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 300 }],\n     },\n     {\n       metadata: {\n         id: 'series-4',\n         name: 'Serie 4',\n         color: '#c21684',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 450 }],\n     },\n     {\n       metadata: {\n         id: 'series-5',\n         name: 'Serie 5',\n         color: '#51c9b7',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 170 }],\n     },\n     {\n       metadata: {\n         id: 'series-6',\n         name: 'Serie 6',\n         color: '#48d2f0',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 200 }],\n     },\n   ];;\n\n  return <PieChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "[React context]INSERTLINKhttps://reactjs.org/docs/context.html#when-to-use-context\n to access the platform URL state.",
          "name": "PlatformStateContext",
          "usage": "import { PlatformStateContext } from 'nr1'",
          "typeDefs": [],
          "propTypes": [],
          "methods": [
            {
              "description": "Methods to subscribe for context value updates.",
              "name": "PlatformStateContext.subscribe",
              "returnValue": {
                "description": null,
                "type": "undefined"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Function that will be called.",
                  "name": "subscriber",
                  "type": "function"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<PlatformStateContext.Consumer>\n  {(platformState) => <pre>{JSON.stringify(platformState, null, 4)}</pre>}\n</PlatformStateContext.Consumer>",
              "label": "Basic"
            }
          ]
        },
        {
          "description": "`<Popover>` are toggleable overlays for displaying small overlays on demand.\n\n The `<Popover>` component requires you to provide a trigger with\n `<PopoverTrigger>` that will handle the opening/closing of the overlay, as\n well as the content for the overlay through `<PopoverBody />`.",
          "name": "Popover",
          "usage": "import { Popover } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "This component accepts children of two types:\n\n - `<PopoverTrigger>` to render the element that will open/close the\n   overlay.\n - `<PopoverBody>` to render content inside the overlay.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node[]",
                "meta": {
                  "itemTypes": {
                    "name": "node",
                    "raw": "node",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback to track when the `Popover` overlay opens or closes while in\n controlled mode. This method fires when the user actions the\n `PopoverTrigger`, or clicks outside of the `PopoverBody` when it is\n open.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.KeyboardEvent|React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "opened",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When true, the popover overlay will open on hover.",
              "isRequired": false,
              "name": "openOnHover",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When provided, `Popover` will be put into controlled mode. The\n boolean value will either open or close the popover overlay.",
              "isRequired": false,
              "name": "opened",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Popover>\n  <PopoverTrigger>Trigger</PopoverTrigger>\n  <PopoverBody>\n    <BlockText>Body</BlockText>\n  </PopoverBody>\n</Popover>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Popover>\n  <PopoverTrigger>\n    <Button>Trigger</Button>\n  </PopoverTrigger>\n  <PopoverBody>\n    <BlockText>Body</BlockText>\n  </PopoverBody>\n</Popover>",
              "label": "Button as trigger"
            },
            {
              "sourceCode": "<Popover>\n  <PopoverTrigger>\n    <TextField />\n  </PopoverTrigger>\n  <PopoverBody>\n    <BlockText>Body</BlockText>\n  </PopoverBody>\n</Popover>",
              "label": "TextField as trigger"
            },
            {
              "sourceCode": "<Popover>\n  <PopoverTrigger>\n    <Button>Trigger</Button>\n  </PopoverTrigger>\n  <PopoverBody>\n    <Card style={{ width: '250px' }}>\n      <CardBody>\n        <HeadingText>Heading</HeadingText>\n        <BlockText\n          spacingType={[\n            BlockText.SPACING_TYPE.MEDIUM,\n            BlockText.SPACING_TYPE.NONE,\n          ]}\n        >\n          Item content\n        </BlockText>\n        <BlockText>Item content</BlockText>\n      </CardBody>\n    </Card>\n    <PopoverFooter style={{ textAlign: 'right' }}>Info message</PopoverFooter>\n  </PopoverBody>\n</Popover>",
              "label": "With PopoverFooter"
            },
            {
              "sourceCode": "class ControlledPopover extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      opened: false,\n    };\n\n    this._onChange = this._onChange.bind(this);\n  }\n\n  _onChange(evt, opened) {\n    this.setState({ opened }, () =>\n      console.log('controlled state', evt, this.state),\n    );\n  }\n\n  render() {\n    const { opened } = this.state;\n\n    return (\n      <Popover opened={opened} onChange={this._onChange}>\n        <PopoverTrigger>\n          <Button>Trigger</Button>\n        </PopoverTrigger>\n        <PopoverBody>\n          <Card style={{ width: '250px' }}>\n            <CardBody>\n              <HeadingText>Heading</HeadingText>\n              <BlockText\n                spacingType={[\n                  BlockText.SPACING_TYPE.MEDIUM,\n                  BlockText.SPACING_TYPE.NONE,\n                ]}\n              >\n                Item content\n              </BlockText>\n              <BlockText>Item content</BlockText>\n            </CardBody>\n          </Card>\n          <PopoverFooter style={{ textAlign: 'right' }}>\n            Info message\n          </PopoverFooter>\n        </PopoverBody>\n      </Popover>\n    );\n  }\n}",
              "label": "Controlled Popover"
            }
          ]
        },
        {
          "description": "Child element of the `<Popover>` component.\n\n Contains the content of the Popover overlay.",
          "name": "PopoverBody",
          "usage": "import { PopoverBody } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render when Popover opens.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the overlay is closed when `Popover` is\n uncontrolled. Does not fire when `Popover` is controlled.",
              "isRequired": false,
              "name": "onClose",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the overlay is opened when `Popover` is\n uncontrolled. Does not fire when `Popover` is controlled.",
              "isRequired": false,
              "name": "onOpen",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the overlay is toggled when `Popover` is\n uncontrolled. Does not fire when `Popover` is controlled.",
              "isRequired": false,
              "name": "onToggle",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "opened",
                      "type": "boolean",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "PopoverBody.PLACEMENT_TYPE.BOTTOM_START",
              "description": "Specifies the placement of the popover body relative to the popover\n trigger. Default display is on the bottom start, but you can also\n choose to display it from the bottom end.",
              "isRequired": false,
              "name": "placementType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "PopoverBody.PLACEMENT_TYPE.BOTTOM_END",
                    "PopoverBody.PLACEMENT_TYPE.BOTTOM_START"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Element to place content at the end of a `PopoverBody` component.",
          "name": "PopoverFooter",
          "usage": "import { PopoverFooter } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to render inside the PopoverFooter.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Child element of the `<Popover>` component.\n\n Controls the opening/closing of the Popover overlay.",
          "name": "PopoverTrigger",
          "usage": "import { PopoverTrigger } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "This component can render in two ways, by directly passing a children\n React element, or by passing a render callback (function as\n children).\n\n When passing a React element directly, you can either use some of the\n compatible NR1 SDK Components like `<TextField>`, `<Button>`... or\n use your own Component.\n\n When using a render callback, you will receive an object of the\n following shape as an argument\n `{ opened: boolean, controlled: boolean }`.\n\n No matter if you're passing components directly or using a render\n callback, when rendering your own component as trigger, it should\n always expose a `focus` method in order to work properly.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|function",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "function",
                      "raw": "func",
                      "meta": {
                        "arguments": [],
                        "returnValue": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "The query group component enables you to parallelize, under a single\n callback, multiple queries done at once, and get the results of all of them.\n It can join queries both coming from the SDK and user-made queries, as long\n as they respect the standard contract:\n\n - Queries accept a `function` as a `children`.\n\n - This function returns an object with at least `loading` (as a `boolean`),\n   `data` (as an object) or `error` (as an `Error` instance).\n\n - Queries should be defined as Pure Components (or implement logic to prevent\n   calling the children function on every render).\n\n Each of the queries is defined declaratively, with the last child of the\n group being the callback function. This callback function will be called on\n every query transition with the new state, where each positional argument\n represents the individual response of the corresponding query.\n\n Each query can individually use a custom `fetchPolicyType`, which will be\n respected when grouping them.",
          "name": "QueryGroup",
          "usage": "import { QueryGroup } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": "[]",
              "description": "List of all the queries to be executed in parallel, followed by the\n callback that will be called for each transition change.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "(function|node)[]",
                "meta": {
                  "itemTypes": {
                    "name": "function|node",
                    "raw": "oneOfType",
                    "meta": {
                      "types": [
                        {
                          "name": "function",
                          "raw": "func",
                          "meta": {
                            "arguments": [],
                            "returnValue": []
                          }
                        },
                        {
                          "name": "node",
                          "raw": "node",
                          "meta": null
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<QueryGroup>\n  <UserQuery />\n  <AccountsQuery />\n\n  {(user, accounts) => {\n    if (user.loading || accounts.loading) {\n      return <Spinner />;\n    }\n\n    // Do stuff with the data!\n  }}\n</QueryGroup>",
              "label": "Example 1"
            }
          ]
        },
        {
          "description": "When a user can choose only one of the options provided\n\n The radio button state can be controlled through the `checked` property. If\n the `checked` prop is not set then the radio button will manage its own\n state.\n\n You can listen to the radio button events through the `onClick` or the\n `onChange` props.",
          "name": "Radio",
          "usage": "import { Radio } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "If `true`, the radio button is checked.\n\n If defined, it turns the input into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the radio button is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the selected state of the radio button\n changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": "Event source of the callback."
                    },
                    {
                      "name": "value",
                      "type": "any",
                      "description": "The value of the radio button."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the radio button is clicked.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Radio.SPACING_TYPE.EXTRA_LARGE",
                        "Radio.SPACING_TYPE.LARGE",
                        "Radio.SPACING_TYPE.MEDIUM",
                        "Radio.SPACING_TYPE.NONE",
                        "Radio.SPACING_TYPE.OMIT",
                        "Radio.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The value of the component. Used by the `<RadioGroup/>` to identify\n the selected radio button.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Radio onChange={(event) => alert('Foo')} label=\"Foo\" />\n  <Radio checked label=\"Bar\" />\n  <Radio checked disabled label=\"Baz\" />\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Radio onChange={(event) => alert('Foo')} info=\"Info value\" label=\"Foo\" />",
              "label": "With info"
            },
            {
              "sourceCode": "<Radio\n  onChange={(event) => alert('Foo')}\n  description=\"Description value\"\n  label=\"Foo\"\n/>",
              "label": "With description"
            },
            {
              "sourceCode": "<Radio\n  onChange={(event) => alert('Foo')}\n  invalid=\"Invalid message value\"\n  label=\"Foo\"\n/>",
              "label": "With invalid message"
            },
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isChecked: false,\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick(event) {\n    this.setState((state) => {\n      return { isChecked: !state.isChecked };\n    });\n  }\n\n  render() {\n    return (\n      <Radio\n        checked={this.state.isChecked}\n        onClick={this.onClick}\n        label=\"Radio button\"\n      />\n    );\n  }\n}",
              "label": "Controlled component"
            }
          ]
        },
        {
          "description": "A group of `<Radio>` buttons. The `<Radio>` buttons may either be direct\n children or descendants of the radio group. `<Radio>` buttons inside a radio\n group must have a unique `value` assigned.\n\n Once a radio group is established, selecting any `<Radio>` in that group\n automatically deselects any currently-selected `<Radio>` in the group.\n\n **Note**: Setting `value` will override `defaultValue` as it puts the\n `RadioGroup` into a controlled state. `value` will not override `Radio`\n components that have `checked` set, as `RadioGroup` will take control of\n uncontrolled `Radio` components and can't override controlled ones.\n\n The `onChange` event handler for `RadioGroup` will fire after any `onChange`\n event handler set on individual `Radio` components. However, it is highly\n recommended to only set one event handler for the whole group in a controlled\n `RadioGroup`.",
          "name": "RadioGroup",
          "usage": "import { RadioGroup } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content of the RadioGroup.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Default value of the radio group. The `<Radio>` with the matching\n value will be selected.\n\n Useful when you don't want to use a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the radio group value changes (a\n `<Radio>` in the group is selected).",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "react.ChangeEvent",
                      "description": "Event source of the callback."
                    },
                    {
                      "name": "value",
                      "type": "any",
                      "description": "The value of the selected radio button."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value of the radio group. The radio button with the matching value\n will be selected.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<RadioGroup defaultValue=\"2\">\n  <Radio label=\"Radio 1\" value=\"1\" />\n  <Radio label=\"Radio 2\" value=\"2\" />\n  <Radio label=\"Radio 3\" value=\"3\" />\n</RadioGroup>",
              "label": "Basic"
            },
            {
              "sourceCode": "<RadioGroup label=\"Radio Group\" info=\"Info value\" defaultValue=\"2\">\n  <Radio label=\"Radio 1\" value=\"1\" />\n  <Radio label=\"Radio 2\" value=\"2\" />\n  <Radio label=\"Radio 3\" value=\"3\" />\n</RadioGroup>",
              "label": "With label and info"
            },
            {
              "sourceCode": "<RadioGroup label=\"Radio Group\" labelInline defaultValue=\"2\">\n  <Radio label=\"Radio 1\" value=\"1\" />\n  <Radio label=\"Radio 2\" value=\"2\" />\n  <Radio label=\"Radio 3\" value=\"3\" />\n</RadioGroup>",
              "label": "With inline label"
            },
            {
              "sourceCode": "<RadioGroup\n  label=\"Radio Group\"\n  description=\"Description value\"\n  defaultValue=\"2\"\n>\n  <Radio label=\"Radio 1\" value=\"1\" />\n  <Radio label=\"Radio 2\" value=\"2\" />\n  <Radio label=\"Radio 3\" value=\"3\" />\n</RadioGroup>",
              "label": "With description"
            },
            {
              "sourceCode": "<RadioGroup\n  label=\"Radio Group\"\n  invalid=\"Invalid message value\"\n  defaultValue=\"2\"\n>\n  <Radio label=\"Radio 1\" value=\"1\" />\n  <Radio label=\"Radio 2\" value=\"2\" />\n  <Radio label=\"Radio 3\" value=\"3\" />\n</RadioGroup>",
              "label": "With invalid message"
            },
            {
              "sourceCode": "class MyNerdlet extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedValue: '2',\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(event, value) {\n    this.setState((state) => {\n      return { selectedValue: value };\n    });\n  }\n\n  render() {\n    return (\n      <RadioGroup value={this.state.selectedValue} onChange={this.onChange}>\n        <Radio label=\"Radio 1\" value=\"1\" />\n        <Radio label=\"Radio 2\" value=\"2\" />\n        <Radio label=\"Radio 3\" value=\"3\" />\n      </RadioGroup>\n    );\n  }\n}",
              "label": "Controlled component"
            }
          ]
        },
        {
          "description": "Use a Section Message to inform of the status of a section or a group of\n items.\n\n Section Messages can't be dismissed by the user. Remove them once the\n situation has been resolved or the user has taken the appropriate action.",
          "name": "SectionMessage",
          "usage": "import { SectionMessage } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "You may use up to two actions to help the user navigate to another\n view, trigger background events, or change the nerdlet/section\n behavior.",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "shape[]",
                "meta": {
                  "itemTypes": {
                    "name": "shape",
                    "raw": "shape",
                    "meta": {
                      "types": [
                        {
                          "name": "ariaLabel",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "label",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "onClick",
                          "description": "Callback fired any time the user clicks on the button.",
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "function",
                            "raw": "func",
                            "meta": {
                              "arguments": [
                                {
                                  "name": "event",
                                  "type": "React.MouseEvent",
                                  "description": ""
                                }
                              ],
                              "returnValue": []
                            }
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "to",
                          "description": "Location object or url string to link to.",
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "shape|string",
                            "raw": "oneOfType",
                            "meta": {
                              "types": [
                                {
                                  "name": "shape",
                                  "raw": "shape",
                                  "meta": {
                                    "types": [
                                      {
                                        "name": "pathname",
                                        "description": null,
                                        "deprecation": null,
                                        "examples": [],
                                        "isRequired": true,
                                        "type": {
                                          "name": "string",
                                          "raw": "string",
                                          "meta": null
                                        },
                                        "defaultValue": null
                                      },
                                      {
                                        "name": "search",
                                        "description": null,
                                        "deprecation": null,
                                        "examples": [],
                                        "isRequired": false,
                                        "type": {
                                          "name": "string",
                                          "raw": "string",
                                          "meta": null
                                        },
                                        "defaultValue": null
                                      },
                                      {
                                        "name": "hash",
                                        "description": null,
                                        "deprecation": null,
                                        "examples": [],
                                        "isRequired": false,
                                        "type": {
                                          "name": "string",
                                          "raw": "string",
                                          "meta": null
                                        },
                                        "defaultValue": null
                                      }
                                    ]
                                  }
                                },
                                {
                                  "name": "string",
                                  "raw": "string",
                                  "meta": null
                                }
                              ]
                            }
                          },
                          "defaultValue": null
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Use it to provide further details and explain, if any, the steps for\n the user to take.\n\n Note: `title` and `description` props are optional, but at least one\n of them has to be provided.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Use it to provide the main message.\n\n Note: `title` and `description` props are optional, but at least one\n of them has to be provided.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "SectionMessage.TYPE.INFO",
              "description": "Type can be:\n\n - Info (default) - Use it to indicate that an something is new, that\n   an item has just been created, or to provide help.\n\n - Success - Use it to communicate positive changes or conditions.\n\n - Warning - Use it to communicate a possible problem, undesired\n   situation, cautionary advice, or advanced notice of some sort.\n\n - Critical - Use it to communicate a problem.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "SectionMessage.TYPE.CRITICAL",
                    "SectionMessage.TYPE.INFO",
                    "SectionMessage.TYPE.SUCCESS",
                    "SectionMessage.TYPE.WARNING"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Stack\n  directionType={Stack.DIRECTION_TYPE.VERTICAL}\n  horizontalType={Stack.HORIZONTAL_TYPE.FILL}\n>\n  <StackItem>\n    <SectionMessage\n      description=\"Your Metric query has been transformed into a compatible query with the previous Infrastructure metric format.\"\n      actions={[{ label: 'See our docs', to: 'https://support.newrelic.com/' }]}\n    />\n  </StackItem>\n  <StackItem>\n    <SectionMessage\n      type={SectionMessage.TYPE.SUCCESS}\n      title=\"File has been uploaded\"\n      description=\"We are unable to save any progress at this time.\"\n      actions={[\n        { label: 'Primary action', onClick: console.log },\n        { label: 'Secondary action', onClick: console.log },\n      ]}\n    />\n  </StackItem>\n  <StackItem>\n    <SectionMessage\n      type={SectionMessage.TYPE.WARNING}\n      title=\"Cannot connect to the database\"\n      description=\"We are unable to save any progress at this time.\"\n      actions={[\n        { label: 'Primary action', onClick: console.log },\n        { label: 'Secondary action', onClick: console.log },\n      ]}\n    />\n  </StackItem>\n  <StackItem>\n    <SectionMessage\n      type={SectionMessage.TYPE.CRITICAL}\n      title=\"Error on the request\"\n      description=\"We tried to transform your query into a query that is compatible with both new Metric and previous Infrastructure metric formats, but the transformation process failed.\"\n      actions={[\n        { label: 'Contact support', to: 'https://support.newrelic.com/' },\n      ]}\n    />\n  </StackItem>\n</Stack>",
              "label": "Types"
            }
          ]
        },
        {
          "description": "A component which displays a set of buttons, only one of which can be active\n at a time. Can be used in 'controlled mode' (by setting the `value` prop) or\n uncontrolled.",
          "name": "SegmentedControl",
          "usage": "import { SegmentedControl } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a descriptive label for this control, e.g. \"Theme selector\".",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "An array of maximum 5 `<SegmentedControlItem />`s describing the\n clickable segments in the control. Elements can either have just a\n `label`, or a `label` and an `icon`, but must be uniform across the\n children. All elements can have an optional `disabled` prop to\n disable that button.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Called whenever a `<SegmentedControlItem />` is clicked, with that\n element's `value` prop. Will also fire if the element currently\n selected is clicked again. You can use this callback to update the\n `value` prop if you want to control its state.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": ""
                    },
                    {
                      "name": "value",
                      "type": "any",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "SegmentedControl.SPACING_TYPE.EXTRA_LARGE",
                        "SegmentedControl.SPACING_TYPE.LARGE",
                        "SegmentedControl.SPACING_TYPE.MEDIUM",
                        "SegmentedControl.SPACING_TYPE.NONE",
                        "SegmentedControl.SPACING_TYPE.OMIT",
                        "SegmentedControl.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "SegmentedControl.TYPE.NORMAL",
              "description": "Set this to `SegmentedControl.TYPE.ICONS_ONLY` to only show icons.\n\n Will be ignored if icons are not found in the children.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "SegmentedControl.TYPE.ICONS_ONLY",
                    "SegmentedControl.TYPE.NORMAL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Set the currently-selected option in the control by updating this\n prop.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<SegmentedControl onChange={(evt, value) => console.log(evt, value)}>\n  <SegmentedControlItem value=\"one\" label=\"One\" />\n  <SegmentedControlItem value=\"two\" label=\"Two\" />\n  <SegmentedControlItem disabled value=\"three\" label=\"Three\" />\n  <SegmentedControlItem value=\"four\" label=\"Four\" />\n</SegmentedControl>",
              "label": "Basic"
            },
            {
              "sourceCode": "<SegmentedControl onChange={(evt, value) => console.log(evt, value)}>\n  <SegmentedControlItem value=\"one\" label=\"One\" />\n  <SegmentedControlItem value=\"two\" label=\"Two\" />\n  <SegmentedControlItem\n    hint=\"The third item\"\n    disabled\n    value=\"three\"\n    label=\"Three\"\n  />\n  <SegmentedControlItem hint=\"The fourth item\" value=\"four\" label=\"Four\" />\n</SegmentedControl>",
              "label": "With some hints"
            },
            {
              "sourceCode": "class TestComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: 'one',\n    };\n  }\n\n  render() {\n    return (\n      <SegmentedControl\n        value={this.state.value}\n        onChange={(evt, value) => this.setState({ value })}\n      >\n        <SegmentedControlItem value=\"one\" label=\"One\" />\n        <SegmentedControlItem value=\"two\" label=\"Two\" />\n        <SegmentedControlItem disabled value=\"three\" label=\"Three\" />\n        <SegmentedControlItem value=\"four\" label=\"Four\" />\n      </SegmentedControl>\n    );\n  }\n}",
              "label": "Controlled"
            },
            {
              "sourceCode": "class TestComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: 'one',\n    };\n  }\n\n  render() {\n    return (\n      <SegmentedControl\n        value={this.state.value}\n        onChange={(evt, value) => this.setState({ value })}\n      >\n        <SegmentedControlItem\n          label=\"One\"\n          value=\"one\"\n          iconType={\n            SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE\n          }\n        />\n        <SegmentedControlItem\n          label=\"Two\"\n          value=\"two\"\n          iconType={\n            SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER\n          }\n        />\n        <SegmentedControlItem\n          label=\"Three\"\n          value=\"three\"\n          iconType={SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__NUMBER}\n        />\n      </SegmentedControl>\n    );\n  }\n}",
              "label": "With icons"
            },
            {
              "sourceCode": "class TestComponent extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: 'one',\n    };\n  }\n\n  render() {\n    return (\n      <SegmentedControl\n        type={SegmentedControl.TYPE.ICONS_ONLY}\n        value={this.state.value}\n        onChange={(evt, value) => this.setState({ value })}\n      >\n        <SegmentedControlItem\n          label=\"One\"\n          value=\"one\"\n          iconType={\n            SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE\n          }\n        />\n        <SegmentedControlItem\n          label=\"Two\"\n          value=\"two\"\n          iconType={\n            SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER\n          }\n          hint=\"The second item.\"\n        />\n        <SegmentedControlItem\n          label=\"Three\"\n          value=\"three\"\n          iconType={SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__NUMBER}\n          hint=\"The third item.\"\n        />\n      </SegmentedControl>\n    );\n  }\n}",
              "label": "Icons only with some hints"
            }
          ]
        },
        {
          "description": "Child element of the `<SegmentedControl>` component.",
          "name": "SegmentedControlItem",
          "usage": "import { SegmentedControlItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": "false",
              "description": "Disable this item.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Optional extended description for this item. Will be shown in a\n tooltip.",
              "isRequired": false,
              "name": "hint",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The icon to show for this item.",
              "isRequired": false,
              "name": "iconType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__AREA_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__BAR_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__BILLBOARD_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__BULLET_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__CHART__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_FILTER",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__DASHBOARD__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__EVENT_FEED_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__HEATMAP_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__LINE_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__MARKDOWN",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__PIE_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__SCATTER_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__SERVICE_MAP_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_BAR_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__STACKED_HORIZONTAL_BAR_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__TABLE_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__TRAFFIC_LIGHTS_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATAVIZ__DATAVIZ__VERTICAL_BAR_CHART",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__DATE__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DATE_AND_TIME__DATE_AND_TIME__TIME__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__ATTACHMENT",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__DOCUMENTATION",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__EMAIL__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FILE__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__FOLDER__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.DOCUMENTS__DOCUMENTS__NOTES__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__ANOMALIES",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__A_INSPECT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CLUSTER__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__CPU",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__DESKTOP__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MEMORY",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__MOBILE__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__A_INSPECT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__NETWORK__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_CONFIGURE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_INSPECT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_PAUSE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__SERVER__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__HARDWARE__STORAGE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CLUSTER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_CONTAINER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_DEPLOYMENT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_MASTER_NODE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NAMESPACE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_NODE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_POD",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__KUBERNETES__K8S_SERVICE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__ALL_ENTITIES",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__APPLICATION__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__BROWSER__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CLOUD",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CODE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTAINER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CONTROL_CENTER",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__CORRELATION_REASONING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DATABASE__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DECISIONS",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DESTINATIONS",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_CONNECTION",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__DOWNSTREAM_DEPLOYMENT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__EVENT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__FEED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LIVE_VIEW",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__LOGS",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MOBILE_APPLICATION__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__MONITORING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__NODE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__OVERVIEW",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PATHWAY",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__PLUGIN__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__QUERY",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__A_CHECKED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_DISABLED",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_ERROR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_OK",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SERVICE__S_WARNING",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SOURCES",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__STACK_TRACE",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHESIZED_ENTITY",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYNTHETICS_MONITOR",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__SYSTEM",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRACES",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__TRAFFIC",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_CONNECTION",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__UPSTREAM_DEPLOYMENT",
                    "SegmentedControlItem.ICON_TYPE.HARDWARE_AND_SOFTWARE__SOFTWARE__WORKLOADS",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_BOTTOM__V_ALTERNATE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_BOTTOM_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_DIAGONAL_TOP_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_HORIZONTAL",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_LEFT__V_ALTERNATE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_RIGHT__V_ALTERNATE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_TOP__V_ALTERNATE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__ARROW_VERTICAL",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__EXPAND",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__GO_TO",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__MOVE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__RESIZE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__RETURN_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__RETURN_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__SHRINK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__ARROW__SORT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_LEFT__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_TOP",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_TOP__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_TOP__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CARET__CARET_TOP__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_BOTTOM__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_LEFT__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_RIGHT__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__CHEVRON__CHEVRON_TOP__WEIGHT_BOLD__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__INFO__ANNOUNCEMENT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__INFO__HELP",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__INFO__INFO",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__INFO__INFO__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ADJUST",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ALERT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_OFF",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ALERT__S_ON",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__ARCHIVE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__CENTER",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__CLOSE__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__CONFIGURE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO_CLIPBOARD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__DOWNLOAD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__DRAG",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__EDIT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__EXPORT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__EXTERNAL_LINK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FILTER__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__FOLLOW",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__GROUP",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__GROUP__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__HIDE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__HIDE_OTHERS",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__HIGHLIGHT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__IMPORT",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__MORE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__PAUSE_ALTERNATE__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__PIN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__PLAY",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__PLAY_ALTERNATE__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__REARRANGE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__REDO",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__REFRESH",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__REMOVE__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__REPLY__A_REPLY",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SEARCH__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SELECTION__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SHARE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SHARE_LINK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SHOW",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_BACK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__SKIP_FORWARD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__TAG",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__TRASH",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__TV_MODE__A_TV_MODE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__UNDO",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__UNPIN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__OPERATIONS__UPLOAD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__PLACEHOLDERS__CUSTOM_PLACEHOLDER",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__PLACEHOLDERS__ICON_PLACEHOLDER",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__ASTERISK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__CHECKMARK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__CHECKMARK__V_ALTERNATE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__CLOSE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__DOLLAR_SIGN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__EXCLAMATION__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__MINUS",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__MINUS__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__NUMBER",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__PLUS",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__PLUS__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__TIMES",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__TIMES__SIZE_8",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__SIGN__TIMES__V_ALTERNATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__CLOSED",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__CRITICAL",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__CRITICAL__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__DISABLED",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__ENABLED",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__HEALTHY",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__LOADING",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__LOCK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__OPEN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__PRIVATE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__PUBLIC",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__UNAVAILABLE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__UNLOCK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__WARNING",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__STATE__WARNING__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__ENTER_FULL_SCREEN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__EXIT_FULL_SCREEN",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__GRID_VIEW",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__HIGH_DENSITY_VIEW",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__LAYER_LIST",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__LIST_VIEW",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__SIXTH_SENSE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_DARK",
                    "SegmentedControlItem.ICON_TYPE.INTERFACE__VIEW__THEME_TOGGLE__S_LIGHT",
                    "SegmentedControlItem.ICON_TYPE.LOCATION__LOCATION__HOME",
                    "SegmentedControlItem.ICON_TYPE.LOCATION__LOCATION__MAP",
                    "SegmentedControlItem.ICON_TYPE.LOCATION__LOCATION__PIN",
                    "SegmentedControlItem.ICON_TYPE.LOCATION__LOCATION__WORLD",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__EVENTS__COMMENT",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__EVENTS__COMMENT__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__EVENTS__FAVORITE",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__EVENTS__FAVORITE__WEIGHT_BOLD",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__EVENTS__LIKE",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__ORGANIZATION",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__ORGANIZATION__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__TEAM",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__TEAM__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__TEAM__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__TEAM__A_REMOVE",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__USER",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__USER__A_ADD",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__USER__A_EDIT",
                    "SegmentedControlItem.ICON_TYPE.PROFILES__USERS__USER__A_REMOVE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The label for this item, either displayed or, in the case of\n `SegmentedControl.TYPE.ICONS_ONLY`, used only for accessibility.",
              "isRequired": true,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The value for this item, used for setting the currently selected\n item.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "The `<Select>` component is a variant of the `<Dropdown>` one, especially\n targeted to be used in form components. The main differences are:\n\n - It can only work in declarative mode, i.e. it cannot be virtualized by\n   passing a child function.\n\n - Every `<SelectItem>` accepts a `value` prop, that will be matched against\n   the `value` passed to `<Select>`, and the right option will be selected. As\n   opposed to a traditional `<SELECT>` DOM element, any reference can be used\n   as a value, both primitives and objects.\n\n - Items do not accept an `onClick`. Instead, you will get the value of the\n   selected option by receiving it from an `onChange` method.\n\n The component is always controlled, meaning you have to update its `value`\n from an `onChange` callback for it to reflect the newly selected property.",
          "name": "Select",
          "usage": "import { Select } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a descriptive label for this control, e.g. \"Accounts\".",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "List of options expressed as a set of `<SelectItem>`s.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, the select is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the value of the select is changed.\n\n You can get the value back as the second argument of the `onChange`\n event.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "value",
                      "type": "any",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Select.SPACING_TYPE.EXTRA_LARGE",
                        "Select.SPACING_TYPE.LARGE",
                        "Select.SPACING_TYPE.MEDIUM",
                        "Select.SPACING_TYPE.NONE",
                        "Select.SPACING_TYPE.OMIT",
                        "Select.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value matching the item selected.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Select onChange={(evt, value) => alert(value)}>\n  <SelectItem value=\"a\">Value is \"a\"</SelectItem>\n  <SelectItem value=\"b\">Value is \"b\"</SelectItem>\n  <SelectItem value=\"c\">Value is \"c\"</SelectItem>\n</Select>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Select label=\"Items\" info=\"Info value\" onChange={(evt, value) => alert(value)}>\n  <SelectItem value=\"a\">Value is \"a\"</SelectItem>\n  <SelectItem value=\"b\">Value is \"b\"</SelectItem>\n  <SelectItem value=\"c\">Value is \"c\"</SelectItem>\n</Select>",
              "label": "With label and info"
            },
            {
              "sourceCode": "<Select label=\"Items\" labelInline onChange={(evt, value) => alert(value)}>\n  <SelectItem value=\"a\">Value is \"a\"</SelectItem>\n  <SelectItem value=\"b\">Value is \"b\"</SelectItem>\n  <SelectItem value=\"c\">Value is \"c\"</SelectItem>\n</Select>",
              "label": "With inline label"
            },
            {
              "sourceCode": "<Select description=\"Description value\" onChange={(evt, value) => alert(value)}>\n  <SelectItem value=\"a\">Value is \"a\"</SelectItem>\n  <SelectItem value=\"b\">Value is \"b\"</SelectItem>\n  <SelectItem value=\"c\">Value is \"c\"</SelectItem>\n</Select>",
              "label": "With description"
            },
            {
              "sourceCode": "<Select invalid=\"Invalid message value\" onChange={(evt, value) => alert(value)}>\n  <SelectItem value=\"a\">Value is \"a\"</SelectItem>\n  <SelectItem value=\"b\">Value is \"b\"</SelectItem>\n  <SelectItem value=\"c\">Value is \"c\"</SelectItem>\n</Select>",
              "label": "With invalid message"
            },
            {
              "sourceCode": "class ControlledSelect extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      value: null,\n    };\n\n    this._onChange = this._onChange.bind(this);\n  }\n\n  _onChange(event, value) {\n    this.setState({ value });\n  }\n\n  render() {\n    return (\n      <Select onChange={this._onChange} value={this.state.value}>\n        <SelectItem value=\"1\">Item 1</SelectItem>\n        <SelectItem value=\"2\">Item 2</SelectItem>\n        <SelectItem value=\"3\">Item 3</SelectItem>\n      </Select>\n    );\n  }\n}",
              "label": "Controlled component"
            }
          ]
        },
        {
          "description": "Child element of the `<Select>` component.",
          "name": "SelectItem",
          "usage": "import { SelectItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Text to be shown as the option. Note only text is supported as a\n children.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value of the selected property. Can be any kind of value, including\n non-string primitives and objects.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Provides spacing to any wrapped component. Spacing is provided as a tuple\n that can contain zero, one, two, three or four values. Each of these values\n is coming from the TYPE static property.\n\n The structure of the tuple is very similar to how `margin` or `padding`\n properties work: specifying one value replicates them across the four sides,\n two across `top`/`bottom` and `left`/`right`, etc. If you are willing to omit\n a specific value, while passing others, you can use `OMIT` as a placeholder.\n The space on the side (or sides) where it is used will be left intact.\n\n Other components from the SDK have spacing capabilities built-in. If you\n would like to replicate the same capability on your own component, you can\n use `Spacing.add` and pass the component; the component returned by the\n method will contain the `type` prop as well as the statics.",
          "name": "Spacing",
          "usage": "import { Spacing } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Element to space. Spacing can only be applied to one signle element\n at a time; to space multiple ones, each of them needs to be wrapped\n individually.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `TYPE.OMIT`.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Spacing.TYPE.EXTRA_LARGE",
                        "Spacing.TYPE.LARGE",
                        "Spacing.TYPE.MEDIUM",
                        "Spacing.TYPE.NONE",
                        "Spacing.TYPE.OMIT",
                        "Spacing.TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "<Spacing type={[Spacing.TYPE.MEDIUM]}>\n  <Button>Spaced button</Button>\n</Spacing>",
                  "label": "Basic"
                },
                {
                  "sourceCode": "<Spacing type={[Spacing.TYPE.OMIT, Spacing.TYPE.LARGE]}>\n  <Button>Spaced button (only left and right)</Button>\n</Spacing>",
                  "label": "Omit margins"
                }
              ]
            }
          ],
          "methods": [
            {
              "description": "Enhances the given component by adding a `spacingType` prop, and makes\n use of it so that the component can automatically be spaced using it.",
              "name": "Spacing.add",
              "returnValue": {
                "description": "",
                "type": "React.ComponentType"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Class or function component",
                  "name": "Base",
                  "type": "React.ComponentType"
                }
              ]
            }
          ],
          "examples": []
        },
        {
          "description": "Spinners are used to indicate to your users that content is loading on the\n screen.",
          "name": "Spinner",
          "usage": "import { Spinner } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the spinner will be displayed inline.",
              "isRequired": false,
              "name": "inline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Spinner.SPACING_TYPE.EXTRA_LARGE",
                        "Spinner.SPACING_TYPE.LARGE",
                        "Spinner.SPACING_TYPE.MEDIUM",
                        "Spinner.SPACING_TYPE.NONE",
                        "Spinner.SPACING_TYPE.OMIT",
                        "Spinner.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Spinner.TYPE.CIRCLE",
              "description": "Type of loading animation.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Spinner.TYPE.CIRCLE",
                    "Spinner.TYPE.DOT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Spinner />",
              "label": "Basic"
            },
            {
              "sourceCode": "<Spinner type={Spinner.TYPE.DOT} />",
              "label": "Dot"
            },
            {
              "sourceCode": "<Spinner inline />",
              "label": "Inline"
            }
          ]
        },
        {
          "description": "Stack is a 1-dimensional layout system with options to control the direction,\n spacing, distribution and relative sizing of its children elements.",
          "name": "Stack",
          "usage": "import { Stack } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Stack items to display.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Stack.DIRECTION_TYPE.HORIZONTAL",
              "description": "Direction of the stack items.",
              "isRequired": false,
              "name": "directionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Stack.DIRECTION_TYPE.HORIZONTAL",
                    "Stack.DIRECTION_TYPE.VERTICAL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the stack to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the stack to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Stack.GAP_TYPE.MEDIUM",
              "description": "Space between each stack item.",
              "isRequired": false,
              "name": "gapType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Stack.GAP_TYPE.EXTRA_LARGE",
                    "Stack.GAP_TYPE.LARGE",
                    "Stack.GAP_TYPE.MEDIUM",
                    "Stack.GAP_TYPE.NONE",
                    "Stack.GAP_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Stack.HORIZONTAL_TYPE.LEFT",
              "description": "Sets the horizontal alignment and distribution of the stack items.",
              "isRequired": false,
              "name": "horizontalType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Stack.HORIZONTAL_TYPE.CENTER",
                    "Stack.HORIZONTAL_TYPE.FILL",
                    "Stack.HORIZONTAL_TYPE.FILL_EVENLY",
                    "Stack.HORIZONTAL_TYPE.LEFT",
                    "Stack.HORIZONTAL_TYPE.RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Visually draws the boxes of the Stack and its StackItems.",
              "isRequired": false,
              "name": "preview",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Stack.SPACING_TYPE.EXTRA_LARGE",
                        "Stack.SPACING_TYPE.LARGE",
                        "Stack.SPACING_TYPE.MEDIUM",
                        "Stack.SPACING_TYPE.NONE",
                        "Stack.SPACING_TYPE.OMIT",
                        "Stack.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Stack.VERTICAL_TYPE.TOP",
              "description": "Sets the vertical alignment and distribution of the stack items.",
              "isRequired": false,
              "name": "verticalType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Stack.VERTICAL_TYPE.BOTTOM",
                    "Stack.VERTICAL_TYPE.CENTER",
                    "Stack.VERTICAL_TYPE.FILL",
                    "Stack.VERTICAL_TYPE.FILL_EVENLY",
                    "Stack.VERTICAL_TYPE.TOP"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Example--stack\">\n  <div className=\"nr1-Example--stack--directionHorizontal\">\n    <span className=\"nr1-Example--stack--title\">Horizontal (default)</span>\n    <Stack preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<div className=\"nr1-Example--stack\">\n  <div className=\"nr1-Example--stack--directionHorizontal\">\n    <span className=\"nr1-Example--stack--title\">Horizontal (default)</span>\n    <Stack directionType={Stack.DIRECTION_TYPE.HORIZONTAL} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--directionVertical\">\n    <span className=\"nr1-Example--stack--title\">Vertical</span>\n    <Stack directionType={Stack.DIRECTION_TYPE.VERTICAL} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n</div>",
              "label": "Direction"
            },
            {
              "sourceCode": "<div className=\"nr1-Example--stack\">\n  <div className=\"nr1-Example--stack--gapNone\">\n    <span className=\"nr1-Example--stack--title\">None</span>\n    <Stack gapType={Stack.GAP_TYPE.NONE} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--gapSmall\">\n    <span className=\"nr1-Example--stack--title\">Small</span>\n    <Stack gapType={Stack.GAP_TYPE.SMALL} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--gapMedium\">\n    <span className=\"nr1-Example--stack--title\">Medium (default)</span>\n    <Stack gapType={Stack.GAP_TYPE.MEDIUM} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--gapLarge\">\n    <span className=\"nr1-Example--stack--title\">Large</span>\n    <Stack gapType={Stack.GAP_TYPE.LARGE} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--gapExtraLarge\">\n    <span className=\"nr1-Example--stack--title\">Extra large</span>\n    <Stack gapType={Stack.GAP_TYPE.EXTRA_LARGE} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n</div>",
              "label": "Gap"
            },
            {
              "sourceCode": "<div className=\"nr1-Example--stack\">\n  <div className=\"nr1-Example--stack--horizontalAlignmentLeft\">\n    <span className=\"nr1-Example--stack--title\">Left (default)</span>\n    <Stack horizontalType={Stack.HORIZONTAL_TYPE.LEFT} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--horizontalAlignmentCenter\">\n    <span className=\"nr1-Example--stack--title\">Center</span>\n    <Stack horizontalType={Stack.HORIZONTAL_TYPE.CENTER} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--horizontalAlignmentRight\">\n    <span className=\"nr1-Example--stack--title\">Right</span>\n    <Stack horizontalType={Stack.HORIZONTAL_TYPE.RIGHT} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--horizontalAlignmentFill\">\n    <span className=\"nr1-Example--stack--title\">Fill</span>\n    <Stack horizontalType={Stack.HORIZONTAL_TYPE.FILL} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--horizontalAlignmentFillEvenly\">\n    <span className=\"nr1-Example--stack--title\">Fill evenly</span>\n    <Stack horizontalType={Stack.HORIZONTAL_TYPE.FILL_EVENLY} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n</div>",
              "label": "Horizontal alignment"
            },
            {
              "sourceCode": "<div className=\"nr1-Example--stack\">\n  <div className=\"nr1-Example--stack--verticalAlignmentTop\">\n    <span className=\"nr1-Example--stack--title\">Top (default)</span>\n    <Stack verticalType={Stack.VERTICAL_TYPE.TOP} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--verticalAlignmentCenter\">\n    <span className=\"nr1-Example--stack--title\">Center</span>\n    <Stack verticalType={Stack.VERTICAL_TYPE.CENTER} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--verticalAlignmentBottom\">\n    <span className=\"nr1-Example--stack--title\">Bottom</span>\n    <Stack verticalType={Stack.VERTICAL_TYPE.BOTTOM} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--verticalAlignmentFill\">\n    <span className=\"nr1-Example--stack--title\">Fill</span>\n    <Stack verticalType={Stack.VERTICAL_TYPE.FILL} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n\n  <div className=\"nr1-Example--stack--verticalAlignmentFillEvenly\">\n    <span className=\"nr1-Example--stack--title\">Fill evenly</span>\n    <Stack verticalType={Stack.VERTICAL_TYPE.FILL_EVENLY} preview>\n      <StackItem>\n        <div className=\"nr1-Box--a\">1</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--b\">2</div>\n      </StackItem>\n      <StackItem>\n        <div className=\"nr1-Box--c\">3</div>\n      </StackItem>\n    </Stack>\n  </div>\n</div>",
              "label": "Vertical alignment"
            }
          ]
        },
        {
          "description": "Creates a stacked bar chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "StackedBarChart",
          "usage": "import { StackedBarChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 128 }],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 256 }],\n   },\n   {\n     metadata: {\n       id: 'series-3',\n       name: 'Serie 3',\n       color: '#f86e40',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 300 }],\n   },\n   {\n     metadata: {\n       id: 'series-4',\n       name: 'Serie 4',\n       color: '#c21684',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 450 }],\n   },\n   {\n     metadata: {\n       id: 'series-5',\n       name: 'Serie 5',\n       color: '#51c9b7',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 170 }],\n   },\n   {\n     metadata: {\n       id: 'series-6',\n       name: 'Serie 6',\n       color: '#48d2f0',\n       viz: 'main',\n       units_data: {\n         y: 'BYTES',\n       }\n     },\n     data: [{ y: 200 }],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding stacked bar.",
              "isRequired": false,
              "name": "onClickStackedBar",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding stacked bar.",
              "isRequired": false,
              "name": "onHoverStackedBar",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<StackedBarChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<StackedBarChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<StackedBarChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 128 }],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 256 }],\n     },\n     {\n       metadata: {\n         id: 'series-3',\n         name: 'Serie 3',\n         color: '#f86e40',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 300 }],\n     },\n     {\n       metadata: {\n         id: 'series-4',\n         name: 'Serie 4',\n         color: '#c21684',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 450 }],\n     },\n     {\n       metadata: {\n         id: 'series-5',\n         name: 'Serie 5',\n         color: '#51c9b7',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 170 }],\n     },\n     {\n       metadata: {\n         id: 'series-6',\n         name: 'Serie 6',\n         color: '#48d2f0',\n         viz: 'main',\n         units_data: {\n           y: 'BYTES',\n         }\n       },\n       data: [{ y: 200 }],\n     },\n   ];;\n\n  return <StackedBarChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Child element of the `<Stack>` component.\n\n The `<Stack>` may alter the height, width, order of the stack item based on\n the layout that was selected.",
          "name": "StackItem",
          "usage": "import { StackItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to display inside the stack item.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the item fills the remaining space. To make it work, you\n will need to extend your stack to occupy all available space in the\n direction of your items. This can be achieved by using the\n `fullWidth` or `fullHeight` props of the stack, depending on its\n direction.",
              "isRequired": false,
              "name": "grow",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the item shrinks if necessary.",
              "isRequired": false,
              "name": "shrink",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "",
          "name": "Steps",
          "usage": "import { Steps } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Steps items to render inside the component.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The initial step that should be active.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Function called when the user clicks over a step.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": "Event source of the callback."
                    },
                    {
                      "name": "stepValue",
                      "type": "any",
                      "description": "The value of the step."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Steps.SPACING_TYPE.EXTRA_LARGE",
                        "Steps.SPACING_TYPE.LARGE",
                        "Steps.SPACING_TYPE.MEDIUM",
                        "Steps.SPACING_TYPE.NONE",
                        "Steps.SPACING_TYPE.OMIT",
                        "Steps.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The step with the matching value will be marked as active. Active\n steps are automatically expanded. If you don't want the step to be\n expanded you should mark it as `disabled`.\n\n If defined, it turns the component into a\n [controlled componentINSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Steps defaultValue=\"monitor-workflows\">\n  <StepsItem label=\"Add your data\" value=\"add-data\" checked>\n    Connect your data to New Relic and gain insights in 5 minutes.\n  </StepsItem>\n  <StepsItem label=\"Explore your data\" value=\"explore-data\" checked>\n    Traverse your entire stack in one place.\n  </StepsItem>\n  <StepsItem label=\"Monitor critical workflows\" value=\"monitor-workflows\">\n    <Stack\n      directionType={Stack.DIRECTION_TYPE.VERTICAL}\n      gapType={Stack.GAP_TYPE.LARGE}\n    >\n      <StackItem>\n        Detect outages and poor performance before your users notice.\n      </StackItem>\n      <StackItem>\n        <Button sizeType={Button.SIZE_TYPE.SMALL}>Learn more</Button>\n      </StackItem>\n    </Stack>\n  </StepsItem>\n  <StepsItem label=\"Configure an alert\" value=\"configure-alert\">\n    Configure an alert and we'll tell you when to worry.\n  </StepsItem>\n  <StepsItem label=\"Query your data\" value=\"query-data\">\n    Write your first query in our powerful New Relic Query Language (NRQL).\n  </StepsItem>\n  <StepsItem label=\"Set up a dashboard\" value=\"setup-dashboard\">\n    Create and share dashboards that matter to you and your team.\n  </StepsItem>\n</Steps>",
              "label": "Default active step"
            },
            {
              "sourceCode": "function render() {\n  const STEP_IDS = {\n    ACCOUNT: 'ACCOUNT',\n    CONDITIONS: 'CONDITIONS',\n  };\n  const CONDITIONS = [\n    'Critical Throughput (web)',\n    'Critical Error rate',\n    'Critical Response time (web)',\n    'Critical Background throughput',\n  ];\n  const CONDITIONS_DESCRIPTION =\n    'Recommendations based on the number of similar entities using this condition.';\n  class ConditionCreationSteps extends React.PureComponent {\n    constructor() {\n      super(...arguments);\n      this.state = {\n        activeStep: STEP_IDS.CONDITIONS,\n        conditions: [],\n        invalid: undefined,\n      };\n      this._onClickNext = this._onClickNext.bind(this);\n    }\n    _onChangeCondition(evt, condition) {\n      const { checked } = evt.target;\n      if (checked) {\n        return this.setState((state) => ({\n          conditions: [...state.conditions, condition],\n        }));\n      }\n      this.setState((state) => ({\n        conditions: state.conditions.filter((curr) => curr !== condition),\n      }));\n    }\n    _onClickNext() {\n      const { conditions } = this.state;\n      const conditionsStepCompleted = conditions.length > 0;\n      if (conditionsStepCompleted) {\n        return this.setState({\n          activeStep: STEP_IDS.ACCOUNT,\n          invalid: null,\n        });\n      }\n      this.setState({ invalid: 'Select at least one condition' });\n    }\n    renderConditions() {\n      const { invalid, activeStep, conditions } = this.state;\n      const showSummary = activeStep !== STEP_IDS.CONDITIONS;\n      if (showSummary) {\n        return (\n          <ul>\n            {conditions.map((condition, index) => (\n              <li key={index}>{condition}</li>\n            ))}\n          </ul>\n        );\n      }\n      return (\n        <Stack\n          directionType={Stack.DIRECTION_TYPE.VERTICAL}\n          gapType={Stack.GAP_TYPE.LARGE}\n        >\n          <StackItem>\n            <CheckboxGroup\n              invalid={invalid}\n              description={CONDITIONS_DESCRIPTION}\n            >\n              {CONDITIONS.map((condition, index) => (\n                <Checkbox\n                  key={index}\n                  label={condition}\n                  checked={conditions.includes(condition)}\n                  onChange={(evt) => this._onChangeCondition(evt, condition)}\n                />\n              ))}\n            </CheckboxGroup>\n          </StackItem>\n          <StackItem>\n            <Button\n              sizeType={Button.SIZE_TYPE.SMALL}\n              spacingType={[\n                Button.SPACING_TYPE.NONE,\n                Button.SPACING_TYPE.NONE,\n                Button.SPACING_TYPE.LARGE,\n              ]}\n              type={Button.TYPE.PRIMARY}\n              onClick={this._onClickNext}\n            >\n              Next\n            </Button>\n          </StackItem>\n        </Stack>\n      );\n    }\n    render() {\n      const { activeStep, conditions } = this.state;\n      const conditionsStepCompleted = conditions.length > 0;\n      return (\n        <Steps\n          defaultValue=\"conditions\"\n          value={activeStep}\n          onChange={(evt, value) => this.setState({ activeStep: value })}\n        >\n          <StepsItem\n            label=\"Create recommended conditions\"\n            value={STEP_IDS.CONDITIONS}\n            checked={conditionsStepCompleted}\n            expanded\n          >\n            {this.renderConditions()}\n          </StepsItem>\n          <StepsItem\n            label=\"Select an account\"\n            value={STEP_IDS.ACCOUNT}\n            disabled={\n              !conditionsStepCompleted || activeStep === STEP_IDS.CONDITIONS\n            }\n          >\n            <Dropdown title=\"Select an account\">\n              <DropdownItem>Example Account 1</DropdownItem>\n              <DropdownItem>Example Account 2</DropdownItem>\n              <DropdownItem>Example Account 3</DropdownItem>\n            </Dropdown>\n          </StepsItem>\n        </Steps>\n      );\n    }\n  }\n  return <ConditionCreationSteps />;\n}",
              "label": "Linear steps"
            }
          ]
        },
        {
          "description": "Child element of the `<Steps>` component.",
          "name": "StepsItem",
          "usage": "import { StepsItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a label for screen readers to describe the step. This is only\n required if the screen reader label should be different to the\n `label` prop.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If `true`, marks the step as completed.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Content to render inside the item.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Use disabled to prevent users from opening the step by clicking on\n its label.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, it will show the content of the step.",
              "isRequired": false,
              "name": "expanded",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Label of the step.",
              "isRequired": true,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Used by the `<Steps>` to identify the active step.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Switches are used as toggles in content filters, or to provide a way for a\n user to select a binary preference.",
          "name": "Switch",
          "usage": "import { Switch } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a descriptive label for this control, e.g. \"Switch view\".",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Determines the checked state of the switch, where `true` corresponds\n to the switch appearing to be switched \"on\", and a `false` value to\n the switch appearing to be \"off\".\n\n When `checked` is defined, the Switch component will behave like a\n [controlled component]INSERTLINKhttps://reactjs.org/docs/forms.html#controlled-components.",
              "isRequired": false,
              "name": "checked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component. Should be used only for\n positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Sets the default checked value for the switch when operating as an\n [uncontrolled component]INSERTLINKhttps://reactjs.org/docs/uncontrolled-components.html.\n\n ie. Where the `checked` prop is not already stipulated.",
              "isRequired": false,
              "name": "defaultChecked",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Determines whether the user can interact with the switch, or if it\n should be rendered in a disabled state.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Associate a text label to provide users a brief title or explanation\n for the setting controlled by the switch. The label will be\n positioned on the left side of the switch.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "To indicate whether an action is in progress, especially in the case\n that it takes more than 1 second to complete, you should display the\n loading state. The switch is not interactive while loading.\n\n If the action associated to the loading state fails, the checked\n property should be set back to its previous value.",
              "isRequired": false,
              "name": "loading",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user toggles the switch. The current\n checked state can be evaluated in the callback via\n `event.target.checked`.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Switch.SPACING_TYPE.EXTRA_LARGE",
                        "Switch.SPACING_TYPE.LARGE",
                        "Switch.SPACING_TYPE.MEDIUM",
                        "Switch.SPACING_TYPE.NONE",
                        "Switch.SPACING_TYPE.OMIT",
                        "Switch.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling. Should be used only for positioning\n and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Switch onChange={(e) => alert(`Toggle to: ${e.target.checked}`)} />\n  <Switch\n    defaultChecked\n    onChange={(e) => alert(`Toggle to: ${e.target.checked}`)}\n  />\n</div>",
              "label": "Basic"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Switch disabled />\n  <Switch defaultChecked disabled />\n</div>",
              "label": "Disabled"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Switch loading />\n  <Switch defaultChecked loading />\n</div>",
              "label": "Loading state"
            },
            {
              "sourceCode": "<div className=\"nr1-Docs-prettify\">\n  <Switch label=\"This is a label\" />\n  <Switch disabled label=\"This is a label\" />\n</div>",
              "label": "With Label"
            },
            {
              "sourceCode": "<Switch label=\"This is a label\" info=\"Info value\" />",
              "label": "With label and info"
            },
            {
              "sourceCode": "<Switch label=\"This is a label\" description=\"Description value\" />",
              "label": "With description"
            },
            {
              "sourceCode": "<Switch label=\"This is a label\" invalid=\"Invalid message value\" />",
              "label": "With invalid message"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      checked: false,\n      loading: false,\n    };\n\n    this._onChange = this._onChange.bind(this);\n  }\n\n  _requestMock() {\n    return new Promise((resolve, reject) => {\n      setTimeout(resolve, 1000);\n    });\n  }\n\n  _onChange() {\n    let initialChecked;\n\n    this.setState(({ checked }) => {\n      initialChecked = checked;\n\n      return {\n        checked: !checked,\n        loading: true,\n      };\n    });\n\n    this._requestMock()\n      .then(() => {\n        // do some stuff\n      })\n      .catch(() => {\n        this.setState({\n          checked: initialChecked,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const { checked, loading } = this.state;\n\n    return (\n      <Switch\n        checked={checked}\n        label=\"This is a label\"\n        loading={loading}\n        onChange={this._onChange}\n      />\n    );\n  }\n}",
              "label": "Controlled component set to loading while performing a request"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      checked: false,\n      loading: false,\n    };\n\n    this._onChange = this._onChange.bind(this);\n  }\n\n  _requestMock() {\n    return new Promise((resolve, reject) => {\n      setTimeout(reject, 1000);\n    });\n  }\n\n  _onChange() {\n    let initialChecked;\n\n    this.setState(({ checked }) => {\n      initialChecked = checked;\n\n      return {\n        checked: !checked,\n        loading: true,\n      };\n    });\n\n    this._requestMock()\n      .then(() => {\n        // do some stuff\n      })\n      .catch(() => {\n        this.setState({\n          checked: initialChecked,\n        });\n      })\n      .finally(() => {\n        this.setState({\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const { checked, loading } = this.state;\n\n    return (\n      <Switch\n        checked={checked}\n        label=\"This is a label\"\n        loading={loading}\n        onChange={this._onChange}\n      />\n    );\n  }\n}",
              "label": "Controlled component set to loading while performing a request that toggles back to unchecked if request fails"
            }
          ]
        },
        {
          "description": "Renders a table with a fixed header and rows. The table implements the\n following features:\n\n - Flexible layout: table headers accept a variety of sizes to enable fluid\n   and fixed layouts. You can find more information on how to customize your\n   columns checking `TableHeaderCell`.\n\n - Sorting: items passed can be internally sorted by the table according to\n   the current sorting state of the table. You can find more information about\n   sorting by checking `TableHeaderCell`.\n\n - Row selection: rows can be selected through checkboxes on the right hand\n   side. You can find more information in the `selected` prop.\n\n - Row actions: contextual actions can be triggered per row, enabling users to\n   achieve functionality over them. You can find more information on how to\n   add them in `TableRow`.\n\n - Custom pre-defined cells: some very common patterns for cells (entity\n   title, metrics, etc.) are already provided by the platform, so that you\n   only need to return it as part of your row.\n\n - Virtualization: cells are only rendered if they are shown on screen. This\n   enables the table to work with a large dataset with almost no performance\n   penalty.",
          "name": "Table",
          "usage": "import { Table } from 'nr1'",
          "typeDefs": [
            {
              "name": "Cursor",
              "properties": [
                {
                  "description": "First index of the range of items to load.",
                  "name": "startIndex",
                  "type": "number"
                },
                {
                  "description": "Last index of the range of items to load.",
                  "name": "stopIndex",
                  "type": "number"
                }
              ]
            },
            {
              "name": "SelectedCallbackArgument",
              "properties": [
                {
                  "description": "Item to check.",
                  "name": "item",
                  "type": "any"
                },
                {
                  "description": "Index of the item in the items array.",
                  "name": "index",
                  "type": "number"
                },
                {
                  "description": "Array of all items passed.",
                  "name": "items",
                  "type": "any[]"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide an accessibility label that describes the purpose of the\n table, e.g. `\"All entities\"`.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Contents of the table. Table can only contain as children\n `<TableHeader>` and a function returning `<TableRow>`s.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "(node|function)[]",
                "meta": {
                  "itemTypes": {
                    "name": "node|function",
                    "raw": "oneOfType",
                    "meta": {
                      "types": [
                        {
                          "name": "node",
                          "raw": "node",
                          "meta": null
                        },
                        {
                          "name": "function",
                          "raw": "func",
                          "meta": {
                            "arguments": [],
                            "returnValue": []
                          }
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Establishes whether the table should render in compact mode (compact\n mode has narrower rows). In general, use the standard mode, since\n compact is reserved for data representation, e.g. in a dashboard.",
              "isRequired": false,
              "name": "compact",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "[]",
              "description": "The items to be used when rendering.\n\n They are required when rendering items with a render callback.\n\n Each item can have any structure and type possible, and will the\n corresponding one will be provided when rendering each element list.",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "any[]",
                "meta": {
                  "itemTypes": {
                    "name": "any",
                    "raw": "any",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Column containing the main data identifying the row. Often the first\n column (index 0) is the relevant one, but actions (like favorites)\n could be placed before it.",
              "isRequired": false,
              "name": "mainColumn",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Enables a second line of content for cell which support the\n `additionalValue` prop.\n\n **Note:** The `multivalue` mode works only in the default size, not\n in `compact`.",
              "isRequired": false,
              "name": "multivalue",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired when more items must be loaded. This happens when\n you're lazy loading the items and the items that are about to render\n cannot be found in the `items` array.\n\n This callback should be used to fetch/load the missing items from the\n backend or other sources.\n\n The returned Promise should be resolved once item data has finished\n loading. It will be used to determine when to refresh the list with\n the newly-loaded data. This callback may be called multiple times in\n reaction to a single scroll event.",
              "isRequired": false,
              "name": "onLoadMore",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "cursor",
                      "type": "Cursor",
                      "description": "Items to load."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Function called when the user clicks over a row checkbox.\n\n It is called with the event of the checkbox, as well as with an\n object containing the item representing the row, its index in the\n `items` array passed to the table, and the items themselves.\n\n When the user selects or unselects the header checkbox (select /\n unselect all), the callback will be called once for every item,\n representing individual clicks over each row. The header checkbox\n state is automatically controlled by the table.",
              "isRequired": false,
              "name": "onSelect",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": ""
                    },
                    {
                      "name": "selectedItem",
                      "type": "SelectedCallbackArgument",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Number of rows.\n\n By default it's equal to length of array passed in the items prop.\n\n You should specify the `rowCount` when you know the total number of\n items but you want to lazy load them while scrolling.",
              "isRequired": false,
              "name": "rowCount",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Function that returns whether a row is selected. It needs to return a\n boolean representing the state of the row.\n\n It is called with an object containing the item representing the row,\n its index in the `items` array passed to the table, and the items\n themselves.",
              "isRequired": false,
              "name": "selected",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "item",
                      "type": "SelectedCallbackArgument",
                      "description": ""
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "boolean",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Table.SELECTION_TYPE.BULK",
              "description": "Sets the selection mode of the `Table`. Use it along with `onSelect`\n and `selected` props to determine which row is checked by the user.\n\n - `Table.SELECTION_TYPE.BULK` displays checkboxes per each row, along\n   with a checkbox in the header to select all items. When an item is\n   selected, header actions become available.\n\n - `Table.SELECTION_TYPE.SINGLE` doesn't display checkboxes, the user\n   picks a row by just clicking on it. Though not enforced in the\n   component, the `selected` callback should return `true` only for\n   one item. Check the examples of the component to see how it works.",
              "isRequired": false,
              "name": "selectionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Table.SELECTION_TYPE.BULK",
                    "Table.SELECTION_TYPE.SINGLE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Table.SPACING_TYPE.EXTRA_LARGE",
                        "Table.SPACING_TYPE.LARGE",
                        "Table.SPACING_TYPE.MEDIUM",
                        "Table.SPACING_TYPE.NONE",
                        "Table.SPACING_TYPE.OMIT",
                        "Table.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "class Example extends React.Component {\n  _getActions() {\n    return [\n      {\n        label: 'Show details',\n        onClick: (evt, { item, index }) => {\n          alert(\n            `Show details:\\nItem: ${index}\\n${JSON.stringify(item, null, 2)}`,\n          );\n        },\n      },\n      {\n        label: 'Delete',\n        type: TableRow.ACTION_TYPE.DESTRUCTIVE,\n        onClick: (evt, { item, index }) => {\n          alert(`Delete:\\nItem: ${index}\\n${JSON.stringify(item, null, 2)}`);\n        },\n      },\n    ];\n  }\n\n  _getItems() {\n    return [\n      {\n        name: 'Melton Garcia',\n        gender: 'Male',\n        company: 'Comtest',\n        phone: '+1 (867) 477-3284',\n        selected: true,\n      },\n      {\n        name: 'Finley Mendez',\n        gender: 'Male',\n        company: 'Anarco',\n        phone: '+1 (817) 438-3205',\n        selected: false,\n      },\n      {\n        name: 'Coleen Salinas',\n        gender: 'Female',\n        company: 'Macronaut',\n        phone: '+1 (962) 419-3856',\n        selected: true,\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Table items={this._getItems()}>\n        <TableHeader>\n          <TableHeaderCell value={({ item }) => item.name} width=\"50%\">\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.gender}>\n            Gender\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.company}>\n            Company\n          </TableHeaderCell>\n          <TableHeaderCell\n            value={({ item }) => item.phone}\n            width=\"fit-content\"\n            alignmentType={TableRowCell.ALIGNMENT_TYPE.RIGHT}\n          >\n            Phone\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow actions={this._getActions()}>\n            <TableRowCell>{item.name}</TableRowCell>\n            <TableRowCell>{item.gender}</TableRowCell>\n            <TableRowCell>{item.company}</TableRowCell>\n            <TableRowCell>{item.phone}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "Basic"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      column_0: TableHeaderCell.SORTING_TYPE.ASCENDING,\n    };\n  }\n\n  _getItems() {\n    return [\n      {\n        name: 'Melton Garcia',\n        gender: 'Male',\n        company: 'Comtest',\n        phone: '+1 (867) 477-3284',\n        selected: true,\n      },\n      {\n        name: 'Finley Mendez',\n        gender: 'Male',\n        company: 'Anarco',\n        phone: '+1 (817) 438-3205',\n        selected: false,\n      },\n      {\n        name: 'Coleen Salinas',\n        gender: 'Female',\n        company: 'Macronaut',\n        phone: '+1 (962) 419-3856',\n        selected: true,\n      },\n    ];\n  }\n\n  _onClickTableHeaderCell(key, event, sortingData) {\n    this.setState({ [key]: sortingData.nextSortingType });\n  }\n\n  render() {\n    return (\n      <Table\n        items={this._getItems()}\n        selected={({ item }) => item.selected}\n        onSelect={(evt, { item }) => (item.selected = evt.target.checked)}\n      >\n        <TableHeader>\n          <TableHeaderCell\n            value={({ item }) => item.name}\n            sortable\n            sortingType={this.state.column_0}\n            sortingOrder={1}\n            onClick={this._onClickTableHeaderCell.bind(this, 'column_0')}\n          >\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell\n            value={({ item }) => item.gender}\n            sortable\n            sortingType={this.state.column_1}\n            sortingOrder={0}\n            onClick={this._onClickTableHeaderCell.bind(this, 'column_1')}\n          >\n            Gender\n          </TableHeaderCell>\n          <TableHeaderCell\n            value={({ item }) => item.company}\n            sortable\n            sortingType={this.state.column_2}\n            sortingOrder={2}\n            onClick={this._onClickTableHeaderCell.bind(this, 'column_2')}\n          >\n            Company\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.phone}>\n            Phone\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell>{item.name}</TableRowCell>\n            <TableRowCell>{item.gender}</TableRowCell>\n            <TableRowCell>{item.company}</TableRowCell>\n            <TableRowCell>{item.phone}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "Sorting"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  _getActions() {\n    return [\n      {\n        label: 'Copy details',\n        iconType: TableRow.ACTIONS_ICON_TYPE.INTERFACE__OPERATIONS__COPY_TO,\n        onClick: (evt, { items }) => {\n          alert(`Copy details:\\n ${JSON.stringify(items, null, 2)}`);\n        },\n      },\n      {\n        label: 'Delete',\n        iconType: TableRow.ACTIONS_ICON_TYPE.INTERFACE__OPERATIONS__TRASH,\n        onClick: (evt, { items }) => {\n          alert(`Delete:\\n ${JSON.stringify(items, null, 2)}`);\n        },\n      },\n    ];\n  }\n\n  _getItems() {\n    return [\n      {\n        name: 'Melton Garcia',\n        gender: 'Male',\n        company: 'Comtest',\n        phone: '+1 (867) 477-3284',\n        selected: true,\n      },\n      {\n        name: 'Finley Mendez',\n        gender: 'Male',\n        company: 'Anarco',\n        phone: '+1 (817) 438-3205',\n        selected: false,\n      },\n      {\n        name: 'Coleen Salinas',\n        gender: 'Female',\n        company: 'Macronaut',\n        phone: '+1 (962) 419-3856',\n        selected: true,\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Table\n        items={this._getItems()}\n        selected={({ item }) => item.selected}\n        onSelect={(evt, { item }) => (item.selected = evt.target.checked)}\n      >\n        <TableHeader actions={this._getActions()}>\n          <TableHeaderCell value={({ item }) => item.name} width=\"50%\">\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.gender}>\n            Gender\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.company}>\n            Company\n          </TableHeaderCell>\n          <TableHeaderCell\n            value={({ item }) => item.phone}\n            width=\"fit-content\"\n            alignmentType={TableRowCell.ALIGNMENT_TYPE.RIGHT}\n          >\n            Phone\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell>{item.name}</TableRowCell>\n            <TableRowCell>{item.gender}</TableRowCell>\n            <TableRowCell>{item.company}</TableRowCell>\n            <TableRowCell>{item.phone}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "With header actions"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.state = {\n      selectedRow: null,\n    };\n  }\n\n  _getItems() {\n    return [\n      {\n        name: 'Melton Garcia',\n        gender: 'Male',\n        company: 'Comtest',\n        phone: '+1 (867) 477-3284',\n      },\n      {\n        name: 'Finley Mendez',\n        gender: 'Male',\n        company: 'Anarco',\n        phone: '+1 (817) 438-3205',\n      },\n      {\n        name: 'Coleen Salinas',\n        gender: 'Female',\n        company: 'Macronaut',\n        phone: '+1 (962) 419-3856',\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Table\n        selectionType={Table.SELECTION_TYPE.SINGLE}\n        items={this._getItems()}\n        selected={({ index }) => index === this.state.selectedRow}\n        onSelect={(evt, { index }) => {\n          this.setState((prevState) => {\n            const { selectedRow } = prevState;\n\n            // When the selected row is clicked, set value to `null`\n            return { selectedRow: selectedRow === index ? null : index };\n          });\n        }}\n      >\n        <TableHeader>\n          <TableHeaderCell value={({ item }) => item.name}>\n            Name\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.gender}>\n            Gender\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.company}>\n            Company\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.phone}>\n            Phone\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell>{item.name}</TableRowCell>\n            <TableRowCell>{item.gender}</TableRowCell>\n            <TableRowCell>{item.company}</TableRowCell>\n            <TableRowCell>{item.phone}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "With single selection type"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.state = {\n      column: 0,\n      sortingType: TableHeaderCell.SORTING_TYPE.NONE,\n    };\n\n    this.exampleItems = [\n      { x: 'A', y: 0 },\n      { x: 'B', y: 0 },\n      { x: 'A', y: 1 },\n    ];\n  }\n\n  _onClickTableHeaderCell(column, evt, { nextSortingType }) {\n    if (column === this.state.column) {\n      this.setState({ sortingType: nextSortingType });\n    } else {\n      this.setState({ column: column, sortingType: nextSortingType });\n    }\n  }\n\n  render() {\n    const sortingType0 =\n      this.state.column === 0\n        ? this.state.sortingType\n        : TableHeaderCell.SORTING_TYPE.NONE;\n\n    const sortingType1 =\n      this.state.column === 1\n        ? this.state.sortingType\n        : TableHeaderCell.SORTING_TYPE.NONE;\n\n    return (\n      <Table items={this.exampleItems}>\n        <TableHeader>\n          <TableHeaderCell\n            sortable\n            sortingType={sortingType0}\n            onClick={this._onClickTableHeaderCell.bind(this, 0)}\n            value={({ item }) => item.x}\n          >\n            Column 1\n          </TableHeaderCell>\n\n          <TableHeaderCell\n            sortable\n            sortingType={sortingType1}\n            onClick={this._onClickTableHeaderCell.bind(this, 1)}\n            value={({ item }) => item.y}\n          >\n            Column 2\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell>{item.x}</TableRowCell>\n            <TableRowCell>{item.y}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "Single column sorting"
            },
            {
              "sourceCode": "<EntitiesByDomainTypeQuery entityDomain=\"APM\" entityType=\"APPLICATION\">\n  {({ error, data, fetchMore }) => {\n    if (!data.entities.length && error) {\n      return 'Error!';\n    }\n    return (\n      <Table items={data.entities} rowCount={data.count} onLoadMore={fetchMore}>\n        <TableHeader>\n          <TableHeaderCell value={({ item }) => item.name}>\n            name\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.id}>\n            entityGuid\n          </TableHeaderCell>\n          <TableHeaderCell value={({ item }) => item.accountId}>\n            accountId\n          </TableHeaderCell>\n        </TableHeader>\n        {({ item }) => (\n          <TableRow>\n            <EntityTitleTableRowCell value={item} />\n            <TableRowCell>{item.guid}</TableRowCell>\n            <TableRowCell>{item.accountId}</TableRowCell>\n          </TableRow>\n        )}\n      </Table>\n    );\n  }}\n</EntitiesByDomainTypeQuery>",
              "label": "Query with Table"
            },
            {
              "sourceCode": "class Example extends React.Component {\n  _getItems() {\n    return [\n      {\n        duration: 218,\n        errorCount: 0,\n        rootSpan: {\n          startTimeMs: 1626773604851,\n          entityName: 'log-patterns-training',\n          guid: '5ef23490-54jklfsd09fsd-ef098lkj',\n          name: 'Transactions/Group Log Patterns',\n        },\n        totalSpanCount: 15,\n      },\n      {\n        duration: 110,\n        errorCount: 2,\n        rootSpan: {\n          entityName: 'network-traicing',\n          guid: '4gh2190490-098fsd0123d-ef098lkj',\n          name: 'Other Transactions/Network',\n          startTimeMs: 1626783604851,\n        },\n        totalSpanCount: 7,\n      },\n      {\n        duration: 90,\n        errorCount: 1,\n        rootSpan: {\n          entityName: 'staging-services.io',\n          guid: 'tre2350490-312fsd0123d-ef098lkj',\n          name: 'Staging Environment Transactions/Network',\n          startTimeMs: 1626583604851,\n        },\n        totalSpanCount: 12,\n      },\n    ];\n  }\n\n  render() {\n    return (\n      <Table items={this._getItems()} multivalue>\n        <TableHeader>\n          <TableHeaderCell width=\"30%\">Trace group</TableHeaderCell>\n          <TableHeaderCell width=\"30%\">Root entity</TableHeaderCell>\n          <TableHeaderCell alignmentType={TableHeaderCell.ALIGNMENT_TYPE.RIGHT}>\n            Last start time\n          </TableHeaderCell>\n          <TableHeaderCell alignmentType={TableHeaderCell.ALIGNMENT_TYPE.RIGHT}>\n            Trace duration\n          </TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell\n              additionalValue={`${item.errorCount} Errors, ${item.totalSpanCount} Spans`}\n            >\n              {item.rootSpan.name}\n            </TableRowCell>\n            <EntityTitleTableRowCell\n              additionalValue={item.rootSpan.guid}\n              value={{ name: item.rootSpan.entityName }}\n            />\n            <MetricTableRowCell\n              additionalValue={new Date(\n                item.rootSpan.startTimeMs,\n              ).toLocaleTimeString()}\n              type={MetricTableRowCell.TYPE.TIMESTAMP}\n              value={item.rootSpan.startTimeMs}\n            />\n            <MetricTableRowCell\n              type={MetricTableRowCell.TYPE.SECONDS}\n              value={item.duration}\n            />\n          </TableRow>\n        )}\n      </Table>\n    );\n  }\n}",
              "label": "Multivalue table"
            }
          ]
        },
        {
          "description": "Creates a table chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "TableChart",
          "usage": "import { TableChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#008c99',\n       viz: 'main',\n       columns: ['jobType', 'count'],\n     },\n     data: [\n       {\n         jobType: 'SIMPLE',\n         count: 18,\n       },\n       {\n         jobType: 'SCRIPT_BROWSER',\n         count: 27,\n       },\n       {\n         jobType: 'SCRIPT_API',\n         count: 33,\n       },\n       {\n         jobType: 'BROWSER',\n         count: 29,\n       },\n       {\n         jobType: 'SELENIUM_JSON',\n         count: 22,\n       },\n       {\n         jobType: 'SCRIPT',\n         count: 31,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding table.",
              "isRequired": false,
              "name": "onClickTable",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding table.",
              "isRequired": false,
              "name": "onHoverTable",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<TableChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<TableChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<TableChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#008c99',\n         viz: 'main',\n         columns: ['jobType', 'count'],\n       },\n       data: [\n         {\n           jobType: 'SIMPLE',\n           count: 18,\n         },\n         {\n           jobType: 'SCRIPT_BROWSER',\n           count: 27,\n         },\n         {\n           jobType: 'SCRIPT_API',\n           count: 33,\n         },\n         {\n           jobType: 'BROWSER',\n           count: 29,\n         },\n         {\n           jobType: 'SELENIUM_JSON',\n           count: 22,\n         },\n         {\n           jobType: 'SCRIPT',\n           count: 31,\n         },\n       ],\n     },\n   ];;\n\n  return <TableChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Wrapper for cells composing the header. Header always need to be present and\n be the first immediate child of the `<Table>` element.",
          "name": "TableHeader",
          "usage": "import { TableHeader } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "List of column headers, in the shape of `<TableHeaderCell>`s. Cells\n need to be direct children of the header, i.e. there must not be any\n node between `<TableHeader>` and `<TableHeaderCell>`s.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Wraps the content of a table cell located in the header of the table, by\n keeping them at the top and adding additional controls as required, e.g.\n sorting mechanisms.",
          "name": "TableHeaderCell",
          "usage": "import { TableHeaderCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": "TableHeaderCell.ALIGNMENT_TYPE.LEFT",
              "description": "Defines the text alignment inside the cell.",
              "isRequired": false,
              "name": "alignmentType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TableHeaderCell.ALIGNMENT_TYPE.CENTER",
                    "TableHeaderCell.ALIGNMENT_TYPE.LEFT",
                    "TableHeaderCell.ALIGNMENT_TYPE.RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Contents of the table cell. If left empty, make sure you pass `title`\n so that users get a reference about the data the column shows.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the header. When clicked,\n sorting information (and the next sorting state) will be passed as\n the second parameter. Use it rather than computing it yourself.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    },
                    {
                      "name": "sortingData",
                      "type": "Object",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Whether the column is sortable. This means that the up and down\n arrows will be shown, side to the heading text.\n\n Sorting is a controlled component interface, you are in charge of\n listening for the sorting event and applying the sorting to the\n corresponding column, by changing its `sortingOrder` prop.",
              "isRequired": false,
              "name": "sortable",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Method for sorting rows. The default method will usually do the right\n thing (alphabetical ordering for text, numerical ordering for numbers\n and boolean grouping), but if needed this can be overridden.\n\n The function takes two parameters (`a` and `b`) and has to return a\n negative number if `a` is considered to appear before `b`, a positive\n one if it's considered to appear after, and zero if both values are\n identical.\n\n Each of the objects passed to the callback contains the value for the\n given row (i.e. the result of calling `value` over the row), the row\n item (as `item`), the index of the row (as `index`) and all the items\n in the `items` array (as `items`). Generally you will compare rows\n using `a.item` and `b.item`.",
              "isRequired": false,
              "name": "sortingFunction",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "a",
                      "type": "object",
                      "description": ""
                    },
                    {
                      "name": "b",
                      "type": "object",
                      "description": ""
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "number",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Number.MAX_SAFE_INTEGER",
              "description": "Establishes the sorting order. A lowest number indicates a highest\n sorting priority, meaning that `0` will be the first column sorted,\n and if two items are identical, we will use column `1` and so on.\n Columns that do not have an explicit sorting order are used after all\n columns that do have it, and they are applied in order of appearance.",
              "isRequired": false,
              "name": "sortingOrder",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TableHeaderCell.SORTING_TYPE.NONE",
              "description": "Establishes the sorting for the column. Columns are sorted based on\n the element returned by the `value` prop.",
              "isRequired": false,
              "name": "sortingType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TableHeaderCell.SORTING_TYPE.ASCENDING",
                    "TableHeaderCell.SORTING_TYPE.DESCENDING",
                    "TableHeaderCell.SORTING_TYPE.NONE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Establishes the title of the cell. This is used for tooltip purposes,\n when the width of the column is small enough to not show the entire\n heading. Defaults to the stringified version of the provided\n children.",
              "isRequired": false,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Function that is used to extract the raw value representing a column.\n The raw value may be a boolean (e.g. if you render a checkbox), a\n number (if you render a metric) or text for others.\n\n It is called with an object containing the item representing the row,\n its index in the `items` array passed to the table, and the items\n themselves.\n\n This function is used for sorting the table (by the given value) as\n well as for the heuristics of `'fit-content'` widths.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "1fr",
              "description": "Represents the width of the column. It is always a string, and it can\n be of one of the following types:\n\n - `'fit-content'`: the column will take the minimum required space to\n   allocate all items in the column. For virtualized lists, a\n   heuristic will be used to avoid rendering all cells.\n\n - `'YYpx'`: where `YY` is a number, represents the width of the\n   column in pixels.\n\n - `'YY%'`: where `YY` is a number, represents the width of the column\n   in percentage, relative to the size of the available space where\n   the table is being rendered.\n\n - `'YYfr'`: where `YY` is a number, it represents a fraction of the\n   available width. Fractions are proportional ones to others; for\n   instance, a table with two columns (`1fr` and `2fr`) will have the\n   second column twice as large as the first one.\n\n If, after computing the widths, the overall size of the table does\n not cover the available space, all columns will be proportionally\n stretched to fit all available space.",
              "isRequired": false,
              "name": "width",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Wrapper for cells composing a single row.",
          "name": "TableRow",
          "usage": "import { TableRow } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": "[]",
              "description": "Defines a set of actions that will appear when the user hovers the\n row. Actions have a mandatory text and onClick callbacks (that will\n be called with the item and index of the row they belong to), and\n they also accept a disabled property.",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "shape[]",
                "meta": {
                  "itemTypes": {
                    "name": "shape",
                    "raw": "shape",
                    "meta": {
                      "types": [
                        {
                          "name": "disabled",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "boolean",
                            "raw": "bool",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "label",
                          "description": "Use it to describe the row's action.",
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "onClick",
                          "description": "Callback fired any time the user clicks on the action.",
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "function",
                            "raw": "func",
                            "meta": {
                              "arguments": [
                                {
                                  "name": "event",
                                  "type": "React.MouseEvent",
                                  "description": ""
                                }
                              ],
                              "returnValue": []
                            }
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "testId",
                          "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "type",
                          "description": "Type of action for each of the items in the actions dropdown.\n\n It's not mandatory, its default is\n `TableRow.ACTION_TYPE.NORMAL`.\n\n - Normal — generic non-critical action.\n\n - Destructive — use when you have a destructive action like\n   delete or remove, which you would like the user to pause\n   and consider before completing.",
                          "deprecation": null,
                          "examples": [
                            {
                              "label": "Actions with type",
                              "sourceCode": "const actions = [\n  {\n    label: 'Duplicate',\n    type: TableRow.ACTION_TYPE.NORMAL,\n  },\n  {\n    label: 'Delete',\n    type: TableRow.ACTION_TYPE.DESTRUCTIVE,\n  },\n];",
                              "live": false,
                              "preview": false
                            }
                          ],
                          "isRequired": false,
                          "type": {
                            "name": "enum",
                            "raw": "oneOf",
                            "meta": {
                              "constants": [
                                "TableRow.ACTION_TYPE.DESTRUCTIVE",
                                "TableRow.ACTION_TYPE.NORMAL"
                              ]
                            }
                          },
                          "defaultValue": null
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const actions = [\n  {\n    label: 'Action 1',\n    disabled: true,\n    onClick: (evt, { item, index }) => {\n      alert(`Action 1:\\nItem: ${index}\\n${JSON.stringify(item, null, 2)}`);\n    },\n  },\n  {\n    label: 'Action 2',\n    onClick: (evt, { item, index }) => {\n      alert(`Action 2:\\nItem: ${index}\\n${JSON.stringify(item, null, 2)}`);\n    },\n  },\n];",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "List of row cells, in the shape of `<TableRowCell>`s. Cells need to\n be direct children of the row, i.e. there must not be any node\n between `<TableRow>` and `<TableRowCell>`s.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the table row.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Wraps the content of a table cell located in the body of the table. This\n component is only expected to be used as a children of `<TableRow>`. Cells\n take care automatically of ellipsifying the content that does not fit and\n vertically centering it.\n\n This component is the base cell. For common cases, the SDK also provides a\n set of additional cells so that they always painted consistently across the\n UI (e.g. entity name with a status, or a user).",
          "name": "TableRowCell",
          "usage": "import { TableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Additional information along the main data in the cell.\n\n **Note:** At the moment this content becomes visible only when the\n `multivalue` prop is passed to the parent `Table` component.",
              "isRequired": false,
              "name": "additionalValue",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TableRowCell.ALIGNMENT_TYPE.LEFT",
              "description": "Defines the text alignment inside the cell.",
              "isRequired": false,
              "name": "alignmentType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TableRowCell.ALIGNMENT_TYPE.CENTER",
                    "TableRowCell.ALIGNMENT_TYPE.LEFT",
                    "TableRowCell.ALIGNMENT_TYPE.RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Use it to describe better the context of the cell's action for users\n on screen readers.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "<TableRowCell to=\"/dashboards\" ariaLabel=\"Go to your dashboard\">\n  Go\n</TableRowCell>",
                  "label": "Giving better context for screen reader announcement"
                }
              ]
            },
            {
              "defaultValue": "null",
              "description": "Contents of the table cell.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TableRowCell.ELLIPSIS_TYPE.RIGHT",
              "description": "Defines how values are ellipsified within the cells; i.e. where the\n ellipsis is placed:\n\n - `RIGHT`: at the end of the text, preserving its beginning.\n - `LEFT`: at the beginning of the text, preserving its end.",
              "isRequired": false,
              "name": "ellipsisType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TableRowCell.ELLIPSIS_TYPE.LEFT",
                    "TableRowCell.ELLIPSIS_TYPE.RIGHT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the table cell.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      dashboardName: 'Staging service - Errors',\n      createdBy: 'john@doe.com',\n      url: '//fake-url.com/dashboard1',\n    },\n    {\n      dashboardName: 'Package Registry - Performance',\n      createdBy: 'jane@doe.com',\n      url: '//fake-url.com/dashboard2',\n    },\n  ];\n  return (\n    <Table items={items} multivalue>\n      <TableHeader>\n        <TableHeaderCell>Name</TableHeaderCell>\n        <TableHeaderCell>Url</TableHeaderCell>\n      </TableHeader>\n      {({ item }) => (\n        <TableRow>\n          <TableRowCell additionalValue={`Created by ${item.createdBy}`}>\n            {item.dashboardName}\n          </TableRowCell>\n          <TableRowCell>\n            <Link to={item.url}>Go to the dashboard</Link>\n          </TableRowCell>\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Row cell with external links and additional info"
            }
          ]
        },
        {
          "description": "Tabs are used to help group various related content into separate sections.\n Those sections can be all or contained in a portion of the screen. We\n recommend using one set of tabs per screen and also only using it for\n different related content types. For example, when you have different data\n about a single entity, you might bucket the data into different sections.\n\n Do NOT separate an action, like create, from other content sections in tabs.\n The action should be triggered by an icon or button and open either a modal\n or stacked page.",
          "name": "Tabs",
          "usage": "import { Tabs } from 'nr1'",
          "typeDefs": [
            {
              "name": "RenderCallbackArguments",
              "properties": [
                {
                  "description": "Item to render.",
                  "name": "item",
                  "type": "any"
                },
                {
                  "description": "Index of the item in the items array.",
                  "name": "index",
                  "type": "number"
                },
                {
                  "description": "Array of items which we're iterating on.",
                  "name": "items",
                  "type": "any[]"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide an accessibility label that describes the purpose of the set\n of tabs, e.g. `\"Settings categories\"`.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "It can be either an array of `<TabsItem>` elements or a render\n callback (Function as Children).\n\n When using the render callback items need to be provided through the\n `items` prop.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node|function",
                "meta": {
                  "types": [
                    {
                      "name": "node",
                      "raw": "node",
                      "meta": null
                    },
                    {
                      "name": "function",
                      "raw": "func",
                      "meta": {
                        "arguments": [],
                        "returnValue": []
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "`value` of the `<TabsItem>` which you want to be selected by default\n when the component mounts.\n\n If not defined, the first tab item will be selected by default.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The items to render, which required when rendering items with the\n render callback (Function as Children).\n\n The item must contain `value` and `label` properties, and optionally\n a `disabled` boolean property. This item will be provided as an\n argument to the render callback.",
              "isRequired": false,
              "name": "items",
              "type": {
                "name": "shape[]",
                "meta": {
                  "itemTypes": {
                    "name": "shape",
                    "raw": "shape",
                    "meta": {
                      "types": [
                        {
                          "name": "value",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "any",
                            "raw": "any",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "label",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "disabled",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": false,
                          "type": {
                            "name": "boolean",
                            "raw": "bool",
                            "meta": null
                          },
                          "defaultValue": null
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "function render() {\n  const items = [\n    { label: 'a', value: 'x', foo: 'bar' },\n    { label: 'b', value: 'y', disabled: false, foo: 'baz' },\n    { label: 'c', value: 'z', disabled: true, foo: 'foobar' },\n  ];\n\n  return (\n    <Tabs items={items}>\n      {({ item }) => (\n        <TabsItem value={item.value} label={item.label}>\n          {item.foo}\n        </TabsItem>\n      )}\n    </Tabs>\n  );\n}",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the selected tab changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "value",
                      "type": "any",
                      "description": "The value of the selected tab item."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Tabs.SPACING_TYPE.EXTRA_LARGE",
                        "Tabs.SPACING_TYPE.LARGE",
                        "Tabs.SPACING_TYPE.MEDIUM",
                        "Tabs.SPACING_TYPE.NONE",
                        "Tabs.SPACING_TYPE.OMIT",
                        "Tabs.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When you need to have a tab other than the first open by default, use\n the pre-selected tab. Before using this option, we recommend\n considering if you have the right tab order for your experience.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Tabs defaultValue=\"tab-3\">\n  <TabsItem value=\"tab-1\" label=\"Tab 1\">\n    Tab 1 content\n  </TabsItem>\n  <TabsItem value=\"tab-2\" label=\"Another tab with a longer name\">\n    Tab 2 content\n  </TabsItem>\n  <TabsItem value=\"tab-3\" label=\"A tab open by default\">\n    Tab 3 content\n  </TabsItem>\n</Tabs>",
              "label": "Basic"
            },
            {
              "sourceCode": "function render() {\n  const items = new Array(10000).fill().map((_, i) => ({\n    value: i,\n    content: `Tab ${i} content...`,\n    label: `Item ${i}`,\n  }));\n\n  return (\n    <div className=\"nr1-Example--tabs\">\n      <Tabs items={items}>\n        {({ item }) => (\n          <TabsItem value={item.value} label={item.label}>\n            {item.content}\n          </TabsItem>\n        )}\n      </Tabs>\n    </div>\n  );\n}",
              "label": "Render Callback"
            }
          ]
        },
        {
          "description": "Child element of the `<Tabs>` component.\n\n It creates a tab where the title of the tab is defined by the `label` prop\n and the content of the tab is defined by the `children` prop.",
          "name": "TabsItem",
          "usage": "import { TabsItem } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Content to show when the tab is selected.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the tab is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Title of the tab.",
              "isRequired": true,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n It is applied to the tab content.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Unique identifier of the tab.\n\n It is used when selecting the active tab.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "any",
                "meta": null,
                "raw": "any"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": []
        },
        {
          "description": "Forms allow a user to provide input to complete a task.",
          "name": "TextField",
          "usage": "import { TextField } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Provide a label for screen readers to describe this input. This is\n only required if the screen reader label should be different to the\n `label` prop, or if you are not providing a `label` prop at all.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Provide the unique `id` of an element whose contents describe this\n input for screen readers. This is only required if the screen reader\n label should be different to the `label` prop, or if you are not\n providing a `label` prop at all. Use this or `ariaLabel`, not both.",
              "isRequired": false,
              "name": "ariaLabelledBy",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, the text field will autofocus on mount.",
              "isRequired": false,
              "name": "autoFocus",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Default value of the text field.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Message with instructions on how to fill the form field.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Establishes whether the field can be editable or not.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Additional information can be displayed in an info tooltip next to\n the Label.",
              "isRequired": false,
              "name": "info",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When true, sets the field in an invalid state, in order to notify the\n user attention is needed over this particular field. This property\n can be a `boolean` field or a `string`. When it is a `string`, as\n well as the invalid state being shown, the text will be shown below.",
              "isRequired": false,
              "name": "invalid",
              "type": {
                "name": "boolean|string",
                "meta": {
                  "types": [
                    {
                      "name": "boolean",
                      "raw": "bool",
                      "meta": null
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Text to display as label.",
              "isRequired": false,
              "name": "label",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Display the label inline the form control.\n\n Use only when the component is not inside a `Form`. In that case set\n `layoutType` to `Form.LAYOUT_TYPE.SPLIT` in the `Form` component.",
              "isRequired": false,
              "name": "labelInline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "If loading a list of data or something else into a form field,\n indicate to the user that something is loading by using the loading\n state form.\n\n Used to inform that the field might load values dynamically. When set\n to `true`, shows a loading spinner; and when set to `false`, reserves\n some space in the UI so that the spinner can potentially be shown.\n\n Do not set the property (or set it to `undefined`) if the field is\n not expected to get loading at any given point in time.",
              "isRequired": false,
              "name": "loading",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Whether the input accepts one or more lines. This also affects the\n behavior of the [Enter] key, which will create a new line, as opposed\n to a no-op in a single-line field.",
              "isRequired": false,
              "name": "multiline",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": {
                "description": "The \"multiline\" prop is              deprecated, use MultilineTextField component instead for              multiline purposes.",
                "date": "January 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the text field loses focus.",
              "isRequired": false,
              "name": "onBlur",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.FocusEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the text field value changes.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.ChangeEvent",
                      "description": "Event source of the callback. You\n        can pull out the new value by accessing `event.target.value`."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when the text field gets focus.",
              "isRequired": false,
              "name": "onFocus",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.FocusEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when a key is pressed.",
              "isRequired": false,
              "name": "onKeyDown",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.KeyboardEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback which is fired when a key is released.",
              "isRequired": false,
              "name": "onKeyUp",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.KeyboardEvent",
                      "description": "Event source of the callback."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Hint displayed in the text field when it has no value.",
              "isRequired": false,
              "name": "placeholder",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, makes the text field read only.",
              "isRequired": false,
              "name": "readOnly",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, denotes the form field as required.",
              "isRequired": false,
              "name": "required",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "TextField.SPACING_TYPE.EXTRA_LARGE",
                        "TextField.SPACING_TYPE.LARGE",
                        "TextField.SPACING_TYPE.MEDIUM",
                        "TextField.SPACING_TYPE.NONE",
                        "TextField.SPACING_TYPE.OMIT",
                        "TextField.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "If `true`, enables the browser check for spelling errors.",
              "isRequired": false,
              "name": "spellCheck",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TextField.TYPE.TEXT",
              "description": "- Text — when a user inputs one line of text into a field\n - Email — when you need a user to enter email address\n - Search — when a user needs to search\n - Preformatted — when a user needs to enter code content\n - Password — when a user enters a password\n - URL — when a user enters a URL",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TextField.TYPE.EMAIL",
                    "TextField.TYPE.PASSWORD",
                    "TextField.TYPE.PREFORMATTED",
                    "TextField.TYPE.SEARCH",
                    "TextField.TYPE.TEXT",
                    "TextField.TYPE.URL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Value of the text field.\n\n This is required for a controlled component.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<TextField label=\"Username\" placeholder=\"e.g. John Doe\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<TextField label=\"Username\" labelInline placeholder=\"e.g. John Doe\" />",
              "label": "With inline label"
            },
            {
              "sourceCode": "<TextField type={TextField.TYPE.SEARCH} placeholder=\"e.g. Placeholder\" />",
              "label": "Search"
            },
            {
              "sourceCode": "<TextField type={TextField.TYPE.PASSWORD} placeholder=\"e.g. Placeholder\" />",
              "label": "Password"
            },
            {
              "sourceCode": "<TextField type={TextField.TYPE.PREFORMATTED} placeholder=\"npm run build\" />",
              "label": "Preformatted"
            },
            {
              "sourceCode": "<TextField loading placeholder=\"e.g Placeholder\" />",
              "label": "Loading"
            },
            {
              "sourceCode": "<TextField defaultValue=\"Some value\" disabled placeholder=\"e.g Placeholder\" />",
              "label": "Disabled"
            },
            {
              "sourceCode": "<TextField defaultValue=\"Some value\" readOnly placeholder=\"e.g Placeholder\" />",
              "label": "Read only"
            },
            {
              "sourceCode": "<TextField description=\"Description value\" placeholder=\"e.g Placeholder\" />",
              "label": "With description"
            },
            {
              "sourceCode": "<TextField\n  invalid=\"Not enough text, needs more\"\n  placeholder=\"e.g Placeholder\"\n/>",
              "label": "With invalid message"
            }
          ]
        },
        {
          "description": "",
          "name": "Tile",
          "usage": "import { Tile } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Use it to describe better the context of the component's action for\n users on screen readers.",
              "isRequired": false,
              "name": "ariaLabel",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "<Tile to=\"/dashboards\" ariaLabel=\"Go to your dashboard\">\n  Dashboards\n</Tile>",
                  "label": "Giving better context for screen reader announcement"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Content to render inside the component.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "When `true`, the tile is not available for interaction.",
              "isRequired": false,
              "name": "disabled",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the tile.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Tile.SIZE_TYPE.MEDIUM",
              "description": "Specifies the desired size of the tile (smaller sizes have less\n internal padding).",
              "isRequired": false,
              "name": "sizeType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Tile.SIZE_TYPE.MEDIUM",
                    "Tile.SIZE_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "Tile.SPACING_TYPE.EXTRA_LARGE",
                        "Tile.SPACING_TYPE.LARGE",
                        "Tile.SPACING_TYPE.MEDIUM",
                        "Tile.SPACING_TYPE.NONE",
                        "Tile.SPACING_TYPE.OMIT",
                        "Tile.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Tile.TYPE.OUTLINE",
              "description": "Type can be:\n\n - Plain — use when tiles don't need to be emphasized.\n\n - Outline — the default tile type.\n\n - Solid — use when tiles needs to contrast against a white\n   background.",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Tile.TYPE.OUTLINE",
                    "Tile.TYPE.PLAIN",
                    "Tile.TYPE.SOLID"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Unique identifier of the tile. Used by the `<TileGroup>` to identify\n checked tiles.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string|number",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Tile onClick={console.log}>\n  <HeadingText type={HeadingText.TYPE.HEADING_6}>\n    Single location failure\n  </HeadingText>\n  <BlockText>\n    Check your company’s style guides. Great copy that doesn’t fit with the rest\n    of the interface or marketing materials can be jarring to users.\n  </BlockText>\n</Tile>",
              "label": "Basic tile"
            },
            {
              "sourceCode": "<Tile onClick={console.log} disabled>\n  <HeadingText type={HeadingText.TYPE.HEADING_6}>\n    Single location failure\n  </HeadingText>\n  <BlockText>\n    Check your company’s style guides. Great copy that doesn’t fit with the rest\n    of the interface or marketing materials can be jarring to users.\n  </BlockText>\n</Tile>",
              "label": "Disabled tile"
            },
            {
              "sourceCode": "<Tile to=\"https://login.newrelic.com/login\">Login</Tile>",
              "label": "Link tile"
            },
            {
              "sourceCode": "<Stack>\n  <StackItem>\n    <Tile sizeType={Tile.SIZE_TYPE.SMALL} onClick={console.log}>\n      <HeadingText type={HeadingText.TYPE.HEADING_6}>\n        Single location failure\n      </HeadingText>\n      <BlockText>\n        Check your company’s style guides. Great copy that doesn’t fit with the\n        rest of the interface or marketing materials can be jarring to users.\n      </BlockText>\n    </Tile>\n  </StackItem>\n  <StackItem>\n    <Tile sizeType={Tile.SIZE_TYPE.MEDIUM} onClick={console.log}>\n      <HeadingText type={HeadingText.TYPE.HEADING_6}>\n        Single location failure\n      </HeadingText>\n      <BlockText>\n        Check your company’s style guides. Great copy that doesn’t fit with the\n        rest of the interface or marketing materials can be jarring to users.\n      </BlockText>\n    </Tile>\n  </StackItem>\n</Stack>",
              "label": "Sizes"
            },
            {
              "sourceCode": "<Stack>\n  <StackItem>\n    <Tile onClick={console.log} type={Tile.TYPE.PLAIN}>\n      <HeadingText type={HeadingText.TYPE.HEADING_6}>\n        Single location failure\n      </HeadingText>\n      <BlockText>\n        Check your company’s style guides. Great copy that doesn’t fit with the\n        rest of the interface or marketing materials can be jarring to users.\n      </BlockText>\n    </Tile>\n  </StackItem>\n  <StackItem>\n    <Tile onClick={console.log} type={Tile.TYPE.OUTLINE}>\n      <HeadingText type={HeadingText.TYPE.HEADING_6}>\n        Single location failure\n      </HeadingText>\n      <BlockText>\n        Check your company’s style guides. Great copy that doesn’t fit with the\n        rest of the interface or marketing materials can be jarring to users.\n      </BlockText>\n    </Tile>\n  </StackItem>\n  <StackItem>\n    <Tile onClick={console.log} type={Tile.TYPE.SOLID}>\n      <HeadingText type={HeadingText.TYPE.HEADING_6}>\n        Single location failure\n      </HeadingText>\n      <BlockText>\n        Check your company’s style guides. Great copy that doesn’t fit with the\n        rest of the interface or marketing materials can be jarring to users.\n      </BlockText>\n    </Tile>\n  </StackItem>\n</Stack>",
              "label": "Types"
            }
          ]
        },
        {
          "description": "",
          "name": "TileGroup",
          "usage": "import { TileGroup } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Tiles to display.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "[]",
              "description": "The initial tile that should be checked.",
              "isRequired": false,
              "name": "defaultValue",
              "type": {
                "name": "string|number|string[]|number[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    },
                    {
                      "name": "string[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "string",
                          "raw": "string",
                          "meta": null
                        }
                      }
                    },
                    {
                      "name": "number[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "number",
                          "raw": "number",
                          "meta": null
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TileGroup.GAP_TYPE.MEDIUM",
              "description": "Size of the gap between tiles.",
              "isRequired": false,
              "name": "gapType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TileGroup.GAP_TYPE.MEDIUM",
                    "TileGroup.GAP_TYPE.SMALL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Function called when a tile is checked or unchecked.",
              "isRequired": false,
              "name": "onChange",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": "Event source of the callback."
                    },
                    {
                      "name": "tileValue",
                      "type": "any",
                      "description": "The value of the tile."
                    },
                    {
                      "name": "checked",
                      "type": "boolean",
                      "description": "The new checked state."
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "TileGroup.SELECTION_TYPE.NONE",
              "description": null,
              "isRequired": false,
              "name": "selectionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "TileGroup.SELECTION_TYPE.MULTIPLE",
                    "TileGroup.SELECTION_TYPE.NONE",
                    "TileGroup.SELECTION_TYPE.SINGLE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Spacing property. Spacing is defined as a tuple of zero to four\n values, which follow the same conventions as CSS properties like\n `margin` or `padding`. To omit a value, use `SPACING_TYPE.OMIT`.",
              "isRequired": false,
              "name": "spacingType",
              "type": {
                "name": "enum[]",
                "meta": {
                  "itemTypes": {
                    "name": "enum",
                    "raw": "oneOf",
                    "meta": {
                      "constants": [
                        "TileGroup.SPACING_TYPE.EXTRA_LARGE",
                        "TileGroup.SPACING_TYPE.LARGE",
                        "TileGroup.SPACING_TYPE.MEDIUM",
                        "TileGroup.SPACING_TYPE.NONE",
                        "TileGroup.SPACING_TYPE.OMIT",
                        "TileGroup.SPACING_TYPE.SMALL"
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Represents the width of the columns. Columns always have the same\n width. It can be one of the following types:\n\n - `'YYpx'`: where `YY` is a number, represents the minimum width of\n   the columns in pixels. When the tiles don't fit in the available\n   width they will be wrapped in a new row.\n\n - `'YYfr'`: where `YY` is a number, it represents a fraction of the\n   available width in a 12 fraction grid; for instance, a tile group\n   with the tile width of `'6fr'`, will always render two columns\n   (`12fr/6fr = 2`) where each tile will occupy 50% of the available\n   width.",
              "isRequired": false,
              "name": "tileWidth",
              "type": {
                "name": "string|number",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The tile or tiles with the matching value will be checked. Can be a\n single value or an array of values when the selection type is\n `multiple`.\n\n If defined, it turns the component into a\n [controlled component]INSERTLINKhttps://facebook.github.io/react/docs/forms.html.",
              "isRequired": false,
              "name": "value",
              "type": {
                "name": "string|number|string[]|number[]",
                "meta": {
                  "types": [
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    },
                    {
                      "name": "number",
                      "raw": "number",
                      "meta": null
                    },
                    {
                      "name": "string[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "string",
                          "raw": "string",
                          "meta": null
                        }
                      }
                    },
                    {
                      "name": "number[]",
                      "raw": "arrayOf",
                      "meta": {
                        "itemTypes": {
                          "name": "number",
                          "raw": "number",
                          "meta": null
                        }
                      }
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<TileGroup>\n  <Tile onClick={console.log}>Tile 1</Tile>\n  <Tile onClick={console.log}>Tile 2</Tile>\n  <Tile onClick={console.log}>Tile 3</Tile>\n</TileGroup>",
              "label": "Basic tile group"
            },
            {
              "sourceCode": "<TileGroup gapType={TileGroup.GAP_TYPE.SMALL}>\n  <Tile onClick={console.log}>Tile 1</Tile>\n  <Tile onClick={console.log}>Tile 2</Tile>\n  <Tile onClick={console.log}>Tile 3</Tile>\n</TileGroup>",
              "label": "Tile group with small gap type"
            },
            {
              "sourceCode": "<TileGroup tileWidth=\"4fr\">\n  {Array.from({ length: 12 }).map((_, index) => (\n    <Tile onClick={console.log}>Tile {index + 1}</Tile>\n  ))}\n</TileGroup>",
              "label": "Tile group with 3 columns"
            },
            {
              "sourceCode": "<TileGroup tileWidth={120}>\n  {Array.from({ length: 12 }).map((_, index) => (\n    <Tile onClick={console.log}>Tile {index + 1}</Tile>\n  ))}\n</TileGroup>",
              "label": "Tile group with custom tile width"
            },
            {
              "sourceCode": "<TileGroup selectionType={TileGroup.SELECTION_TYPE.SINGLE} tileWidth={120}>\n  {Array.from({ length: 12 }).map((_, index) => (\n    <Tile onClick={console.log}>Tile {index + 1}</Tile>\n  ))}\n</TileGroup>",
              "label": "Selectable tiles"
            },
            {
              "sourceCode": "<TileGroup\n  defaultValue=\"tile-0\"\n  selectionType={TileGroup.SELECTION_TYPE.SINGLE}\n  tileWidth={120}\n>\n  {Array.from({ length: 12 }).map((_, index) => (\n    <Tile value={`tile-${index}`} onClick={console.log}>\n      Tile {index + 1}\n    </Tile>\n  ))}\n</TileGroup>",
              "label": "Selectable tiles with default tile checked"
            },
            {
              "sourceCode": "class MyComponent extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      checkedTile: 'tile-0',\n    };\n    this._onChange = this._onChange.bind(this);\n  }\n  _onChange(evt, tileValue) {\n    this.setState({ checkedTile: tileValue });\n  }\n  render() {\n    const { checkedTile } = this.state;\n    return (\n      <TileGroup\n        value={checkedTile}\n        onChange={this._onChange}\n        tileWidth={120}\n        selectionType={TileGroup.SELECTION_TYPE.SINGLE}\n      >\n        {Array.from({ length: 12 }).map((_, index) => (\n          <Tile\n            sizeType={Tile.SIZE_TYPE.SMALL}\n            value={`tile-${index}`}\n            key={index}\n            onClick={console.log}\n          >\n            Tile {index + 1}\n          </Tile>\n        ))}\n      </TileGroup>\n    );\n  }\n}",
              "label": "Controlled selectable tiles"
            },
            {
              "sourceCode": "<TileGroup selectionType={TileGroup.SELECTION_TYPE.MULTIPLE} tileWidth={120}>\n  {Array.from({ length: 12 }).map((_, index) => (\n    <Tile onClick={console.log}>Tile {index + 1}</Tile>\n  ))}\n</TileGroup>",
              "label": "Multi-select tiles"
            },
            {
              "sourceCode": "class MyComponent extends React.PureComponent {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      checkedTiles: [],\n    };\n    this._onChange = this._onChange.bind(this);\n  }\n  _onChange(evt, tileValue, checked) {\n    this.setState((state) => {\n      return {\n        checkedTiles: checked\n          ? [...state.checkedTiles, tileValue]\n          : state.checkedTiles.filter((value) => value !== tileValue),\n      };\n    });\n  }\n  render() {\n    const { checkedTiles } = this.state;\n    return (\n      <TileGroup\n        value={checkedTiles}\n        onChange={this._onChange}\n        tileWidth={120}\n        selectionType={TileGroup.SELECTION_TYPE.MULTIPLE}\n      >\n        {Array.from({ length: 12 }).map((_, index) => (\n          <Tile\n            sizeType={Tile.SIZE_TYPE.SMALL}\n            value={`tile-${index}`}\n            key={index}\n            onClick={console.log}\n          >\n            Tile {index + 1}\n          </Tile>\n        ))}\n      </TileGroup>\n    );\n  }\n}",
              "label": "Controlled multi-select tiles"
            }
          ]
        },
        {
          "description": "Toast notifications give users immediate confirmation of the successful\n completion of a task or critical failure in trying to complete a task.\n\n You can customize the toast by passing custom actions which will show as\n clickable buttons next to the text.",
          "name": "Toast",
          "usage": "import { Toast } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "If you have a specific action you need the user to choose from, then\n use the custom action component. We recommend limiting the use of\n multiple actions as this notification is meant to indicate to the\n user the success or failure of a task and not supposed to be used for\n leading the user to another task.",
              "isRequired": false,
              "name": "actions",
              "type": {
                "name": "shape[]",
                "meta": {
                  "itemTypes": {
                    "name": "shape",
                    "raw": "shape",
                    "meta": {
                      "types": [
                        {
                          "name": "label",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "string",
                            "raw": "string",
                            "meta": null
                          },
                          "defaultValue": null
                        },
                        {
                          "name": "onClick",
                          "description": null,
                          "deprecation": null,
                          "examples": [],
                          "isRequired": true,
                          "type": {
                            "name": "function",
                            "raw": "func",
                            "meta": {
                              "arguments": [],
                              "returnValue": []
                            }
                          },
                          "defaultValue": null
                        }
                      ]
                    }
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "The information shown in the title and description can be\n complemented/extended with a link to documentation. This link should\n only be used to provide contextual information and not as an Action.",
              "isRequired": false,
              "name": "additionalInfoLink",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the link.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "We recommend providing a title and message to give context for the\n success or failure for the previous action taken. You may even use\n the message area to provide the user a link to access the object they\n just created in the system.",
              "isRequired": false,
              "name": "description",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback executed after the toast is hidden.",
              "isRequired": false,
              "name": "onHideEnd",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback executed when the hide animation starts.",
              "isRequired": false,
              "name": "onHideStart",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "For tasks not requiring the explicit dismissal or viewing by a user,\n we recommend using a time-out toast notification so the message\n automatically disappears from the screen after a short period of\n time.",
              "isRequired": false,
              "name": "sticky",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "We don’t recommend using the title only option as this does NOT\n provide a context for the user as to the task they just completed.",
              "isRequired": true,
              "name": "title",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Toast.TYPE.NORMAL",
              "description": "- Normal — when the system successfully completes the user’s task\n - Critical — when the system fails to complete the user’s task",
              "isRequired": false,
              "name": "type",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Toast.TYPE.CRITICAL",
                    "Toast.TYPE.NORMAL"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use Toast as a function instead of a React component.",
              "name": "Toast.showToast",
              "returnValue": {
                "description": null,
                "type": "undefined"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the Toast options. Any `Toast`\n        prop is valid as an option.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "function render() {\n  const onClick = () =>\n    Toast.showToast({\n      title: 'Feedback received',\n      description: 'We will contact you soon.',\n      actions: [\n        {\n          label: 'Go back',\n          onClick: () => console.log('Go back'),\n        },\n      ],\n      type: Toast.TYPE.NORMAL,\n    });\n\n  return <Button onClick={onClick}>Show toast</Button>;\n}",
              "label": "Basic toast notification"
            },
            {
              "sourceCode": "function render() {\n  const onClick = () =>\n    Toast.showToast({\n      title: 'TV Mode activated',\n      description: 'Press ESC to exit',\n      additionalInfoLink: {\n        label: 'Learn more about TV Mode',\n        to: 'https://discuss.newrelic.com/t/tv-mode-in-new-relic-one/92963',\n      },\n      type: Toast.TYPE.NORMAL,\n    });\n\n  return <Button onClick={onClick}>Show toast</Button>;\n}",
              "label": "With additional info link"
            },
            {
              "sourceCode": "function render() {\n  const onClick = () =>\n    Toast.showToast({\n      title: 'Service unavailable',\n      description: 'Your data could not be retrieved',\n      actions: [\n        {\n          label: 'Retry',\n          onClick: () => console.log('Retry'),\n        },\n      ],\n      type: Toast.TYPE.CRITICAL,\n    });\n\n  return <Button onClick={onClick}>Update</Button>;\n}",
              "label": "Critical toast notification"
            }
          ]
        },
        {
          "description": "Tooltips are used to expose additional information not readily available in\n the UI. You can use them to explain what a UI element is, explain the purpose\n of an action, or provide a definition of a word or phrase.",
          "name": "Tooltip",
          "usage": "import { Tooltip } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "The information shown in the text can be complemented/extended with a\n link to documentation. This link should only be used to provide\n contextual information.",
              "isRequired": false,
              "name": "additionalInfoLink",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "label",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "onClick",
                      "description": "Callback fired any time the user clicks on the link.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "function",
                        "raw": "func",
                        "meta": {
                          "arguments": [
                            {
                              "name": "event",
                              "type": "React.MouseEvent",
                              "description": ""
                            }
                          ],
                          "returnValue": []
                        }
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "to",
                      "description": "Location object or url string to link to.",
                      "deprecation": null,
                      "examples": [],
                      "isRequired": false,
                      "type": {
                        "name": "shape|string",
                        "raw": "oneOfType",
                        "meta": {
                          "types": [
                            {
                              "name": "shape",
                              "raw": "shape",
                              "meta": {
                                "types": [
                                  {
                                    "name": "pathname",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": true,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "search",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  },
                                  {
                                    "name": "hash",
                                    "description": null,
                                    "deprecation": null,
                                    "examples": [],
                                    "isRequired": false,
                                    "type": {
                                      "name": "string",
                                      "raw": "string",
                                      "meta": null
                                    },
                                    "defaultValue": null
                                  }
                                ]
                              }
                            },
                            {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            }
                          ]
                        }
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Element to attach the tooltip to, hovering or focusing on this\n element will show the tooltip.\n\n We recommend passing a focusable element so screen readers can\n announce the tooltip content.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "node",
                "meta": null,
                "raw": "node"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "Tooltip.PLACEMENT_TYPE.TOP",
              "description": "Tooltips appear next to the element, action, word, or phrase they are\n explaining. Default display is from the top, but you can also choose\n to display it from the right, bottom, or left.",
              "isRequired": false,
              "name": "placementType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "Tooltip.PLACEMENT_TYPE.BOTTOM",
                    "Tooltip.PLACEMENT_TYPE.LEFT",
                    "Tooltip.PLACEMENT_TYPE.RIGHT",
                    "Tooltip.PLACEMENT_TYPE.TOP"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Tooltips should answer a question for the user. Tips should be crisp,\n clear, and helpful. Provide just enough information to answer\n questions without overloading the user.\n\n - Keep the copy easy to read and clear. For longer copy, use complete\n   sentences, active verbs, and punctuation.\n - Give enough information to avoid misunderstandings. For example, if\n   a button looks like it could add multiple things, use the tooltip\n   to clarify what it actually adds.",
              "isRequired": true,
              "name": "text",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<Tooltip text=\"Search across all your accounts\">\n  <Button>Search</Button>\n</Tooltip>",
              "label": "Basic"
            },
            {
              "sourceCode": "<Tooltip\n  text=\"Explore your metrics, events and logs\"\n  placementType={Tooltip.PLACEMENT_TYPE.BOTTOM}\n>\n  <Button>Query your data</Button>\n</Tooltip>",
              "label": "With placementType"
            },
            {
              "sourceCode": "function render() {\n  const additionalInfoLink = {\n    label: 'See the docs',\n    to: 'https://docs.newrelic.com',\n  };\n\n  return (\n    <p>\n      Welcome to\n      <Tooltip\n        text=\"Go to docs for more information\"\n        placementType={Tooltip.PLACEMENT_TYPE.BOTTOM}\n        additionalInfoLink={additionalInfoLink}\n      >\n        New Relic One\n      </Tooltip>\n    </p>\n  );\n}",
              "label": "With additional info link"
            }
          ]
        },
        {
          "description": "Get the unique identifier (id), name, and email of the current user\n logged in.",
          "name": "UserQuery",
          "usage": "import { UserQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "UserQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "UserQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "UserQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "UserQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "UserQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "UserQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "A static method to use UserQuery as a Promise instead of as a React\n component.",
              "name": "UserQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the query options. Any\n        `UserQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<UserQuery>\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    const { id, email, name } = data;\n\n    return (\n      <p>\n        Id: {id} - Email: {email} - Name: {name}\n      </p>\n    );\n  }}\n</UserQuery>",
              "label": "Declarative query"
            },
            {
              "sourceCode": "UserQuery.query().then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Save, delete, or update a user scoped document in NerdStorage.",
          "name": "UserStorageMutation",
          "usage": "import { UserStorageMutation } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "MutationResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your mutation.",
                  "name": "data",
                  "type": "Object"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Type of action to perform.",
              "isRequired": true,
              "name": "actionType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "UserStorageMutation.ACTION_TYPE.DELETE_COLLECTION",
                    "UserStorageMutation.ACTION_TYPE.DELETE_DOCUMENT",
                    "UserStorageMutation.ACTION_TYPE.WRITE_DOCUMENT"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Render prop function as children.",
              "isRequired": true,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "mutate",
                      "type": "function",
                      "description": "Function to trigger a mutation from your UI."
                    },
                    {
                      "name": "mutationResult",
                      "type": "MutationResult",
                      "description": "Results of the\n        mutation."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": false,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NerdStorage document. Documents are restricted to 64 kB in size when\n JSON-stringified.",
              "isRequired": false,
              "name": "document",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "Static method to use UserStorageMutation as a Promise instead of as a\n React component.",
              "name": "UserStorageMutation.mutate",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "Object containing the mutation options. Any\n        `UserStorageMutation` prop is a valid option except `children`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "UserStorageMutation.mutate({\n  actionType: UserStorageMutation.ACTION_TYPE.WRITE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n  document: {\n    name: 'John',\n    surname: 'Doe',\n  },\n});",
              "label": "Write document"
            },
            {
              "sourceCode": "UserStorageMutation.mutate({\n  actionType: UserStorageMutation.ACTION_TYPE.DELETE_DOCUMENT,\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n});",
              "label": "Delete document"
            },
            {
              "sourceCode": "UserStorageMutation.mutate({\n  actionType: UserStorageMutation.ACTION_TYPE.DELETE_COLLECTION,\n  collection: 'myCollection',\n});",
              "label": "Delete collection"
            }
          ]
        },
        {
          "description": "Query NerdStorage for user scoped data.\n\n Retrieve an entire collection or a single document.",
          "name": "UserStorageQuery",
          "usage": "import { UserStorageQuery } from 'nr1'",
          "typeDefs": [
            {
              "name": "PromiseQueryResult",
              "properties": [
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            },
            {
              "name": "QueryResult",
              "properties": [
                {
                  "description": "Indicates that the request is in flight.",
                  "name": "loading",
                  "type": "boolean"
                },
                {
                  "description": "Runtime error with `graphQLErrors`\n           and `networkError` properties.",
                  "name": "error",
                  "type": "ApolloClient.ApolloError"
                },
                {
                  "description": "Object containing the result of your query.",
                  "name": "data",
                  "type": "Object"
                },
                {
                  "description": "If not `null`, `fetchMore` allows you to\n           load more results for your query. New data is merged with previous\n           data.",
                  "name": "fetchMore",
                  "type": "function|null"
                },
                {
                  "description": "Refetch the query.",
                  "name": "refetch",
                  "type": "function"
                }
              ]
            }
          ],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Render prop function as a child.",
              "isRequired": false,
              "name": "children",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "queryResult",
                      "type": "QueryResult",
                      "description": "Results of the query."
                    }
                  ],
                  "returnValue": [
                    {
                      "type": "React.ReactNode",
                      "description": ""
                    }
                  ]
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Collection name.",
              "isRequired": true,
              "name": "collection",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Document identifier to operate in. When omitted the whole collection is\n returned.",
              "isRequired": false,
              "name": "documentId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "UserStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
              "description": "Allows you to specify how you want your query to interact with the\n cached data.\n\n - `CACHE_AND_NETWORK`: The query returns your initial data from the\n   cache if available. However, regardless of whether or not the full\n   data is in your cache, the query always makes a request using your\n   network interface and returns the updated data. This option is not\n   available when using the static `query()` method of the component.\n\n - `CACHE_FIRST`: The query makes a request using your network\n   interface **only** if the data for your query is not already in the\n   cache.\n\n - `CACHE_ONLY`: The query **never** makes a request using your\n   network interface. Instead it returns the data available in the\n   cache. If the data for your query does not exist in the cache, then\n   an error is thrown.\n\n - `NETWORK_ONLY`: The query **never** returns your initial data from\n   the cache. Instead it **always** makes a request using your network\n   interface.\n\n - `NO_CACHE`: The query **never** returns your initial data from the\n   cache. Instead it **always** makes a request using your network\n   interface. Unlike the `NETWORK_ONLY` policy, it does not write any\n   data to the cache after the query completes.",
              "isRequired": false,
              "name": "fetchPolicyType",
              "type": {
                "name": "enum",
                "meta": {
                  "constants": [
                    "UserStorageQuery.FETCH_POLICY_TYPE.CACHE_AND_NETWORK",
                    "UserStorageQuery.FETCH_POLICY_TYPE.CACHE_FIRST",
                    "UserStorageQuery.FETCH_POLICY_TYPE.CACHE_ONLY",
                    "UserStorageQuery.FETCH_POLICY_TYPE.NETWORK_ONLY",
                    "UserStorageQuery.FETCH_POLICY_TYPE.NO_CACHE"
                  ]
                },
                "raw": "oneOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "0",
              "description": "Interval in milliseconds to poll for new data. Set to zero to avoid\n any kind of regular polling.",
              "isRequired": false,
              "name": "pollInterval",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "When set to `true`, the query will be skipped entirely from\n rendering.",
              "isRequired": false,
              "name": "skip",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [
            {
              "description": "A static method to use UserStorageQuery as a Promise instead of as a\n React component.",
              "name": "UserStorageQuery.query",
              "returnValue": {
                "description": "",
                "type": "PromiseQueryResult"
              },
              "examples": [],
              "arguments": [
                {
                  "description": "An object containing the query options. Any\n        `UserStorageQuery` prop is a valid option except `children` and\n        `pollInterval`.",
                  "name": "props",
                  "type": "Object"
                }
              ]
            }
          ],
          "examples": [
            {
              "sourceCode": "<UserStorageQuery collection=\"foo\">\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</UserStorageQuery>",
              "label": "Query collection"
            },
            {
              "sourceCode": "<UserStorageQuery collection=\"foo\" documentId=\"bar\">\n  {({ loading, error, data }) => {\n    if (loading) {\n      return <Spinner />;\n    }\n\n    if (error) {\n      return 'Error!';\n    }\n\n    return <pre>{JSON.stringify(data, null, 4)}</pre>;\n  }}\n</UserStorageQuery>",
              "label": "Query document"
            },
            {
              "sourceCode": "UserStorageQuery.query({\n  collection: 'myCollection',\n  documentId: 'myDocumentId',\n}).then(({ data }) => console.log(data));",
              "label": "Imperative query"
            }
          ]
        },
        {
          "description": "Renders a row table cell showing a particular user. This cell takes the user\n object as its children, which is in turn compatible with the NerdGraph user\n object (needing, at the very least, the `name` and `gravatar` fields).",
          "name": "UserTableRowCell",
          "usage": "import { UserTableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the table cell.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "User object, that requires (at least), the `name` and `gravatar`\n fields. This object matches with the user structure obtained from\n NerdGraph.",
              "isRequired": true,
              "name": "value",
              "type": {
                "name": "shape",
                "meta": {
                  "types": [
                    {
                      "name": "name",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    },
                    {
                      "name": "gravatar",
                      "description": null,
                      "deprecation": null,
                      "examples": [],
                      "isRequired": true,
                      "type": {
                        "name": "string",
                        "raw": "string",
                        "meta": null
                      },
                      "defaultValue": null
                    }
                  ]
                },
                "raw": "shape"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      name: 'John Doe',\n      gravatar:\n        'https://secure.gravatar.com/avatar/79988df068cb4d952284a3395412dc4f',\n    },\n  ];\n\n  return (\n    <Table items={items}>\n      <TableHeader>\n        <TableHeaderCell>User</TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <UserTableRowCell value={item} />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Example 1"
            }
          ]
        },
        {
          "description": "Creates a area chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "AreaChart",
          "usage": "import { AreaChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding area.",
              "isRequired": false,
              "name": "onClickArea",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding event.",
              "isRequired": false,
              "name": "onClickEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding line.",
              "isRequired": false,
              "name": "onClickLine",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding area.",
              "isRequired": false,
              "name": "onHoverArea",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding event.",
              "isRequired": false,
              "name": "onHoverEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding line.",
              "isRequired": false,
              "name": "onHoverLine",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<AreaChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<AreaChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<AreaChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 21400,\n         },\n         {\n           x: 1717074385286,\n           y: 12200,\n         },\n         {\n           x: 1717077985286,\n           y: 9300,\n         },\n         {\n           x: 1717081585286,\n           y: 14500,\n         },\n         {\n           x: 1717085185286,\n           y: 27500,\n         },\n         {\n           x: 1717088785286,\n           y: 24700,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 8800,\n         },\n         {\n           x: 1717074385286,\n           y: 1400,\n         },\n         {\n           x: 1717077985286,\n           y: 4600,\n         },\n         {\n           x: 1717081585286,\n           y: 5200,\n         },\n         {\n           x: 1717085185286,\n           y: 14100,\n         },\n         {\n           x: 1717088785286,\n           y: 19300,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'events',\n         name: 'Events',\n         color: 'red',\n         viz: 'event',\n       },\n       data: [\n         {\n           x0: 1717074385286,\n           x1: 1717077985286,\n         },\n         {\n           x0: 1717085185286,\n           x1: 1717085185286,\n         },\n       ],\n     },\n   ];;\n\n  return <AreaChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a funnel chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "FunnelChart",
          "usage": "import { FunnelChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding funnel.",
              "isRequired": false,
              "name": "onClickFunnel",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding funnel.",
              "isRequired": false,
              "name": "onHoverFunnel",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<FunnelChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<FunnelChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<FunnelChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 21400,\n         },\n         {\n           x: 1717074385286,\n           y: 12200,\n         },\n         {\n           x: 1717077985286,\n           y: 9300,\n         },\n         {\n           x: 1717081585286,\n           y: 14500,\n         },\n         {\n           x: 1717085185286,\n           y: 27500,\n         },\n         {\n           x: 1717088785286,\n           y: 24700,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 8800,\n         },\n         {\n           x: 1717074385286,\n           y: 1400,\n         },\n         {\n           x: 1717077985286,\n           y: 4600,\n         },\n         {\n           x: 1717081585286,\n           y: 5200,\n         },\n         {\n           x: 1717085185286,\n           y: 14100,\n         },\n         {\n           x: 1717088785286,\n           y: 19300,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'events',\n         name: 'Events',\n         color: 'red',\n         viz: 'event',\n       },\n       data: [\n         {\n           x0: 1717074385286,\n           x1: 1717077985286,\n         },\n         {\n           x0: 1717085185286,\n           x1: 1717085185286,\n         },\n       ],\n     },\n   ];;\n\n  return <FunnelChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a line chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "LineChart",
          "usage": "import { LineChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding area.",
              "isRequired": false,
              "name": "onClickArea",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding event.",
              "isRequired": false,
              "name": "onClickEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding line.",
              "isRequired": false,
              "name": "onClickLine",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding area.",
              "isRequired": false,
              "name": "onHoverArea",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding event.",
              "isRequired": false,
              "name": "onHoverEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding line.",
              "isRequired": false,
              "name": "onHoverLine",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<LineChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<LineChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<LineChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 21400,\n         },\n         {\n           x: 1717074385286,\n           y: 12200,\n         },\n         {\n           x: 1717077985286,\n           y: 9300,\n         },\n         {\n           x: 1717081585286,\n           y: 14500,\n         },\n         {\n           x: 1717085185286,\n           y: 27500,\n         },\n         {\n           x: 1717088785286,\n           y: 24700,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 8800,\n         },\n         {\n           x: 1717074385286,\n           y: 1400,\n         },\n         {\n           x: 1717077985286,\n           y: 4600,\n         },\n         {\n           x: 1717081585286,\n           y: 5200,\n         },\n         {\n           x: 1717085185286,\n           y: 14100,\n         },\n         {\n           x: 1717088785286,\n           y: 19300,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'events',\n         name: 'Events',\n         color: 'red',\n         viz: 'event',\n       },\n       data: [\n         {\n           x0: 1717074385286,\n           x1: 1717077985286,\n         },\n         {\n           x0: 1717085185286,\n           x1: 1717085185286,\n         },\n       ],\n     },\n   ];;\n\n  return <LineChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a scatter chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "ScatterChart",
          "usage": "import { ScatterChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding event.",
              "isRequired": false,
              "name": "onClickEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding scatter.",
              "isRequired": false,
              "name": "onClickScatter",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding event.",
              "isRequired": false,
              "name": "onHoverEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding scatter.",
              "isRequired": false,
              "name": "onHoverScatter",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<ScatterChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<ScatterChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<ScatterChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 21400,\n         },\n         {\n           x: 1717074385286,\n           y: 12200,\n         },\n         {\n           x: 1717077985286,\n           y: 9300,\n         },\n         {\n           x: 1717081585286,\n           y: 14500,\n         },\n         {\n           x: 1717085185286,\n           y: 27500,\n         },\n         {\n           x: 1717088785286,\n           y: 24700,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 8800,\n         },\n         {\n           x: 1717074385286,\n           y: 1400,\n         },\n         {\n           x: 1717077985286,\n           y: 4600,\n         },\n         {\n           x: 1717081585286,\n           y: 5200,\n         },\n         {\n           x: 1717085185286,\n           y: 14100,\n         },\n         {\n           x: 1717088785286,\n           y: 19300,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'events',\n         name: 'Events',\n         color: 'red',\n         viz: 'event',\n       },\n       data: [\n         {\n           x0: 1717074385286,\n           x1: 1717077985286,\n         },\n         {\n           x0: 1717085185286,\n           x1: 1717085185286,\n         },\n       ],\n     },\n   ];;\n\n  return <ScatterChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Creates a sparkline chart. Data can either be obtained by performing\n a NRQL query against a particular account, or it can be passed through\n the `data` prop.\n\n The `data` format is a series of objects, each containing `metadata` and\n `data`. Each `data` contains both values from this point, and `x` and `y`\n keys used to plot the chart.",
          "name": "SparklineChart",
          "usage": "import { SparklineChart } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Sets the account IDs to perform the query.",
              "isRequired": false,
              "name": "accountIds",
              "type": {
                "name": "number[]",
                "meta": {
                  "itemTypes": {
                    "name": "number",
                    "raw": "number",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available height.",
              "isRequired": false,
              "name": "fullHeight",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": "false",
              "description": "Expands the chart to occupy all available width.",
              "isRequired": false,
              "name": "fullWidth",
              "type": {
                "name": "boolean",
                "meta": null,
                "raw": "bool"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": null,
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding event.",
              "isRequired": false,
              "name": "onClickEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a click listener that gets triggered when the user clicks\n over the corresponding sparkline.",
              "isRequired": false,
              "name": "onClickSparkline",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding event.",
              "isRequired": false,
              "name": "onHoverEvent",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a hover listener that gets triggered when the cursor is\n hovered over the corresponding sparkline.",
              "isRequired": false,
              "name": "onHoverSparkline",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "<SparklineChart accountIds={[1]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "Basic"
            },
            {
              "sourceCode": "<SparklineChart accountIds={[1, 1067061]} query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\" />",
              "label": "With multiple accounts"
            },
            {
              "sourceCode": "<SparklineChart\n  accountIds={[1]}\n  query=\"SELECT count(*) FROM `Synthetics` SINCE 1 DAY AGO TIMESERIES AUTO FACET jobType\"\n  fullWidth\n  fullHeight\n/>",
              "label": "Fill container"
            },
            {
              "sourceCode": "function render() {\n  const data = [\n     {\n       metadata: {\n         id: 'series-1',\n         name: 'Serie 1',\n         color: '#a35ebf',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 21400,\n         },\n         {\n           x: 1717074385286,\n           y: 12200,\n         },\n         {\n           x: 1717077985286,\n           y: 9300,\n         },\n         {\n           x: 1717081585286,\n           y: 14500,\n         },\n         {\n           x: 1717085185286,\n           y: 27500,\n         },\n         {\n           x: 1717088785286,\n           y: 24700,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'series-2',\n         name: 'Serie 2',\n         color: '#85c956',\n         viz: 'main',\n         units_data: {\n           x: 'TIMESTAMP',\n           y: 'BYTES',\n         }\n       },\n       data: [\n         {\n           x: 1717070785286,\n           y: 8800,\n         },\n         {\n           x: 1717074385286,\n           y: 1400,\n         },\n         {\n           x: 1717077985286,\n           y: 4600,\n         },\n         {\n           x: 1717081585286,\n           y: 5200,\n         },\n         {\n           x: 1717085185286,\n           y: 14100,\n         },\n         {\n           x: 1717088785286,\n           y: 19300,\n         },\n       ],\n     },\n     {\n       metadata: {\n         id: 'events',\n         name: 'Events',\n         color: 'red',\n         viz: 'event',\n       },\n       data: [\n         {\n           x0: 1717074385286,\n           x1: 1717077985286,\n         },\n         {\n           x0: 1717085185286,\n           x1: 1717085185286,\n         },\n       ],\n     },\n   ];;\n\n  return <SparklineChart data={data} fullWidth />;\n}",
              "label": "With custom data"
            }
          ]
        },
        {
          "description": "Renders a table row cell showing a sparkline. Sparklines can either come from\n a NRQL query (thus providing `accountId` and `query`), or from a predefined\n `data` passed in the chart format. In either case, all props are 1:1\n compatible with the `<NrqlQuery>` format type `CHART`.\n\n A common case to render one row per NRQL facet, is to perform the query\n outside of the table, then pass the result as items (returned data from a\n `<NrqlQuery>` is an array, that can be directly used as the input items of a\n table). Once rendering the sparkline, you need to re-wrap the data in an\n array, in order to build, from a series, a new entire set of data.",
          "name": "SparklineTableRowCell",
          "usage": "import { SparklineTableRowCell } from 'nr1'",
          "typeDefs": [],
          "propTypes": [
            {
              "defaultValue": null,
              "description": "Sets the account ID to perform the query.",
              "isRequired": false,
              "name": "accountId",
              "type": {
                "name": "number",
                "meta": null,
                "raw": "number"
              },
              "deprecation": {
                "description": "The accountId is deprecated, use              accountIds instead",
                "date": "November 1st, 2022"
              },
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Appends class names to the component.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "className",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Data is an array of objects where each object represents a series to\n be drawn. Each series comprises visualization metadata and an array\n of data points.",
              "isRequired": false,
              "name": "data",
              "type": {
                "name": "object[]",
                "meta": {
                  "itemTypes": {
                    "name": "object",
                    "raw": "object",
                    "meta": null
                  }
                },
                "raw": "arrayOf"
              },
              "deprecation": null,
              "examples": [
                {
                  "sourceCode": "const data = [\n   {\n     metadata: {\n       id: 'series-1',\n       name: 'Serie 1',\n       color: '#a35ebf',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 21400,\n       },\n       {\n         x: 1717074385286,\n         y: 12200,\n       },\n       {\n         x: 1717077985286,\n         y: 9300,\n       },\n       {\n         x: 1717081585286,\n         y: 14500,\n       },\n       {\n         x: 1717085185286,\n         y: 27500,\n       },\n       {\n         x: 1717088785286,\n         y: 24700,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'series-2',\n       name: 'Serie 2',\n       color: '#85c956',\n       viz: 'main',\n       units_data: {\n         x: 'TIMESTAMP',\n         y: 'BYTES',\n       }\n     },\n     data: [\n       {\n         x: 1717070785286,\n         y: 8800,\n       },\n       {\n         x: 1717074385286,\n         y: 1400,\n       },\n       {\n         x: 1717077985286,\n         y: 4600,\n       },\n       {\n         x: 1717081585286,\n         y: 5200,\n       },\n       {\n         x: 1717085185286,\n         y: 14100,\n       },\n       {\n         x: 1717088785286,\n         y: 19300,\n       },\n     ],\n   },\n   {\n     metadata: {\n       id: 'events',\n       name: 'Events',\n       color: 'red',\n       viz: 'event',\n     },\n     data: [\n       {\n         x0: 1717074385286,\n         x1: 1717077985286,\n       },\n       {\n         x0: 1717085185286,\n         x1: 1717085185286,\n       },\n     ],\n   },\n ];;",
                  "label": "Example 1"
                }
              ]
            },
            {
              "defaultValue": null,
              "description": "Callback fired any time the user clicks on the table cell.",
              "isRequired": false,
              "name": "onClick",
              "type": {
                "name": "function",
                "meta": {
                  "arguments": [
                    {
                      "name": "event",
                      "type": "React.MouseEvent",
                      "description": ""
                    }
                  ],
                  "returnValue": []
                },
                "raw": "func"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "NRQL query used for fetching data. The query is performed against the\n provided `accountIds`.",
              "isRequired": false,
              "name": "query",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Inline style for custom styling.\n\n Should be used only for positioning and spacing purposes.",
              "isRequired": false,
              "name": "style",
              "type": {
                "name": "object",
                "meta": null,
                "raw": "object"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Adds a `data-test-id` attribute. Use it to target the component in unit and\n E2E tests.\n\n For a test id to be valid, prefix it with your nerdpack id, followed up by a\n dot.\n\n For example, `my-nerdpack.some-element`.\n\n **Note:** You might not see `data-test-id` attributes as they are removed\n from the DOM, to debug them pass a `e2e-test` query parameter to the URL.",
              "isRequired": false,
              "name": "testId",
              "type": {
                "name": "string",
                "meta": null,
                "raw": "string"
              },
              "deprecation": null,
              "examples": []
            },
            {
              "defaultValue": null,
              "description": "Location object or url string to link to.\n\n Linked `TableRowCell`s are unstyled and will not show icons for\n external links. If the same styling as the Link component is what is\n desired, then use a `Link` instead as a child component within the\n cell.",
              "isRequired": false,
              "name": "to",
              "type": {
                "name": "shape|string",
                "meta": {
                  "types": [
                    {
                      "name": "shape",
                      "raw": "shape",
                      "meta": {
                        "types": [
                          {
                            "name": "pathname",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": true,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "search",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          },
                          {
                            "name": "hash",
                            "description": null,
                            "deprecation": null,
                            "examples": [],
                            "isRequired": false,
                            "type": {
                              "name": "string",
                              "raw": "string",
                              "meta": null
                            },
                            "defaultValue": null
                          }
                        ]
                      }
                    },
                    {
                      "name": "string",
                      "raw": "string",
                      "meta": null
                    }
                  ]
                },
                "raw": "oneOfType"
              },
              "deprecation": null,
              "examples": []
            }
          ],
          "methods": [],
          "examples": [
            {
              "sourceCode": "function render() {\n  const items = [\n    {\n      accountId: 1,\n      query: \"SELECT count(*) FROM Transaction WHERE metric = '…' TIMESERIES\",\n    },\n  ];\n\n  return (\n    <Table items={items}>\n      <TableHeader>\n        <TableHeaderCell>Account</TableHeaderCell>\n        <TableHeaderCell>Stats</TableHeaderCell>\n      </TableHeader>\n\n      {({ item }) => (\n        <TableRow>\n          <TableRowCell>{item.accountId}</TableRowCell>\n          <SparklineTableRowCell\n            accountId={item.accountId}\n            query={item.query}\n          />\n        </TableRow>\n      )}\n    </Table>\n  );\n}",
              "label": "Example 1"
            },
            {
              "sourceCode": "<NrqlQuery\n  accountId={1}\n  query=\"SELECT count(*) FROM Transaction WHERE metric = '…' TIMESERIES\"\n>\n  {({ loading, error, data }) => {\n    if (loading || error) {\n      return null;\n    }\n\n    return (\n      <Table items={data}>\n        <TableHeader>\n          <TableHeaderCell>Name</TableHeaderCell>\n          <TableHeaderCell>Stats</TableHeaderCell>\n        </TableHeader>\n\n        {({ item }) => (\n          <TableRow>\n            <TableRowCell>{item.metadata.name}</TableRowCell>\n            <SparklineTableRowCell data={[item]} />\n          </TableRow>\n        )}\n      </Table>\n    );\n  }}\n</NrqlQuery>",
              "label": "Example 2"
            }
          ]
        }
      ]
    }
  },
  "extensions": {}
}