{
  "data": {
    "allNewRelicSdkApi": {
      "nodes": [
        {
          "usage": "import { logger } from 'nr1'",
          "name": "logger",
          "methods": [
            {
              "description": null,
              "name": "logger.debug",
              "examples": [],
              "arguments": []
            },
            {
              "description": "Logs a deprecation message around a given component. Time should not be\n manually provided, as it will be automatically inserted by the\n corresponding linting rule, side with a hashing mechanism to avoid manual\n override.\n\n To use it, simply put the message with `logger.deprecate('Do not use')`,\n then run the linter with \"--fix\" to add it.",
              "name": "logger.deprecate",
              "examples": [],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Deprecation message.",
                  "name": "message",
                  "type": "string"
                }
              ]
            },
            {
              "description": "Logs the message and parameters given in the shape of an error line.\n\n See\n  [Using string substitutions](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions)\n  in the documentation of console for details.",
              "name": "logger.error",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const state = { foo: 42, bar: 'token' };\n\nlogger.error('Invalid state passed: %O', state);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "JavaScript string containing zero or more\n         substitution strings. To print the percentage sign, use double\n         encoding (`%%`).",
                  "name": "message",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "JavaScript objects with which to replace\n         substitution strings within `message`. This gives you additional\n         control over the format of the output.",
                  "name": "...params",
                  "type": "Object[]"
                }
              ]
            },
            {
              "description": "Logs the message and parameters given in the shape of a log line.\n\n See\n  [Using string substitutions](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions)\n  in the documentation of console for details.",
              "name": "logger.log",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "logger.log('Hello, my name is %s', 'John Doe');"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "JavaScript string containing zero or more\n         substitution strings. To print the percentage sign, use double\n         encoding (`%%`).",
                  "name": "message",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "JavaScript objects with which to replace\n         substitution strings within `message`. This gives you additional\n         control over the format of the output.",
                  "name": "...params",
                  "type": "Object[]"
                }
              ]
            },
            {
              "description": "Report the message and parameters given without printing anything in the\n console.\n\n See\n  [Using string substitutions](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions)\n  in the documentation of console for details.",
              "name": "logger.silent",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "logger.silent('called method %s with arguments %O', 'foo', args);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "JavaScript string containing zero or more\n         substitution strings. To print the percentage sign, use double\n         encoding (`%%`).",
                  "name": "message",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "JavaScript objects with which to replace\n         substitution strings within `message`. This gives you additional\n         control over the format of the output.",
                  "name": "...params",
                  "type": "Object[]"
                }
              ]
            },
            {
              "description": "Logs the message and parameters given in the shape of a warn line.\n\n See\n  [Using string substitutions](https://developer.mozilla.org/en-US/docs/Web/API/console#Using_string_substitutions)\n  in the documentation of console for details.",
              "name": "logger.warn",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "logger.warn('Threshold exceeded by %d%%!', 35);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "JavaScript string containing zero or more\n         substitution strings. To print the percentage sign, use double\n         encoding (`%%`).",
                  "name": "message",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "JavaScript objects with which to replace\n         substitution strings within `message`. This gives you additional\n         control over the format of the output.",
                  "name": "...params",
                  "type": "Object[]"
                }
              ]
            }
          ],
          "examples": [],
          "description": "A set of methods to replace `console.log()`, `console.warn()`, and\n `console.error()`.",
          "typeDefs": []
        },
        {
          "usage": "import { navigation } from 'nr1'",
          "name": "navigation",
          "methods": [
            {
              "description": "Returns a location object that can be used to redirect to an entity in its corresponding launcher (default: Explorer launcher).\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenEntityLocation",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "const entityGuid = 'Mxka102Ak';\n\nconst location = navigation.getOpenEntityLocation(entityGuid);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "GUID of the entity to open.",
                  "name": "entityGuid",
                  "type": "string"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to redirect to a given launcher.\n\nYou can also specify nerdlet and stacked nerdlets with given states to be opened in this launcher.\n\nIf nerdlet is not specified, the root nerdlet of the given launcher will be opened.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenLauncherLocation",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const launcher = {\n  id: 'nr1-core.explorer',\n};\n\nconst location = navigation.getOpenLauncherLocation(launcher);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify a nerdlet and stacked nerdlets to be opened.\n// You can combine Nerdpack items from different nerdpacks.\nconst launcher = {\n  id: '074e8260-fa9c-4d71-f7a0-51835417a423.my-launcher-id',\n  nerdlet: {\n    id: 'nr1-core.listing',\n  },\n  stackedNerdlets: [\n    {\n      id: 'dashboards.list',\n    },\n  ],\n};\n\nconst location = navigation.getOpenLauncherLocation(launcher);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Launcher to open.",
                  "name": "launcher",
                  "type": "Launcher"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to open a given nerdlet with a given state.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenNerdletLocation",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nconst location = navigation.getOpenNerdletLocation(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdlet = {\n  id: 'dashboards.list',\n  urlState: {\n    foo: 'bar',\n  },\n};\n\nconst location = navigation.getOpenNerdletLocation(nerdlet);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Nerdlet to replace current nerdlet with.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to trigger opening overlay.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenOverlayLocation",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "const overlay = {\n  id: 'nr1-core.search',\n};\n\nconst location = navigation.getOpenOverlayLocation(overlay);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Overlay you want to open.",
                  "name": "overlay",
                  "type": "Overlay"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to trigger opening entity in a stacked nerdlet.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenStackedEntityLocation",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "const entityGuid = 'Mxka102Ak';\n\nconst location = navigation.getOpenStackedEntityLocation(entityGuid);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "GUID of the entity to open.",
                  "name": "entityGuid",
                  "type": "string"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to trigger opening stacked nerdlet with a given state.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getOpenStackedNerdletLocation",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nconst location = navigation.getOpenStackedNerdletLocation(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdletWithState = {\n  id: 'dashboards.list',\n  urlState: {\n    foo: 'bar',\n  },\n};\n\nconst location = navigation.getOpenStackedNerdletLocation(nerdletWithState);"
                },
                {
                  "label": "Example 3",
                  "sourceCode": "// If you want to open nerdlet from the current nerdpack then you can omit its nerdpackId.\nconst nerdletWithState = {\n  id: 'my-nerdlet-id',\n  urlState: {\n    foo: 'bar',\n  },\n};\n\nconst location = navigation.getOpenStackedNerdletLocation(nerdletWithState);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Nerdlet to open as stacked nerdlet.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                }
              ]
            },
            {
              "description": "Returns a location object that can be used to replace current nerdlet.\n\nLocation objects can be passed into `<Link to={location}>` component to navigate inside the platform.",
              "name": "navigation.getReplaceNerdletLocation",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nconst location = navigation.getReplaceNerdletLocation(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// If the nerdlet you want to replace with is in the current nerdpack then you can omit its nerdpackId.\nconst nerdlet = {\n  id: 'my-nerdlet-id',\n};\n\nconst location = navigation.getReplaceNerdletLocation(nerdlet);"
                },
                {
                  "label": "Example 3",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdlet = {\n  id: 'my-nerdlet-id',\n  urlState: {\n    foo: 'bar',\n  },\n};\n\nconst location = navigation.getReplaceNerdletLocation(nerdlet);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Nerdlet to replace current nerdlet with.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                }
              ]
            },
            {
              "description": "Opens an entity in its corresponding launcher (default: Explorer launcher).\n\nTo navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openEntity",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "const entityGuid = 'Mxka102Ak';\n\nnavigation.openEntity(entityGuid);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "GUID of the entity to open.",
                  "name": "entityGuid",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Opens launcher inside the platform.\n\nYou can also specify nerdlet and stacked nerdlets with given states to be opened in this launcher.\n\nIf nerdlet is not specified, the root nerdlet of the given launcher will be opened.\n\nIf you wish to navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openLauncher",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const launcher = {\n  id: 'nr1-core.explorer',\n};\n\nnavigation.openLauncher(launcher);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify a nerdlet and stacked nerdlets to be opened.\n// You can combine Nerdpack items from different nerdpacks.\nconst launcher = {\n  id: '074e8260-fa9c-4d71-f7a0-51835417a423.my-launcher-id',\n  nerdlet: {\n    id: 'nr1-core.listing',\n  },\n  stackedNerdlets: [\n    {\n      id: 'dashboards.list',\n    },\n  ],\n};\n\nnavigation.openLauncher(launcher);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Launcher to open.",
                  "name": "launcher",
                  "type": "Launcher"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Opens a nerdlet in the current launcher.\n\nIf `nerdlet.urlState` is provided, it will be shallow-merged with the initial state of the nerdlet.\n\nIf you wish to navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openNerdlet",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nnavigation.openNerdlet(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdletWithState = {\n  id: 'dashboards.list',\n  urlState: {\n    foo: 'bar',\n  }\n};\n\nconst location = navigation.getOpenNerdletLocation(nerdletWithState);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Nerdlet to open.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Opens an overlay on top of the current launcher.\n\nIf `overlay.urlState` is provided, it will be shallow-merged with the initial state of the overlay.\n\nIf you wish to navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openOverlay",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "const overlay = {\n  id: 'nr1-core.search',\n};\n\nnavigation.openOverlay(overlay);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Overlay you want to open.",
                  "name": "overlay",
                  "type": "Overlay"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Opens a stacked nerdlet with entity open in it. If triggered from a stacked nerdlet that is not the last one on the stack, the stacked nerdlet aboves it will be replaced.\n\nTo navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openStackedEntity",
              "examples": [
                {
                  "label": "Example",
                  "sourceCode": "// Opens stacked entity.\nconst entityGuid = 'Mxka102Ak';\n\nnavigation.openStackedEntity(entityGuid);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "GUID of the entity to open.",
                  "name": "entityGuid",
                  "type": "string"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Opens a stacked nerdlet with given state above current one.\n\nIf triggered from a stacked nerdlet that is not the last one on the stack, the stacked nerdlets above it will be replaced.\n\nIf you wish to navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.openStackedNerdlet",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nnavigation.openStackedNerdlet(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdletWithState = {\n  id: '074e8260-fa9c-4d71-f7a0-51835417a423.my-nerdlet-id',\n  urlState: {\n    foo: 'bar',\n  }\n};\n\nnavigation.openStackedNerdlet(nerdlet);"
                },
                {
                  "label": "Example 3",
                  "sourceCode": "// If you want to open nerdlet from the current nerdpack then you can omit its nerdpackId.\nconst nerdletWithState = {\n  id: 'my-nerdlet-id',\n  urlState: {\n    foo: 'bar',\n  }\n};\n\nnavigation.openStackedNerdlet(nerdlet);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "Nerdlet to open as stacked nerdlet.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            },
            {
              "description": "Replaces the nerdlet that is calling this API method.\n\nIf you wish to navigate without adding an entry to the browser history, set `urlStateOptions.replaceHistory` to `true`.",
              "name": "navigation.replaceNerdlet",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "const nerdlet = {\n  id: 'dashboards.list',\n};\n\nnavigation.replaceNerdlet(nerdlet);"
                },
                {
                  "label": "Example 2",
                  "sourceCode": "// If the nerdlet you want to replace with is in the current nerdpack then you can omit its nerdpackId.\nconst nerdlet = {\n  id: 'my-nerdlet-id',\n};\n\nnavigation.replaceNerdlet(nerdlet);"
                },
                {
                  "label": "Example 3",
                  "sourceCode": "// You can also specify nerdlet's state.\nconst nerdlet = {\n  id: 'my-nerdlet-id',\n  urlState: {\n    foo: 'bar',\n  },\n};\n\nnavigation.replaceNerdlet(nerdlet);"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "GUID of the entity to open.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                },
                {
                  "defaultValue": null,
                  "description": "Options for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            }
          ],
          "examples": [],
          "description": "",
          "typeDefs": [
            {
              "name": "Nerdlet",
              "properties": [
                {
                  "description": "Id of the nerdlet. You can specify the full nerdlet id: <nerdpack-id>.<nerdlet-id> (i.e. \"8ba28fe4-5362-4f7f-8f9a-4b8c6c39d8a6.my-nerdlet\") or simply <nerdlet-id> (i.e. \"my-nerdlet\"). In the latter case, the nerdlet will be treated as if it belongs to the current nerdpack, meaning that the nerdpack id is automatically added by the platform.",
                  "name": "id",
                  "type": "string"
                },
                {
                  "description": "State of the nerdlet which is persisted in the url.",
                  "name": "urlState",
                  "type": "Object"
                }
              ]
            },
            {
              "name": "UrlStateOptions",
              "properties": [
                {
                  "description": "If `true`, the current entry in the browser history will be replaced with the new one.",
                  "name": "replaceHistory",
                  "type": "boolean"
                }
              ]
            },
            {
              "name": "Overlay",
              "properties": [
                {
                  "description": "Id of the overlay to be opened, for example `nr1-core.search`.",
                  "name": "id",
                  "type": "string"
                },
                {
                  "description": "State of the overlay which is persisted in the url.",
                  "name": "urlState",
                  "type": "Object"
                }
              ]
            },
            {
              "name": "Launcher",
              "properties": [
                {
                  "description": "Id of the launcher, for example `nr1-core.explorer`.",
                  "name": "id",
                  "type": "string"
                },
                {
                  "description": "Nerdlet to be opened in the launcher. If not provided, the root nerdlet of the launcher will be opened.",
                  "name": "nerdlet",
                  "type": "Nerdlet"
                },
                {
                  "description": "Nerdlet to be opened as stacked nerdlets.",
                  "name": "stackedNerdlets",
                  "type": "Nerdlet[]"
                }
              ]
            },
            {
              "name": "Location",
              "properties": [
                {
                  "description": "String representing the path to link to.",
                  "name": "pathname",
                  "type": "string"
                },
                {
                  "description": "String representing query parameters.",
                  "name": "search",
                  "type": "string"
                },
                {
                  "description": "String to put in the URL as hash, e.g. #entities.",
                  "name": "hash",
                  "type": "string"
                }
              ]
            }
          ]
        },
        {
          "usage": "import { nerdlet } from 'nr1'",
          "name": "nerdlet",
          "methods": [
            {
              "description": "Returns a location object. Location objects can be passed into\n `<Link to={location} />` component to navigate inside the platform. When\n navigated to that location, properties from `urlState` argument will be able\n to be read from `NerdletStateContext.Consumer`.\n\n This method behaves like React’s `setState()`, meaning that it performs a\n shallow merge between the current URL state and the provided value in the\n `urlState` parameter.",
              "name": "nerdlet.getSetUrlStateLocation",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "nerdlet.getSetUrlStateLocation({\n  foo: 'bar',\n});"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "New nerdlet URL state.",
                  "name": "urlState",
                  "type": "Object"
                }
              ]
            },
            {
              "description": "Updates the current nerdlet's configuration.\n\n This method behaves like React’s `setState()`, meaning that it performs a\n shallow merge between the current config state and the provided config.",
              "name": "nerdlet.setConfig",
              "examples": [
                {
                  "label": "Enable account picker without cross-account support",
                  "sourceCode": "nerdlet.setConfig({\n  accountPicker: true,\n});"
                },
                {
                  "label": "Enable account picker with cross-account support",
                  "sourceCode": "nerdlet.setConfig({\n  accountPicker: true,\n  accountPickerValues: [\n    nerdlet.ACCOUNT_PICKER_VALUE.CROSS_ACCOUNT,\n    ...nerdlet.ACCOUNT_PICKER_DEFAULT_VALUES,\n  ],\n});"
                },
                {
                  "label": "Enable action controls",
                  "sourceCode": "nerdlet.setConfig({\n  actionControls: true,\n  actionControlButtons: [\n    {\n      label: 'Favorite',\n      type: nerdlet.ACTION_CONTROL_BUTTON_TYPES.SECONDARY,\n      hint: 'Add entity to my favorites',\n      iconType: Icon.TYPE.PROFILES__EVENTS__FAVORITE,\n      onClick: () => this.onFavoriteEntity(),\n    },\n  ],\n});"
                },
                {
                  "label": "Enable filter bar",
                  "sourceCode": "nerdlet.setConfig({\n  filterBar: true,\n});"
                },
                {
                  "label": "Enable time picker with default values",
                  "sourceCode": "nerdlet.setConfig({\n  timePicker: true,\n  timePickerRanges: nerdlet.TIME_PICKER_DEFAULT_RANGES,\n});"
                },
                {
                  "label": "Enable time picker with custom values",
                  "sourceCode": "nerdlet.setConfig({\n  timePicker: true,\n  timePickerRanges: [\n    nerdlet.TIME_PICKER_RANGE.NONE,\n    {\n      label: 'Last 15 days',\n      offset: 1000 * 60 * 60 * 24 * 15,\n    },\n    nerdlet.TIME_PICKER_RANGE.CUSTOM,\n  ],\n});"
                },
                {
                  "label": "Disable nerdlet header",
                  "sourceCode": "nerdlet.setConfig({\n  header: false,\n});"
                },
                {
                  "label": "Set custom header title and metadata",
                  "sourceCode": "nerdlet.setConfig({\n  headerType: nerdlet.HEADER_TYPE.CUSTOM,\n  headerTitle: 'My custom header title',\n  headerTitleMetadata: 'My custom header title metadata',\n});"
                },
                {
                  "label": "Set custom header title with parent",
                  "sourceCode": "nerdlet.setConfig({\n  headerType: nerdlet.HEADER_TYPE.CUSTOM,\n  headerTitle: 'My custom header title',\n  headerParentTitle: 'Parent nerdlet I want to redirect to',\n  headerParentLocation: navigation.openNerdlet({\n    id: 'my-nerdlet-to-redirect-to',\n  }),\n});"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "New nerdlet config",
                  "name": "config",
                  "type": "NerdletConfig"
                }
              ]
            },
            {
              "description": "Updates the current nerdlet's URL state that can be read from\n `NerdletStateContext.Consumer`.\n\n If you wish to update nerdlet's state without persisting its value in the\n url, use React's built-in `setState()`.\n\n This method behaves like React’s `setState()`, meaning that it performs a\n shallow merge between the current URL state and the provided state in the\n `urlState` parameter.\n\n If you wish to navigate without adding an entry to the browser history, set\n `urlStateOptions.replaceHistory` to `true`.",
              "name": "nerdlet.setUrlState",
              "examples": [
                {
                  "label": "Example 1",
                  "sourceCode": "nerdlet.setUrlState({\n  foo: 'bar',\n});"
                }
              ],
              "arguments": [
                {
                  "defaultValue": null,
                  "description": "New nerdlet URL state.",
                  "name": "urlState",
                  "type": "Object"
                },
                {
                  "defaultValue": "{replaceHistory: false}",
                  "description": "Options\n        for the URL state.",
                  "name": "urlStateOptions",
                  "type": "UrlStateOptions"
                }
              ]
            }
          ],
          "examples": [],
          "description": "A set of methods to modify the nerdlet state.\n\n Use `NerdletStateContext` to read the nerdlet state.",
          "typeDefs": [
            {
              "name": "Location",
              "properties": [
                {
                  "description": "String representing the path to link to.",
                  "name": "pathname",
                  "type": "string"
                },
                {
                  "description": "String representing query parameters.",
                  "name": "search",
                  "type": "string"
                },
                {
                  "description": "String to put in the URL as hash, e.g. #entities.",
                  "name": "hash",
                  "type": "string"
                }
              ]
            },
            {
              "name": "NerdletConfig",
              "properties": [
                {
                  "description": "Enable or disable the nerdlet's account\n           picker.",
                  "name": "accountPicker",
                  "type": "boolean"
                },
                {
                  "description": "Config the available accounts for the\n           account picker. There are only two options: all authorized accounts\n           (default) or all authorized accounts plus the 'All accounts' option\n           (cross-account support). See examples for more details.",
                  "name": "accountPickerValues",
                  "type": "any[]"
                },
                {
                  "description": "Enable or disable the nerdlet's action\n           controls.",
                  "name": "actionControls",
                  "type": "boolean"
                },
                {
                  "description": "Config of\n           your own custom action controls for the nerldet.",
                  "name": "actionControlButtons",
                  "type": "ActionControlButton[]"
                },
                {
                  "description": "Enable or disable the nerdlet's filter bar.",
                  "name": "filterBar",
                  "type": "boolean"
                },
                {
                  "description": "Enable or disable the nerdlet's header.",
                  "name": "header",
                  "type": "boolean"
                },
                {
                  "description": "Set the title of the nerdlet's header.",
                  "name": "headerTitle",
                  "type": "string"
                },
                {
                  "description": "Set the title metadata of the\n           nerdlet's header.",
                  "name": "headerTitleMetadata",
                  "type": "string"
                },
                {
                  "description": "Set the header type of the nerdlet's header.\n           Possible values are from `nerdlet.HEADER_TYPE`.",
                  "name": "headerType",
                  "type": "string"
                },
                {
                  "description": "Set the parent title of the nerdlet's\n           header.",
                  "name": "headerParentTitle",
                  "type": "string"
                },
                {
                  "description": "Set the parent location of the\n           nerdlet's header.",
                  "name": "headerParentLocation",
                  "type": "Location"
                },
                {
                  "description": "Enable or disable the nerdlet's time picker.",
                  "name": "timePicker",
                  "type": "boolean"
                },
                {
                  "description": "Set of time ranges\n           to display for this nerdlet.",
                  "name": "timePickerRanges",
                  "type": "TimePickerRange[]"
                },
                {
                  "description": "Time range offset to select by\n           default.",
                  "name": "timePickerDefaultOffset",
                  "type": "number"
                }
              ]
            },
            {
              "name": "ActionControlButton",
              "properties": [
                {
                  "description": "Label of the action control button.",
                  "name": "label",
                  "type": "string"
                },
                {
                  "description": "Type of the action\n           control button.",
                  "name": "type",
                  "type": "Button.TYPE.PRIMARY | Button.TYPE.PLAIN"
                },
                {
                  "description": "Name of the icon to display.",
                  "name": "iconType",
                  "type": "string"
                },
                {
                  "description": "Text used for the action control button's tooltip.",
                  "name": "hint",
                  "type": "string"
                },
                {
                  "description": "Callback fired any time the user clicks on the\n           action control button.",
                  "name": "onClick",
                  "type": "() => void"
                }
              ]
            },
            {
              "name": "TimePickerRange",
              "properties": [
                {
                  "description": "Label for this time range.",
                  "name": "label",
                  "type": "string"
                },
                {
                  "description": "Offset in ms.",
                  "name": "offset",
                  "type": "number"
                }
              ]
            },
            {
              "name": "UrlStateOptions",
              "properties": [
                {
                  "description": "If `true`, the current entry in the\n           browser history will be replaced with the new one.",
                  "name": "replaceHistory",
                  "type": "boolean"
                }
              ]
            }
          ]
        },
        {
          "usage": "import { ngql } from 'nr1'",
          "name": "ngql",
          "methods": [],
          "examples": [
            {
              "label": "Example 1",
              "sourceCode": "import { ngql } from 'nr1';\n\nconst query = ngql`\n  {\n    actor {\n      user {\n        id\n        email\n        name\n      }\n    }\n  }\n`;\n\nfunction render() {\n  return (\n    <NerdGraphQuery query={query}>\n      {({ data }) => JSON.stringify(data, null, 2)}\n    </NerdGraphQuery>\n  );\n}"
            }
          ],
          "description": "A JavaScript template literal tag that parses GraphQL query strings into\n GraphQL documents that can be used to do NerdGraph queries.",
          "typeDefs": []
        }
      ]
    }
  }
}